
Rob2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007688  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000028f8  08007818  08007818  00017818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a110  0800a110  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a110  0800a110  0001a110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a118  0800a118  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000010  0800a118  0800a118  0001a118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a128  0800a128  0001a128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a12c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  20000078  0800a1a4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  0800a1a4  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f8ba  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004088  00000000  00000000  0003f962  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001790  00000000  00000000  000439f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000015b8  00000000  00000000  00045180  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000276ed  00000000  00000000  00046738  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00014395  00000000  00000000  0006de25  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de31c  00000000  00000000  000821ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001604d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  00160554  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007800 	.word	0x08007800

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08007800 	.word	0x08007800

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <_Z5Hellov>:


/*******************************************************************************
 * Say Hello :-)
 ******************************************************************************/
void Hello() {
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af02      	add	r7, sp, #8
	int x, y;
	char *msg = (char *)"Salut Thierry !";
 8000586:	4b26      	ldr	r3, [pc, #152]	; (8000620 <_Z5Hellov+0xa0>)
 8000588:	60fb      	str	r3, [r7, #12]

	lcd.SetFont(Font_11x18);
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <_Z5Hellov+0xa4>)
 800058c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800058e:	4826      	ldr	r0, [pc, #152]	; (8000628 <_Z5Hellov+0xa8>)
 8000590:	f000 f942 	bl	8000818 <_ZN9LcdScreen7SetFontE7LcdFont>
	lcd.GetStringSize(msg, &x, &y);
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	f107 0208 	add.w	r2, r7, #8
 800059a:	68f9      	ldr	r1, [r7, #12]
 800059c:	4822      	ldr	r0, [pc, #136]	; (8000628 <_Z5Hellov+0xa8>)
 800059e:	f000 fb30 	bl	8000c02 <_ZN9LcdScreen13GetStringSizeEPcPiS1_>
	x = (lcd.width - x) / 2;
 80005a2:	4b21      	ldr	r3, [pc, #132]	; (8000628 <_Z5Hellov+0xa8>)
 80005a4:	685a      	ldr	r2, [r3, #4]
 80005a6:	68bb      	ldr	r3, [r7, #8]
 80005a8:	1ad3      	subs	r3, r2, r3
 80005aa:	0fda      	lsrs	r2, r3, #31
 80005ac:	4413      	add	r3, r2
 80005ae:	105b      	asrs	r3, r3, #1
 80005b0:	60bb      	str	r3, [r7, #8]
	y = (lcd.height - y) / 2;
 80005b2:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <_Z5Hellov+0xa8>)
 80005b4:	689a      	ldr	r2, [r3, #8]
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	1ad3      	subs	r3, r2, r3
 80005ba:	0fda      	lsrs	r2, r3, #31
 80005bc:	4413      	add	r3, r2
 80005be:	105b      	asrs	r3, r3, #1
 80005c0:	607b      	str	r3, [r7, #4]
	lcd.SetTextPos(x, y);
 80005c2:	68bb      	ldr	r3, [r7, #8]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	4619      	mov	r1, r3
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <_Z5Hellov+0xa8>)
 80005ca:	f000 fa3e 	bl	8000a4a <_ZN9LcdScreen10SetTextPosEii>
	lcd.SetFontColor(LCD_COLOR_ORANGE);
 80005ce:	f64f 31e4 	movw	r1, #64484	; 0xfbe4
 80005d2:	4815      	ldr	r0, [pc, #84]	; (8000628 <_Z5Hellov+0xa8>)
 80005d4:	f000 f912 	bl	80007fc <_ZN9LcdScreen12SetFontColorEi>
	lcd.TextPuts(msg);
 80005d8:	68f9      	ldr	r1, [r7, #12]
 80005da:	4813      	ldr	r0, [pc, #76]	; (8000628 <_Z5Hellov+0xa8>)
 80005dc:	f000 fac8 	bl	8000b70 <_ZN9LcdScreen8TextPutsEPc>
	lcd.SetFontColor(LCD_COLOR_WHITE);
 80005e0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80005e4:	4810      	ldr	r0, [pc, #64]	; (8000628 <_Z5Hellov+0xa8>)
 80005e6:	f000 f909 	bl	80007fc <_ZN9LcdScreen12SetFontColorEi>
	lcd.Circle(100, 100, 50, false, LCD_COLOR_CYAN);
 80005ea:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2300      	movs	r3, #0
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2332      	movs	r3, #50	; 0x32
 80005f6:	2264      	movs	r2, #100	; 0x64
 80005f8:	2164      	movs	r1, #100	; 0x64
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <_Z5Hellov+0xa8>)
 80005fc:	f000 fc6a 	bl	8000ed4 <_ZN9LcdScreen6CircleEiiibi>
	lcd.DrawLine(100, 100, 300, 200, LCD_COLOR_BROWN);
 8000600:	f64b 33ca 	movw	r3, #48074	; 0xbbca
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	23c8      	movs	r3, #200	; 0xc8
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800060e:	2264      	movs	r2, #100	; 0x64
 8000610:	2164      	movs	r1, #100	; 0x64
 8000612:	4805      	ldr	r0, [pc, #20]	; (8000628 <_Z5Hellov+0xa8>)
 8000614:	f000 fb2a 	bl	8000c6c <_ZN9LcdScreen8DrawLineEiiiii>
}
 8000618:	bf00      	nop
 800061a:	3710      	adds	r7, #16
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}
 8000620:	08007818 	.word	0x08007818
 8000624:	200000d8 	.word	0x200000d8
 8000628:	20000094 	.word	0x20000094

0800062c <AppInit>:

/*******************************************************************************
 * Application initialisation
 ******************************************************************************/
void AppInit() {
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af02      	add	r7, sp, #8
	int i;

	lcd.Init();
 8000632:	4816      	ldr	r0, [pc, #88]	; (800068c <AppInit+0x60>)
 8000634:	f000 f906 	bl	8000844 <_ZN9LcdScreen4InitEv>
	lcd.Orientation(LCD_LANDSCAPE_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <AppInit+0x60>)
 800063c:	f000 f93e 	bl	80008bc <_ZN9LcdScreen11OrientationEi>
	touch.Reset();
 8000640:	4813      	ldr	r0, [pc, #76]	; (8000690 <AppInit+0x64>)
 8000642:	f000 fd99 	bl	8001178 <_ZN11TouchScreen5ResetEv>
	Hello();
 8000646:	f7ff ff9b 	bl	8000580 <_Z5Hellov>

	for (i = 30; i < 100; i += 10) {
 800064a:	231e      	movs	r3, #30
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b63      	cmp	r3, #99	; 0x63
 8000652:	dc17      	bgt.n	8000684 <AppInit+0x58>
		lcd.DrawHLine(10, 100, i, LCD_COLOR_GREEN);
 8000654:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000658:	9300      	str	r3, [sp, #0]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2264      	movs	r2, #100	; 0x64
 800065e:	210a      	movs	r1, #10
 8000660:	480a      	ldr	r0, [pc, #40]	; (800068c <AppInit+0x60>)
 8000662:	f000 fb85 	bl	8000d70 <_ZN9LcdScreen9DrawHLineEiiii>
		lcd.DrawVLine(100+i, 10, 100, LCD_COLOR_YELLOW);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	f103 0164 	add.w	r1, r3, #100	; 0x64
 800066c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000670:	9300      	str	r3, [sp, #0]
 8000672:	2364      	movs	r3, #100	; 0x64
 8000674:	220a      	movs	r2, #10
 8000676:	4805      	ldr	r0, [pc, #20]	; (800068c <AppInit+0x60>)
 8000678:	f000 fbae 	bl	8000dd8 <_ZN9LcdScreen9DrawVLineEiiii>
	for (i = 30; i < 100; i += 10) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	330a      	adds	r3, #10
 8000680:	607b      	str	r3, [r7, #4]
 8000682:	e7e4      	b.n	800064e <AppInit+0x22>
	}
}
 8000684:	bf00      	nop
 8000686:	3708      	adds	r7, #8
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20000094 	.word	0x20000094
 8000690:	200000f0 	.word	0x200000f0

08000694 <AppLoop>:

/*******************************************************************************
 * Application loop
 ******************************************************************************/
void AppLoop() {
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	; 0x30
 8000698:	af00      	add	r7, sp, #0
	int x = 0, y = 0;
 800069a:	2300      	movs	r3, #0
 800069c:	62bb      	str	r3, [r7, #40]	; 0x28
 800069e:	2300      	movs	r3, #0
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
	int Res;
	char sMsg[30];


	// display Pen Status
	Res = TouchPenInterrupt();
 80006a2:	f000 fd4d 	bl	8001140 <_Z17TouchPenInterruptv>
 80006a6:	62f8      	str	r0, [r7, #44]	; 0x2c
	if (Res) {
 80006a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d01a      	beq.n	80006e4 <AppLoop+0x50>
		touch.GetXYMedian(&x, &y);
 80006ae:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80006b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b6:	4619      	mov	r1, r3
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <AppLoop+0x60>)
 80006ba:	f000 ffa7 	bl	800160c <_ZN11TouchScreen11GetXYMedianEPiS0_>
		sprintf(sMsg, "x=%05d, y=%05d", x, y);
 80006be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80006c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006c2:	1d38      	adds	r0, r7, #4
 80006c4:	490c      	ldr	r1, [pc, #48]	; (80006f8 <AppLoop+0x64>)
 80006c6:	f006 fc9f 	bl	8007008 <siprintf>
		lcd.TextPutsAt(5, 5, sMsg);
 80006ca:	1d3b      	adds	r3, r7, #4
 80006cc:	2205      	movs	r2, #5
 80006ce:	2105      	movs	r1, #5
 80006d0:	480a      	ldr	r0, [pc, #40]	; (80006fc <AppLoop+0x68>)
 80006d2:	f000 fa82 	bl	8000bda <_ZN9LcdScreen10TextPutsAtEiiPc>

		//touch.GetXY(&x, &y, false);
		//sprintf(sMsg, "x=%05d, y=%05d", x, y);
		//lcd.TextPutsAt(5, 30, sMsg);

		lcd.DrawPixel(x, y, LCD_COLOR_MAGENTA);
 80006d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80006d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80006da:	f24a 2354 	movw	r3, #41556	; 0xa254
 80006de:	4807      	ldr	r0, [pc, #28]	; (80006fc <AppLoop+0x68>)
 80006e0:	f000 faaa 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
	}
	osDelay(10);
 80006e4:	200a      	movs	r0, #10
 80006e6:	f004 f823 	bl	8004730 <osDelay>

}
 80006ea:	bf00      	nop
 80006ec:	3730      	adds	r7, #48	; 0x30
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	200000f0 	.word	0x200000f0
 80006f8:	08007828 	.word	0x08007828
 80006fc:	20000094 	.word	0x20000094

08000700 <_ZN9LcdScreenC1Ei>:

/* Methods -------------------------------------------------------------------*/

/*----------------------------------------------------------------------------*/
// Constructor
LcdScreen::LcdScreen(int orientation) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
 8000708:	6039      	str	r1, [r7, #0]

	fontColor = LCD_COLOR_WHITE;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000710:	60da      	str	r2, [r3, #12]
	backgroundColor = LCD_COLOR_BLACK;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	611a      	str	r2, [r3, #16]
	SetOrientation(orientation);
 8000718:	6839      	ldr	r1, [r7, #0]
 800071a:	6878      	ldr	r0, [r7, #4]
 800071c:	f000 f812 	bl	8000744 <_ZN9LcdScreen14SetOrientationEi>
	SetColors(LCD_COLOR_WHITE, LCD_COLOR_BLACK);
 8000720:	2200      	movs	r2, #0
 8000722:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f856 	bl	80007d8 <_ZN9LcdScreen9SetColorsEii>
	SetFont(Font_7x10);
 800072c:	4b04      	ldr	r3, [pc, #16]	; (8000740 <_ZN9LcdScreenC1Ei+0x40>)
 800072e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000730:	6878      	ldr	r0, [r7, #4]
 8000732:	f000 f871 	bl	8000818 <_ZN9LcdScreen7SetFontE7LcdFont>
}
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	4618      	mov	r0, r3
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000cc 	.word	0x200000cc

08000744 <_ZN9LcdScreen14SetOrientationEi>:

/*----------------------------------------------------------------------------*/
// Private : Store the orientation for the LCD
void LcdScreen::SetOrientation(int orientation) {
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]

	switch (orientation) {
 800074e:	683b      	ldr	r3, [r7, #0]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d833      	bhi.n	80007bc <_ZN9LcdScreen14SetOrientationEi+0x78>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <_ZN9LcdScreen14SetOrientationEi+0x18>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000795 	.word	0x08000795
 8000760:	080007a9 	.word	0x080007a9
 8000764:	0800076d 	.word	0x0800076d
 8000768:	08000781 	.word	0x08000781
	case LCD_PORTRAIT_1:
		orientation = LCD_PORTRAIT_1;
 800076c:	2302      	movs	r3, #2
 800076e:	603b      	str	r3, [r7, #0]
		height = LCD_WIDTH;
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8000776:	609a      	str	r2, [r3, #8]
		width = LCD_HEIGHT;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	22f0      	movs	r2, #240	; 0xf0
 800077c:	605a      	str	r2, [r3, #4]
		break;
 800077e:	e01d      	b.n	80007bc <_ZN9LcdScreen14SetOrientationEi+0x78>
	case LCD_PORTRAIT_2:
		orientation = LCD_PORTRAIT_2;
 8000780:	2303      	movs	r3, #3
 8000782:	603b      	str	r3, [r7, #0]
		height = LCD_WIDTH;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800078a:	609a      	str	r2, [r3, #8]
		width = LCD_HEIGHT;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	22f0      	movs	r2, #240	; 0xf0
 8000790:	605a      	str	r2, [r3, #4]
		break;
 8000792:	e013      	b.n	80007bc <_ZN9LcdScreen14SetOrientationEi+0x78>
	case LCD_LANDSCAPE_1:
		orientation = LCD_LANDSCAPE_1;
 8000794:	2300      	movs	r3, #0
 8000796:	603b      	str	r3, [r7, #0]
		height = LCD_HEIGHT;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	22f0      	movs	r2, #240	; 0xf0
 800079c:	609a      	str	r2, [r3, #8]
		width = LCD_WIDTH;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007a4:	605a      	str	r2, [r3, #4]
		break;
 80007a6:	e009      	b.n	80007bc <_ZN9LcdScreen14SetOrientationEi+0x78>
	case LCD_LANDSCAPE_2:
		orientation = LCD_LANDSCAPE_2;
 80007a8:	2301      	movs	r3, #1
 80007aa:	603b      	str	r3, [r7, #0]
		height = LCD_HEIGHT;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	22f0      	movs	r2, #240	; 0xf0
 80007b0:	609a      	str	r2, [r3, #8]
		width = LCD_WIDTH;
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80007b8:	605a      	str	r2, [r3, #4]
		break;
 80007ba:	bf00      	nop
	}
	// set the touch screen orientation
	touch.SetOrientation(width, height, orientation);
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	6859      	ldr	r1, [r3, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	689a      	ldr	r2, [r3, #8]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	4803      	ldr	r0, [pc, #12]	; (80007d4 <_ZN9LcdScreen14SetOrientationEi+0x90>)
 80007c8:	f000 fd0a 	bl	80011e0 <_ZN11TouchScreen14SetOrientationEiii>
}
 80007cc:	bf00      	nop
 80007ce:	3708      	adds	r7, #8
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}
 80007d4:	200000f0 	.word	0x200000f0

080007d8 <_ZN9LcdScreen9SetColorsEii>:

/*----------------------------------------------------------------------------*/
// Set Text Font and Background colors
void LcdScreen::SetColors(int font, int back) {
 80007d8:	b480      	push	{r7}
 80007da:	b085      	sub	sp, #20
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
	fontColor = font;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	68ba      	ldr	r2, [r7, #8]
 80007e8:	60da      	str	r2, [r3, #12]
	backgroundColor = back;
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	611a      	str	r2, [r3, #16]
}
 80007f0:	bf00      	nop
 80007f2:	3714      	adds	r7, #20
 80007f4:	46bd      	mov	sp, r7
 80007f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fa:	4770      	bx	lr

080007fc <_ZN9LcdScreen12SetFontColorEi>:

void LcdScreen::SetFontColor(int color) {
 80007fc:	b480      	push	{r7}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]
	fontColor = color;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	60da      	str	r2, [r3, #12]
}
 800080c:	bf00      	nop
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr

08000818 <_ZN9LcdScreen7SetFontE7LcdFont>:

int LcdScreen::GetBackColor() {
	return backgroundColor;
}

void LcdScreen::SetFont(LcdFont font) {
 8000818:	b480      	push	{r7}
 800081a:	b085      	sub	sp, #20
 800081c:	af00      	add	r7, sp, #0
 800081e:	60f8      	str	r0, [r7, #12]
 8000820:	4638      	mov	r0, r7
 8000822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	fontData = font.data;
 8000826:	68ba      	ldr	r2, [r7, #8]
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	615a      	str	r2, [r3, #20]
	fontWidth = font.width;
 800082c:	683a      	ldr	r2, [r7, #0]
 800082e:	68fb      	ldr	r3, [r7, #12]
 8000830:	619a      	str	r2, [r3, #24]
	fontHeight = font.height;
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	68fb      	ldr	r3, [r7, #12]
 8000836:	61da      	str	r2, [r3, #28]
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <_ZN9LcdScreen4InitEv>:
	LcdFont font = LcdFont(fontWidth, fontHeight, fontData);
	return font;
}

/*----------------------------------------------------------------------------*/
void LcdScreen::Init() {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af02      	add	r7, sp, #8
 800084a:	6078      	str	r0, [r7, #4]
	LCD_CMD = LCD_RESET;
 800084c:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000850:	2201      	movs	r2, #1
 8000852:	801a      	strh	r2, [r3, #0]
	HAL_Delay(120);       // wait 500ms
 8000854:	2078      	movs	r0, #120	; 0x78
 8000856:	f001 fc93 	bl	8002180 <HAL_Delay>

	SleepOff();
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f860 	bl	8000920 <_ZN9LcdScreen8SleepOffEv>
	HAL_Delay(120);
 8000860:	2078      	movs	r0, #120	; 0x78
 8000862:	f001 fc8d 	bl	8002180 <HAL_Delay>

	LCD_CMD = LCD_PIXEL_FORMAT;
 8000866:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800086a:	223a      	movs	r2, #58	; 0x3a
 800086c:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = 0x55;   // 16bits / pixel
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <_ZN9LcdScreen4InitEv+0x70>)
 8000870:	2255      	movs	r2, #85	; 0x55
 8000872:	801a      	strh	r2, [r3, #0]

	Orientation(LCD_LANDSCAPE_1);
 8000874:	2100      	movs	r1, #0
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f000 f820 	bl	80008bc <_ZN9LcdScreen11OrientationEi>
	SetFont(Font_7x10);
 800087c:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <_ZN9LcdScreen4InitEv+0x74>)
 800087e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff ffc9 	bl	8000818 <_ZN9LcdScreen7SetFontE7LcdFont>

	SetTextArea(0, 0, width, height);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	685a      	ldr	r2, [r3, #4]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	689b      	ldr	r3, [r3, #8]
 800088e:	9300      	str	r3, [sp, #0]
 8000890:	4613      	mov	r3, r2
 8000892:	2200      	movs	r2, #0
 8000894:	2100      	movs	r1, #0
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f000 f8b8 	bl	8000a0c <_ZN9LcdScreen11SetTextAreaEiiii>
	FillScreen(LCD_COLOR_BLACK);
 800089c:	2100      	movs	r1, #0
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fb00 	bl	8000ea4 <_ZN9LcdScreen10FillScreenEi>

	DisplayOn();
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f000 f849 	bl	800093c <_ZN9LcdScreen9DisplayOnEv>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	60080000 	.word	0x60080000
 80008b8:	200000cc 	.word	0x200000cc

080008bc <_ZN9LcdScreen11OrientationEi>:

/*----------------------------------------------------------------------------*/
void LcdScreen::Orientation(int orientation) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	6039      	str	r1, [r7, #0]
	uint16_t Param;

	// Set the attributes
	SetOrientation(orientation);
 80008c6:	6839      	ldr	r1, [r7, #0]
 80008c8:	6878      	ldr	r0, [r7, #4]
 80008ca:	f7ff ff3b 	bl	8000744 <_ZN9LcdScreen14SetOrientationEi>

	switch (orientation) {
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2b03      	cmp	r3, #3
 80008d2:	d81f      	bhi.n	8000914 <_ZN9LcdScreen11OrientationEi+0x58>
 80008d4:	a201      	add	r2, pc, #4	; (adr r2, 80008dc <_ZN9LcdScreen11OrientationEi+0x20>)
 80008d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008da:	bf00      	nop
 80008dc:	080008f9 	.word	0x080008f9
 80008e0:	080008ff 	.word	0x080008ff
 80008e4:	080008ed 	.word	0x080008ed
 80008e8:	080008f3 	.word	0x080008f3
	case LCD_PORTRAIT_1:
		Param = 0x88;
 80008ec:	2388      	movs	r3, #136	; 0x88
 80008ee:	81fb      	strh	r3, [r7, #14]
		break;
 80008f0:	e008      	b.n	8000904 <_ZN9LcdScreen11OrientationEi+0x48>
	case LCD_PORTRAIT_2:
		Param = 0x58;
 80008f2:	2358      	movs	r3, #88	; 0x58
 80008f4:	81fb      	strh	r3, [r7, #14]
		break;
 80008f6:	e005      	b.n	8000904 <_ZN9LcdScreen11OrientationEi+0x48>
	case LCD_LANDSCAPE_1:
		Param = 0xE8;
 80008f8:	23e8      	movs	r3, #232	; 0xe8
 80008fa:	81fb      	strh	r3, [r7, #14]
		break;
 80008fc:	e002      	b.n	8000904 <_ZN9LcdScreen11OrientationEi+0x48>
	case LCD_LANDSCAPE_2:
		Param = 0x28;
 80008fe:	2328      	movs	r3, #40	; 0x28
 8000900:	81fb      	strh	r3, [r7, #14]
		break;
 8000902:	bf00      	nop
	default:
		return;
	}

	LCD_CMD = LCD_MEMORY_ACCESS_CTRL;
 8000904:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000908:	2236      	movs	r2, #54	; 0x36
 800090a:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = Param;
 800090c:	4a03      	ldr	r2, [pc, #12]	; (800091c <_ZN9LcdScreen11OrientationEi+0x60>)
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	8013      	strh	r3, [r2, #0]
 8000912:	e000      	b.n	8000916 <_ZN9LcdScreen11OrientationEi+0x5a>
		return;
 8000914:	bf00      	nop
}
 8000916:	3710      	adds	r7, #16
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	60080000 	.word	0x60080000

08000920 <_ZN9LcdScreen8SleepOffEv>:
/*----------------------------------------------------------------------------*/
void LcdScreen::SleepOn() {
	LCD_CMD = LCD_ENTER_SLEEP_MODE;
}

void LcdScreen::SleepOff() {
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	LCD_CMD = LCD_SLEEP_OUT;
 8000928:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800092c:	2211      	movs	r2, #17
 800092e:	801a      	strh	r2, [r3, #0]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr

0800093c <_ZN9LcdScreen9DisplayOnEv>:

void LcdScreen::DisplayOn() {
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	LCD_CMD = LCD_DISP_ON;
 8000944:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000948:	2229      	movs	r2, #41	; 0x29
 800094a:	801a      	strh	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <_ZN9LcdScreen9SetCursorEii>:
	LCD_CMD = LCD_W_DISP_BRIGHTNESS;
	LCD_PARAM = (uint16_t) val & 0xFF;
}

/*----------------------------------------------------------------------------*/
void LcdScreen::SetCursor(int x, int y) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b086      	sub	sp, #24
 800095c:	af02      	add	r7, sp, #8
 800095e:	60f8      	str	r0, [r7, #12]
 8000960:	60b9      	str	r1, [r7, #8]
 8000962:	607a      	str	r2, [r7, #4]
	SetFrame(x, y, x, y);
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	9300      	str	r3, [sp, #0]
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	687a      	ldr	r2, [r7, #4]
 800096c:	68b9      	ldr	r1, [r7, #8]
 800096e:	68f8      	ldr	r0, [r7, #12]
 8000970:	f000 f804 	bl	800097c <_ZN9LcdScreen8SetFrameEiiii>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <_ZN9LcdScreen8SetFrameEiiii>:

/*----------------------------------------------------------------------------*/
void LcdScreen::SetFrame(int x1, int y1, int x2, int y2) {
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	60f8      	str	r0, [r7, #12]
 8000984:	60b9      	str	r1, [r7, #8]
 8000986:	607a      	str	r2, [r7, #4]
 8000988:	603b      	str	r3, [r7, #0]
	LCD_CMD = LCD_COLUMN_ADDR_SET;
 800098a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800098e:	222a      	movs	r2, #42	; 0x2a
 8000990:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) x1 >> 8;
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	b29b      	uxth	r3, r3
 8000996:	121a      	asrs	r2, r3, #8
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 800099a:	b292      	uxth	r2, r2
 800099c:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) x1 & 0xFF;
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	b29a      	uxth	r2, r3
 80009a2:	4b19      	ldr	r3, [pc, #100]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009a4:	b2d2      	uxtb	r2, r2
 80009a6:	b292      	uxth	r2, r2
 80009a8:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) x2 >> 8;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	121a      	asrs	r2, r3, #8
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009b2:	b292      	uxth	r2, r2
 80009b4:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) x2 & 0xFF;
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009bc:	b2d2      	uxtb	r2, r2
 80009be:	b292      	uxth	r2, r2
 80009c0:	801a      	strh	r2, [r3, #0]
	LCD_CMD = LCD_PAGE_ADDR_SET;
 80009c2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80009c6:	222b      	movs	r2, #43	; 0x2b
 80009c8:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) y1 >> 8;
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	121a      	asrs	r2, r3, #8
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009d2:	b292      	uxth	r2, r2
 80009d4:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) y1 & 0xFF;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	b29a      	uxth	r2, r3
 80009da:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009dc:	b2d2      	uxtb	r2, r2
 80009de:	b292      	uxth	r2, r2
 80009e0:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) y2 >> 8;
 80009e2:	69bb      	ldr	r3, [r7, #24]
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	121a      	asrs	r2, r3, #8
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009ea:	b292      	uxth	r2, r2
 80009ec:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) y2 & 0xFF;
 80009ee:	69bb      	ldr	r3, [r7, #24]
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <_ZN9LcdScreen8SetFrameEiiii+0x8c>)
 80009f4:	b2d2      	uxtb	r2, r2
 80009f6:	b292      	uxth	r2, r2
 80009f8:	801a      	strh	r2, [r3, #0]
}
 80009fa:	bf00      	nop
 80009fc:	3714      	adds	r7, #20
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop
 8000a08:	60080000 	.word	0x60080000

08000a0c <_ZN9LcdScreen11SetTextAreaEiiii>:

/*----------------------------------------------------------------------------*/
/*  TEXT																	  */
/*----------------------------------------------------------------------------*/
void LcdScreen::SetTextArea(int x1, int y1, int x2, int y2) {
 8000a0c:	b480      	push	{r7}
 8000a0e:	b085      	sub	sp, #20
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	60f8      	str	r0, [r7, #12]
 8000a14:	60b9      	str	r1, [r7, #8]
 8000a16:	607a      	str	r2, [r7, #4]
 8000a18:	603b      	str	r3, [r7, #0]
	txtAreaX1 = x1;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	68ba      	ldr	r2, [r7, #8]
 8000a1e:	621a      	str	r2, [r3, #32]
	txtAreaY1 = y1;
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	625a      	str	r2, [r3, #36]	; 0x24
	txtAreaX2 = x2;
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	683a      	ldr	r2, [r7, #0]
 8000a2a:	629a      	str	r2, [r3, #40]	; 0x28
	txtAreaY2 = y2;
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	69ba      	ldr	r2, [r7, #24]
 8000a30:	62da      	str	r2, [r3, #44]	; 0x2c
	txtAreaPosX = x1;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	68ba      	ldr	r2, [r7, #8]
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
	txtAreaPosY = y1;
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	687a      	ldr	r2, [r7, #4]
 8000a3c:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a3e:	bf00      	nop
 8000a40:	3714      	adds	r7, #20
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <_ZN9LcdScreen10SetTextPosEii>:

/*----------------------------------------------------------------------------*/
void LcdScreen::SetTextPos(int x, int y) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	b085      	sub	sp, #20
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	60f8      	str	r0, [r7, #12]
 8000a52:	60b9      	str	r1, [r7, #8]
 8000a54:	607a      	str	r2, [r7, #4]
	txtAreaPosX = x;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	68ba      	ldr	r2, [r7, #8]
 8000a5a:	631a      	str	r2, [r3, #48]	; 0x30
	txtAreaPosY = y;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000a62:	bf00      	nop
 8000a64:	3714      	adds	r7, #20
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
	...

08000a70 <_ZN9LcdScreen8TextPutcEc>:

/*----------------------------------------------------------------------------*/
// Draw a char in the screen at the current position with the current font
void LcdScreen::TextPutc(char c) {
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	460b      	mov	r3, r1
 8000a7a:	70fb      	strb	r3, [r7, #3]
	int i, j;
	uint16_t *pData;
	uint16_t Data;

	// Check if printable char
	c = c - 32;
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	3b20      	subs	r3, #32
 8000a80:	70fb      	strb	r3, [r7, #3]
	if ((c < 0) || (c > 94))
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	2b5e      	cmp	r3, #94	; 0x5e
 8000a86:	d86c      	bhi.n	8000b62 <_ZN9LcdScreen8TextPutcEc+0xf2>
		return;

	// Test if we are at the end of the line
	if ((txtAreaPosX + fontWidth) > txtAreaX2) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	699b      	ldr	r3, [r3, #24]
 8000a90:	441a      	add	r2, r3
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a96:	429a      	cmp	r2, r3
 8000a98:	dd0a      	ble.n	8000ab0 <_ZN9LcdScreen8TextPutcEc+0x40>
		txtAreaPosX = txtAreaX1;
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a1a      	ldr	r2, [r3, #32]
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	631a      	str	r2, [r3, #48]	; 0x30
		txtAreaPosY += fontHeight;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	69db      	ldr	r3, [r3, #28]
 8000aaa:	441a      	add	r2, r3
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
	}

	// Set the rectangle frame to draw
	SetFrame(txtAreaPosX, txtAreaPosY, txtAreaPosX + fontWidth - 1,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	1e5c      	subs	r4, r3, #1
			txtAreaPosY + fontHeight - 1);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	69db      	ldr	r3, [r3, #28]
 8000acc:	4413      	add	r3, r2
	SetFrame(txtAreaPosX, txtAreaPosY, txtAreaPosX + fontWidth - 1,
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	9300      	str	r3, [sp, #0]
 8000ad2:	4623      	mov	r3, r4
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	6878      	ldr	r0, [r7, #4]
 8000ad8:	f7ff ff50 	bl	800097c <_ZN9LcdScreen8SetFrameEiiii>

	// Draw char data
	pData = (uint16_t*) fontData + (fontHeight * c);
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	695a      	ldr	r2, [r3, #20]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	69db      	ldr	r3, [r3, #28]
 8000ae4:	78f9      	ldrb	r1, [r7, #3]
 8000ae6:	fb01 f303 	mul.w	r3, r1, r3
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	4413      	add	r3, r2
 8000aee:	60fb      	str	r3, [r7, #12]
	LCD_CMD = LCD_MEMORY_WRITE;
 8000af0:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000af4:	222c      	movs	r2, #44	; 0x2c
 8000af6:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < fontHeight; i++) {
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	69db      	ldr	r3, [r3, #28]
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	429a      	cmp	r2, r3
 8000b04:	da25      	bge.n	8000b52 <_ZN9LcdScreen8TextPutcEc+0xe2>
		Data = *pData++;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	1c9a      	adds	r2, r3, #2
 8000b0a:	60fa      	str	r2, [r7, #12]
 8000b0c:	881b      	ldrh	r3, [r3, #0]
 8000b0e:	817b      	strh	r3, [r7, #10]
		for (j = 0; j < fontWidth; j++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	699b      	ldr	r3, [r3, #24]
 8000b18:	693a      	ldr	r2, [r7, #16]
 8000b1a:	429a      	cmp	r2, r3
 8000b1c:	da15      	bge.n	8000b4a <_ZN9LcdScreen8TextPutcEc+0xda>
			if (Data & 0x8000) {
 8000b1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	da05      	bge.n	8000b32 <_ZN9LcdScreen8TextPutcEc+0xc2>
				LCD_PARAM = (uint16_t) fontColor;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	68da      	ldr	r2, [r3, #12]
 8000b2a:	4b10      	ldr	r3, [pc, #64]	; (8000b6c <_ZN9LcdScreen8TextPutcEc+0xfc>)
 8000b2c:	b292      	uxth	r2, r2
 8000b2e:	801a      	strh	r2, [r3, #0]
 8000b30:	e004      	b.n	8000b3c <_ZN9LcdScreen8TextPutcEc+0xcc>
			} else {
				LCD_PARAM = (uint16_t) backgroundColor;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	691a      	ldr	r2, [r3, #16]
 8000b36:	4b0d      	ldr	r3, [pc, #52]	; (8000b6c <_ZN9LcdScreen8TextPutcEc+0xfc>)
 8000b38:	b292      	uxth	r2, r2
 8000b3a:	801a      	strh	r2, [r3, #0]
			}
			Data <<= 1;
 8000b3c:	897b      	ldrh	r3, [r7, #10]
 8000b3e:	005b      	lsls	r3, r3, #1
 8000b40:	817b      	strh	r3, [r7, #10]
		for (j = 0; j < fontWidth; j++) {
 8000b42:	693b      	ldr	r3, [r7, #16]
 8000b44:	3301      	adds	r3, #1
 8000b46:	613b      	str	r3, [r7, #16]
 8000b48:	e7e4      	b.n	8000b14 <_ZN9LcdScreen8TextPutcEc+0xa4>
	for (i = 0; i < fontHeight; i++) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	3301      	adds	r3, #1
 8000b4e:	617b      	str	r3, [r7, #20]
 8000b50:	e7d4      	b.n	8000afc <_ZN9LcdScreen8TextPutcEc+0x8c>
		}
	}

	// Update Text Pointer
	txtAreaPosX += fontWidth;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	699b      	ldr	r3, [r3, #24]
 8000b5a:	441a      	add	r2, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b60:	e000      	b.n	8000b64 <_ZN9LcdScreen8TextPutcEc+0xf4>
		return;
 8000b62:	bf00      	nop
}
 8000b64:	371c      	adds	r7, #28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd90      	pop	{r4, r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	60080000 	.word	0x60080000

08000b70 <_ZN9LcdScreen8TextPutsEPc>:

/*----------------------------------------------------------------------------*/
void LcdScreen::TextPuts(char *str) {
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	6039      	str	r1, [r7, #0]
	while (*str) {
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d027      	beq.n	8000bd2 <_ZN9LcdScreen8TextPutsEPc+0x62>
		/* New line */
		if (*str == '\n') {
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d10e      	bne.n	8000ba8 <_ZN9LcdScreen8TextPutsEPc+0x38>
			txtAreaPosY += fontHeight;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	69db      	ldr	r3, [r3, #28]
 8000b92:	441a      	add	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	635a      	str	r2, [r3, #52]	; 0x34
			txtAreaPosX = txtAreaX1;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	6a1a      	ldr	r2, [r3, #32]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
			str++;
 8000ba0:	683b      	ldr	r3, [r7, #0]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	603b      	str	r3, [r7, #0]
 8000ba6:	e7e8      	b.n	8000b7a <_ZN9LcdScreen8TextPutsEPc+0xa>
		} else if (*str == '\r') {
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b0d      	cmp	r3, #13
 8000bae:	d107      	bne.n	8000bc0 <_ZN9LcdScreen8TextPutsEPc+0x50>
			txtAreaPosX = txtAreaX1;
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	6a1a      	ldr	r2, [r3, #32]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	631a      	str	r2, [r3, #48]	; 0x30
			str++;
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	603b      	str	r3, [r7, #0]
 8000bbe:	e7dc      	b.n	8000b7a <_ZN9LcdScreen8TextPutsEPc+0xa>
		} else {
			TextPutc(*str++);
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	603a      	str	r2, [r7, #0]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	4619      	mov	r1, r3
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff ff50 	bl	8000a70 <_ZN9LcdScreen8TextPutcEc>
	while (*str) {
 8000bd0:	e7d3      	b.n	8000b7a <_ZN9LcdScreen8TextPutsEPc+0xa>
		}
	}
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <_ZN9LcdScreen10TextPutsAtEiiPc>:

/*----------------------------------------------------------------------------*/
void LcdScreen::TextPutsAt(int x, int y, char *str) {
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b084      	sub	sp, #16
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	60f8      	str	r0, [r7, #12]
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	603b      	str	r3, [r7, #0]
	SetTextPos(x, y);
 8000be8:	687a      	ldr	r2, [r7, #4]
 8000bea:	68b9      	ldr	r1, [r7, #8]
 8000bec:	68f8      	ldr	r0, [r7, #12]
 8000bee:	f7ff ff2c 	bl	8000a4a <_ZN9LcdScreen10SetTextPosEii>
	TextPuts(str);
 8000bf2:	6839      	ldr	r1, [r7, #0]
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f7ff ffbb 	bl	8000b70 <_ZN9LcdScreen8TextPutsEPc>
}
 8000bfa:	bf00      	nop
 8000bfc:	3710      	adds	r7, #16
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}

08000c02 <_ZN9LcdScreen13GetStringSizeEPcPiS1_>:

/*----------------------------------------------------------------------------*/
void LcdScreen::GetStringSize(char *str, int *width, int *height) {
 8000c02:	b590      	push	{r4, r7, lr}
 8000c04:	b085      	sub	sp, #20
 8000c06:	af00      	add	r7, sp, #0
 8000c08:	60f8      	str	r0, [r7, #12]
 8000c0a:	60b9      	str	r1, [r7, #8]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	603b      	str	r3, [r7, #0]
	*height = fontHeight;
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	69da      	ldr	r2, [r3, #28]
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	601a      	str	r2, [r3, #0]
	*width = fontWidth * strlen(str);
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	699b      	ldr	r3, [r3, #24]
 8000c1c:	461c      	mov	r4, r3
 8000c1e:	68b8      	ldr	r0, [r7, #8]
 8000c20:	f7ff fad6 	bl	80001d0 <strlen>
 8000c24:	4603      	mov	r3, r0
 8000c26:	fb03 f304 	mul.w	r3, r3, r4
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	601a      	str	r2, [r3, #0]
}
 8000c30:	bf00      	nop
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd90      	pop	{r4, r7, pc}

08000c38 <_ZN9LcdScreen9DrawPixelEiii>:
}

/*----------------------------------------------------------------------------*/
/*  DRAW																	  */
/*----------------------------------------------------------------------------*/
void LcdScreen::DrawPixel(int x, int y, int color) {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	60f8      	str	r0, [r7, #12]
 8000c40:	60b9      	str	r1, [r7, #8]
 8000c42:	607a      	str	r2, [r7, #4]
 8000c44:	603b      	str	r3, [r7, #0]
	SetCursor(x, y);
 8000c46:	687a      	ldr	r2, [r7, #4]
 8000c48:	68b9      	ldr	r1, [r7, #8]
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff fe84 	bl	8000958 <_ZN9LcdScreen9SetCursorEii>
	LCD_CMD = LCD_MEMORY_WRITE;
 8000c50:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000c54:	222c      	movs	r2, #44	; 0x2c
 8000c56:	801a      	strh	r2, [r3, #0]
	LCD_PARAM = (uint16_t) color;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <_ZN9LcdScreen9DrawPixelEiii+0x30>)
 8000c5a:	683a      	ldr	r2, [r7, #0]
 8000c5c:	b292      	uxth	r2, r2
 8000c5e:	801a      	strh	r2, [r3, #0]
}
 8000c60:	bf00      	nop
 8000c62:	3710      	adds	r7, #16
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	60080000 	.word	0x60080000

08000c6c <_ZN9LcdScreen8DrawLineEiiiii>:

/*----------------------------------------------------------------------------*/
void LcdScreen::DrawLine(int x1, int y1, int x2, int y2, int color) {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b08a      	sub	sp, #40	; 0x28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
	int dx, dy;
	int stepx, stepy;
	int fraction;

	dy = (y2 - y1);
 8000c7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	1ad3      	subs	r3, r2, r3
 8000c80:	623b      	str	r3, [r7, #32]
	dx = (x2 - x1);
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	1ad3      	subs	r3, r2, r3
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24

	if (dy < 0) {
 8000c8a:	6a3b      	ldr	r3, [r7, #32]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	da06      	bge.n	8000c9e <_ZN9LcdScreen8DrawLineEiiiii+0x32>
		dy = -dy;
 8000c90:	6a3b      	ldr	r3, [r7, #32]
 8000c92:	425b      	negs	r3, r3
 8000c94:	623b      	str	r3, [r7, #32]
		stepy = -1;
 8000c96:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9a:	61bb      	str	r3, [r7, #24]
 8000c9c:	e001      	b.n	8000ca2 <_ZN9LcdScreen8DrawLineEiiiii+0x36>
	} else {
		stepy = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	61bb      	str	r3, [r7, #24]
	}

	if (dx < 0) {
 8000ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	da06      	bge.n	8000cb6 <_ZN9LcdScreen8DrawLineEiiiii+0x4a>
		dx = -dx;
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	425b      	negs	r3, r3
 8000cac:	627b      	str	r3, [r7, #36]	; 0x24
		stepx = -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295
 8000cb2:	61fb      	str	r3, [r7, #28]
 8000cb4:	e001      	b.n	8000cba <_ZN9LcdScreen8DrawLineEiiiii+0x4e>
	} else {
		stepx = 1;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	61fb      	str	r3, [r7, #28]
	}

	dx <<= 0x01;
 8000cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cbc:	005b      	lsls	r3, r3, #1
 8000cbe:	627b      	str	r3, [r7, #36]	; 0x24
	dy <<= 0x01;
 8000cc0:	6a3b      	ldr	r3, [r7, #32]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	623b      	str	r3, [r7, #32]

	DrawPixel(x1, y1, color);
 8000cc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cc8:	687a      	ldr	r2, [r7, #4]
 8000cca:	68b9      	ldr	r1, [r7, #8]
 8000ccc:	68f8      	ldr	r0, [r7, #12]
 8000cce:	f7ff ffb3 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>

	if (dx > dy) {
 8000cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	dd22      	ble.n	8000d20 <_ZN9LcdScreen8DrawLineEiiiii+0xb4>
		fraction = (dy - (dx >> 1));
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	105b      	asrs	r3, r3, #1
 8000cde:	6a3a      	ldr	r2, [r7, #32]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	617b      	str	r3, [r7, #20]
		while (x1 != x2) {
 8000ce4:	68ba      	ldr	r2, [r7, #8]
 8000ce6:	683b      	ldr	r3, [r7, #0]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	d03c      	beq.n	8000d66 <_ZN9LcdScreen8DrawLineEiiiii+0xfa>
			if (fraction >= 0) {
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	db07      	blt.n	8000d02 <_ZN9LcdScreen8DrawLineEiiiii+0x96>
				y1 += stepy;
 8000cf2:	687a      	ldr	r2, [r7, #4]
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	607b      	str	r3, [r7, #4]
				fraction -= dx;
 8000cfa:	697a      	ldr	r2, [r7, #20]
 8000cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	617b      	str	r3, [r7, #20]
			}
			x1 += stepx;
 8000d02:	68ba      	ldr	r2, [r7, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	4413      	add	r3, r2
 8000d08:	60bb      	str	r3, [r7, #8]
			fraction += dy;
 8000d0a:	697a      	ldr	r2, [r7, #20]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
 8000d0e:	4413      	add	r3, r2
 8000d10:	617b      	str	r3, [r7, #20]

			DrawPixel(x1, y1, color);
 8000d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d14:	687a      	ldr	r2, [r7, #4]
 8000d16:	68b9      	ldr	r1, [r7, #8]
 8000d18:	68f8      	ldr	r0, [r7, #12]
 8000d1a:	f7ff ff8d 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
		while (x1 != x2) {
 8000d1e:	e7e1      	b.n	8000ce4 <_ZN9LcdScreen8DrawLineEiiiii+0x78>
		}
	} else {
		fraction = (dx - (dy >> 1));
 8000d20:	6a3b      	ldr	r3, [r7, #32]
 8000d22:	105b      	asrs	r3, r3, #1
 8000d24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]

		while (y1 != y2) {
 8000d2a:	687a      	ldr	r2, [r7, #4]
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	d019      	beq.n	8000d66 <_ZN9LcdScreen8DrawLineEiiiii+0xfa>
			if (fraction >= 0) {
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	db07      	blt.n	8000d48 <_ZN9LcdScreen8DrawLineEiiiii+0xdc>
				x1 += stepx;
 8000d38:	68ba      	ldr	r2, [r7, #8]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
				fraction -= dy;
 8000d40:	697a      	ldr	r2, [r7, #20]
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	617b      	str	r3, [r7, #20]
			}
			y1 += stepy;
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	607b      	str	r3, [r7, #4]
			fraction += dx;
 8000d50:	697a      	ldr	r2, [r7, #20]
 8000d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d54:	4413      	add	r3, r2
 8000d56:	617b      	str	r3, [r7, #20]
			DrawPixel(x1, y1, color);
 8000d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	68b9      	ldr	r1, [r7, #8]
 8000d5e:	68f8      	ldr	r0, [r7, #12]
 8000d60:	f7ff ff6a 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
		while (y1 != y2) {
 8000d64:	e7e1      	b.n	8000d2a <_ZN9LcdScreen8DrawLineEiiiii+0xbe>
		}
	}
}
 8000d66:	bf00      	nop
 8000d68:	3728      	adds	r7, #40	; 0x28
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
	...

08000d70 <_ZN9LcdScreen9DrawHLineEiiii>:

/*----------------------------------------------------------------------------*/
void LcdScreen::DrawHLine(int x1, int x2, int y, int color) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b088      	sub	sp, #32
 8000d74:	af02      	add	r7, sp, #8
 8000d76:	60f8      	str	r0, [r7, #12]
 8000d78:	60b9      	str	r1, [r7, #8]
 8000d7a:	607a      	str	r2, [r7, #4]
 8000d7c:	603b      	str	r3, [r7, #0]
	if (x2 < x1)
 8000d7e:	687a      	ldr	r2, [r7, #4]
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	429a      	cmp	r2, r3
 8000d84:	da05      	bge.n	8000d92 <_ZN9LcdScreen9DrawHLineEiiii+0x22>
		SWAP(x1, x2);
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	617b      	str	r3, [r7, #20]
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	607b      	str	r3, [r7, #4]
	SetFrame(x1, y, x2, y);
 8000d92:	68b9      	ldr	r1, [r7, #8]
 8000d94:	687a      	ldr	r2, [r7, #4]
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	4613      	mov	r3, r2
 8000d9c:	683a      	ldr	r2, [r7, #0]
 8000d9e:	68f8      	ldr	r0, [r7, #12]
 8000da0:	f7ff fdec 	bl	800097c <_ZN9LcdScreen8SetFrameEiiii>
	LCD_CMD = LCD_MEMORY_WRITE;
 8000da4:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000da8:	222c      	movs	r2, #44	; 0x2c
 8000daa:	801a      	strh	r2, [r3, #0]
	while (x2-- >= x1) {
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	1e5a      	subs	r2, r3, #1
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	bfac      	ite	ge
 8000db8:	2301      	movge	r3, #1
 8000dba:	2300      	movlt	r3, #0
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d004      	beq.n	8000dcc <_ZN9LcdScreen9DrawHLineEiiii+0x5c>
		LCD_PARAM = (uint16_t) color;
 8000dc2:	4b04      	ldr	r3, [pc, #16]	; (8000dd4 <_ZN9LcdScreen9DrawHLineEiiii+0x64>)
 8000dc4:	6a3a      	ldr	r2, [r7, #32]
 8000dc6:	b292      	uxth	r2, r2
 8000dc8:	801a      	strh	r2, [r3, #0]
	while (x2-- >= x1) {
 8000dca:	e7ef      	b.n	8000dac <_ZN9LcdScreen9DrawHLineEiiii+0x3c>
	}

}
 8000dcc:	bf00      	nop
 8000dce:	3718      	adds	r7, #24
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	60080000 	.word	0x60080000

08000dd8 <_ZN9LcdScreen9DrawVLineEiiii>:

/*----------------------------------------------------------------------------*/
void LcdScreen::DrawVLine(int x, int y1, int y2, int color) {
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b088      	sub	sp, #32
 8000ddc:	af02      	add	r7, sp, #8
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
 8000de4:	603b      	str	r3, [r7, #0]
	if (y2 < y1)
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	429a      	cmp	r2, r3
 8000dec:	da05      	bge.n	8000dfa <_ZN9LcdScreen9DrawVLineEiiii+0x22>
		SWAP(y1, y2);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	617b      	str	r3, [r7, #20]
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	607b      	str	r3, [r7, #4]
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	603b      	str	r3, [r7, #0]
	SetFrame(x, y1, x, y2);
 8000dfa:	687a      	ldr	r2, [r7, #4]
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	9300      	str	r3, [sp, #0]
 8000e00:	68bb      	ldr	r3, [r7, #8]
 8000e02:	68b9      	ldr	r1, [r7, #8]
 8000e04:	68f8      	ldr	r0, [r7, #12]
 8000e06:	f7ff fdb9 	bl	800097c <_ZN9LcdScreen8SetFrameEiiii>
	LCD_CMD = LCD_MEMORY_WRITE;
 8000e0a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e0e:	222c      	movs	r2, #44	; 0x2c
 8000e10:	801a      	strh	r2, [r3, #0]
	while (y2-- >= y1) {
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	1e5a      	subs	r2, r3, #1
 8000e16:	603a      	str	r2, [r7, #0]
 8000e18:	687a      	ldr	r2, [r7, #4]
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	bfac      	ite	ge
 8000e1e:	2301      	movge	r3, #1
 8000e20:	2300      	movlt	r3, #0
 8000e22:	b2db      	uxtb	r3, r3
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d004      	beq.n	8000e32 <_ZN9LcdScreen9DrawVLineEiiii+0x5a>
		LCD_PARAM = (uint16_t) color;
 8000e28:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <_ZN9LcdScreen9DrawVLineEiiii+0x64>)
 8000e2a:	6a3a      	ldr	r2, [r7, #32]
 8000e2c:	b292      	uxth	r2, r2
 8000e2e:	801a      	strh	r2, [r3, #0]
	while (y2-- >= y1) {
 8000e30:	e7ef      	b.n	8000e12 <_ZN9LcdScreen9DrawVLineEiiii+0x3a>
	}

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	60080000 	.word	0x60080000

08000e40 <_ZN9LcdScreen8FillRectEiiiii>:
	DrawVLine(x1, y1, y2, color);
	DrawVLine(x2, y1, y2, color);
}

/*----------------------------------------------------------------------------*/
void LcdScreen::FillRect(int x1, int y1, int x2, int y2, int color) {
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b088      	sub	sp, #32
 8000e44:	af02      	add	r7, sp, #8
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
 8000e4c:	603b      	str	r3, [r7, #0]
	uint32_t size;
	SetFrame(x1, y1, x2, y2);
 8000e4e:	6a3b      	ldr	r3, [r7, #32]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	68f8      	ldr	r0, [r7, #12]
 8000e5a:	f7ff fd8f 	bl	800097c <_ZN9LcdScreen8SetFrameEiiii>
	size = (x2 - x1) * (y2 - y1);
 8000e5e:	683a      	ldr	r2, [r7, #0]
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	6a39      	ldr	r1, [r7, #32]
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	fb02 f303 	mul.w	r3, r2, r3
 8000e6e:	617b      	str	r3, [r7, #20]
	LCD_CMD = LCD_MEMORY_WRITE;
 8000e70:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8000e74:	222c      	movs	r2, #44	; 0x2c
 8000e76:	801a      	strh	r2, [r3, #0]
	while (size--) {
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	617a      	str	r2, [r7, #20]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf14      	ite	ne
 8000e82:	2301      	movne	r3, #1
 8000e84:	2300      	moveq	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d004      	beq.n	8000e96 <_ZN9LcdScreen8FillRectEiiiii+0x56>
		LCD_PARAM = (uint16_t) color;
 8000e8c:	4b04      	ldr	r3, [pc, #16]	; (8000ea0 <_ZN9LcdScreen8FillRectEiiiii+0x60>)
 8000e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e90:	b292      	uxth	r2, r2
 8000e92:	801a      	strh	r2, [r3, #0]
	while (size--) {
 8000e94:	e7f0      	b.n	8000e78 <_ZN9LcdScreen8FillRectEiiiii+0x38>
	}
}
 8000e96:	bf00      	nop
 8000e98:	3718      	adds	r7, #24
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	60080000 	.word	0x60080000

08000ea4 <_ZN9LcdScreen10FillScreenEi>:

/*----------------------------------------------------------------------------*/
void LcdScreen::FillScreen(int color) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af02      	add	r7, sp, #8
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
	FillRect(0, 0, width - 1, height - 1, color);
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	1e59      	subs	r1, r3, #1
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	683a      	ldr	r2, [r7, #0]
 8000ebc:	9201      	str	r2, [sp, #4]
 8000ebe:	9300      	str	r3, [sp, #0]
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffba 	bl	8000e40 <_ZN9LcdScreen8FillRectEiiiii>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <_ZN9LcdScreen6CircleEiiibi>:

/*----------------------------------------------------------------------------*/
void LcdScreen::Circle(int xc, int yc, int radius, bool fill, int color) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b088      	sub	sp, #32
 8000ed8:	af02      	add	r7, sp, #8
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
	int a = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]
	int p = 0x0000;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]

	p = (1 - radius);
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	f1c3 0301 	rsb	r3, r3, #1
 8000ef0:	613b      	str	r3, [r7, #16]

	do {
		if (fill) {
 8000ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d040      	beq.n	8000f7c <_ZN9LcdScreen6CircleEiiibi+0xa8>
			DrawHLine((xc - a), (xc + a), (yc + radius), color);
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	1ad1      	subs	r1, r2, r3
 8000f00:	68ba      	ldr	r2, [r7, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	18d0      	adds	r0, r2, r3
 8000f06:	687a      	ldr	r2, [r7, #4]
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	441a      	add	r2, r3
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	4613      	mov	r3, r2
 8000f12:	4602      	mov	r2, r0
 8000f14:	68f8      	ldr	r0, [r7, #12]
 8000f16:	f7ff ff2b 	bl	8000d70 <_ZN9LcdScreen9DrawHLineEiiii>
			DrawHLine((xc - a), (xc + a), (yc - radius), color);
 8000f1a:	68ba      	ldr	r2, [r7, #8]
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	1ad1      	subs	r1, r2, r3
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	18d0      	adds	r0, r2, r3
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	1ad2      	subs	r2, r2, r3
 8000f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	4613      	mov	r3, r2
 8000f32:	4602      	mov	r2, r0
 8000f34:	68f8      	ldr	r0, [r7, #12]
 8000f36:	f7ff ff1b 	bl	8000d70 <_ZN9LcdScreen9DrawHLineEiiii>
			DrawHLine((xc - radius), (xc + radius), (yc + a), color);
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	1ad1      	subs	r1, r2, r3
 8000f40:	68ba      	ldr	r2, [r7, #8]
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	18d0      	adds	r0, r2, r3
 8000f46:	687a      	ldr	r2, [r7, #4]
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	441a      	add	r2, r3
 8000f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4613      	mov	r3, r2
 8000f52:	4602      	mov	r2, r0
 8000f54:	68f8      	ldr	r0, [r7, #12]
 8000f56:	f7ff ff0b 	bl	8000d70 <_ZN9LcdScreen9DrawHLineEiiii>
			DrawHLine((xc - radius), (xc + radius), (yc - a), color);
 8000f5a:	68ba      	ldr	r2, [r7, #8]
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	1ad1      	subs	r1, r2, r3
 8000f60:	68ba      	ldr	r2, [r7, #8]
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	18d0      	adds	r0, r2, r3
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	697b      	ldr	r3, [r7, #20]
 8000f6a:	1ad2      	subs	r2, r2, r3
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	9300      	str	r3, [sp, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	4602      	mov	r2, r0
 8000f74:	68f8      	ldr	r0, [r7, #12]
 8000f76:	f7ff fefb 	bl	8000d70 <_ZN9LcdScreen9DrawHLineEiiii>
 8000f7a:	e04f      	b.n	800101c <_ZN9LcdScreen6CircleEiiibi+0x148>
		} else {
			DrawPixel((xc + a), (yc + radius), color);
 8000f7c:	68ba      	ldr	r2, [r7, #8]
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	18d1      	adds	r1, r2, r3
 8000f82:	687a      	ldr	r2, [r7, #4]
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	441a      	add	r2, r3
 8000f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f8a:	68f8      	ldr	r0, [r7, #12]
 8000f8c:	f7ff fe54 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc + radius), (yc + a), color);
 8000f90:	68ba      	ldr	r2, [r7, #8]
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	18d1      	adds	r1, r2, r3
 8000f96:	687a      	ldr	r2, [r7, #4]
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	441a      	add	r2, r3
 8000f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff fe4a 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc - a), (yc + radius), color);
 8000fa4:	68ba      	ldr	r2, [r7, #8]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	1ad1      	subs	r1, r2, r3
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	441a      	add	r2, r3
 8000fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb2:	68f8      	ldr	r0, [r7, #12]
 8000fb4:	f7ff fe40 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc - radius), (yc + a), color);
 8000fb8:	68ba      	ldr	r2, [r7, #8]
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	1ad1      	subs	r1, r2, r3
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	697b      	ldr	r3, [r7, #20]
 8000fc2:	441a      	add	r2, r3
 8000fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fc6:	68f8      	ldr	r0, [r7, #12]
 8000fc8:	f7ff fe36 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc + radius), (yc - a), color);
 8000fcc:	68ba      	ldr	r2, [r7, #8]
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	18d1      	adds	r1, r2, r3
 8000fd2:	687a      	ldr	r2, [r7, #4]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	1ad2      	subs	r2, r2, r3
 8000fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fda:	68f8      	ldr	r0, [r7, #12]
 8000fdc:	f7ff fe2c 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc + a), (yc - radius), color);
 8000fe0:	68ba      	ldr	r2, [r7, #8]
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	18d1      	adds	r1, r2, r3
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	1ad2      	subs	r2, r2, r3
 8000fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fee:	68f8      	ldr	r0, [r7, #12]
 8000ff0:	f7ff fe22 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc - a), (yc - radius), color);
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	1ad1      	subs	r1, r2, r3
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	1ad2      	subs	r2, r2, r3
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff fe18 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
			DrawPixel((xc - radius), (yc - a), color);
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	1ad1      	subs	r1, r2, r3
 800100e:	687a      	ldr	r2, [r7, #4]
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	1ad2      	subs	r2, r2, r3
 8001014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	f7ff fe0e 	bl	8000c38 <_ZN9LcdScreen9DrawPixelEiii>
		}

		if (p < 0) {
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	2b00      	cmp	r3, #0
 8001020:	da08      	bge.n	8001034 <_ZN9LcdScreen6CircleEiiibi+0x160>
			p += (0x03 + (0x02 * a++));
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	617a      	str	r2, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	3303      	adds	r3, #3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4413      	add	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
 8001032:	e00b      	b.n	800104c <_ZN9LcdScreen6CircleEiiibi+0x178>
		} else {
			p += (0x05 + (0x02 * ((a++) - (radius--))));
 8001034:	697a      	ldr	r2, [r7, #20]
 8001036:	1c53      	adds	r3, r2, #1
 8001038:	617b      	str	r3, [r7, #20]
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	1e59      	subs	r1, r3, #1
 800103e:	6039      	str	r1, [r7, #0]
 8001040:	1ad3      	subs	r3, r2, r3
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	3305      	adds	r3, #5
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4413      	add	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
		}
	} while (a <= radius);
 800104c:	697a      	ldr	r2, [r7, #20]
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	429a      	cmp	r2, r3
 8001052:	dc00      	bgt.n	8001056 <_ZN9LcdScreen6CircleEiiibi+0x182>
	do {
 8001054:	e74d      	b.n	8000ef2 <_ZN9LcdScreen6CircleEiiibi+0x1e>
}
 8001056:	bf00      	nop
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <_Z41__static_initialization_and_destruction_0ii>:
 8001060:	b580      	push	{r7, lr}
 8001062:	b082      	sub	sp, #8
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d108      	bne.n	8001082 <_Z41__static_initialization_and_destruction_0ii+0x22>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001076:	4293      	cmp	r3, r2
 8001078:	d103      	bne.n	8001082 <_Z41__static_initialization_and_destruction_0ii+0x22>
LcdScreen lcd = LcdScreen();
 800107a:	2100      	movs	r1, #0
 800107c:	4803      	ldr	r0, [pc, #12]	; (800108c <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800107e:	f7ff fb3f 	bl	8000700 <_ZN9LcdScreenC1Ei>
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	20000094 	.word	0x20000094

08001090 <_GLOBAL__sub_I_lcd>:
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
 8001094:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001098:	2001      	movs	r0, #1
 800109a:	f7ff ffe1 	bl	8001060 <_Z41__static_initialization_and_destruction_0ii>
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN7LcdFontC1EiiPKt>:
0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x01C0,0x0000, // Ascii = [|]
0x3FC0,0x03E0,0x01E0,0x01E0,0x01E0,0x01E0,0x01C0,0x03C0,0x03C0,0x01C0,0x01E0,0x00FE,0x00FE,0x01E0,0x01C0,0x03C0,0x03C0,0x01C0,0x01E0,0x01E0,0x01E0,0x01E0,0x03E0,0x3FC0,0x3F00,0x0000, // Ascii = [}]
0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x3F07,0x7FC7,0x73E7,0xF1FF,0xF07E,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000,0x0000, // Ascii = [~]
};

LcdFont::LcdFont(int w, int h, const uint16_t *d) {
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	width = w;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	601a      	str	r2, [r3, #0]
	height = h;
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	687a      	ldr	r2, [r7, #4]
 80010b8:	605a      	str	r2, [r3, #4]
	data = d;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	683a      	ldr	r2, [r7, #0]
 80010be:	609a      	str	r2, [r3, #8]
}
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4618      	mov	r0, r3
 80010c4:	3714      	adds	r7, #20
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
	...

080010d0 <_Z41__static_initialization_and_destruction_0ii>:

LcdFont Font_7x10  = LcdFont(7, 10, Data7x10);
LcdFont Font_11x18 = LcdFont(11, 18, Data11x18);
LcdFont Font_16x26 = LcdFont(16, 26, Data16x26);
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d116      	bne.n	800110e <_Z41__static_initialization_and_destruction_0ii+0x3e>
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d111      	bne.n	800110e <_Z41__static_initialization_and_destruction_0ii+0x3e>
LcdFont Font_7x10  = LcdFont(7, 10, Data7x10);
 80010ea:	4b0b      	ldr	r3, [pc, #44]	; (8001118 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 80010ec:	220a      	movs	r2, #10
 80010ee:	2107      	movs	r1, #7
 80010f0:	480a      	ldr	r0, [pc, #40]	; (800111c <_Z41__static_initialization_and_destruction_0ii+0x4c>)
 80010f2:	f7ff ffd5 	bl	80010a0 <_ZN7LcdFontC1EiiPKt>
LcdFont Font_11x18 = LcdFont(11, 18, Data11x18);
 80010f6:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <_Z41__static_initialization_and_destruction_0ii+0x50>)
 80010f8:	2212      	movs	r2, #18
 80010fa:	210b      	movs	r1, #11
 80010fc:	4809      	ldr	r0, [pc, #36]	; (8001124 <_Z41__static_initialization_and_destruction_0ii+0x54>)
 80010fe:	f7ff ffcf 	bl	80010a0 <_ZN7LcdFontC1EiiPKt>
LcdFont Font_16x26 = LcdFont(16, 26, Data16x26);
 8001102:	4b09      	ldr	r3, [pc, #36]	; (8001128 <_Z41__static_initialization_and_destruction_0ii+0x58>)
 8001104:	221a      	movs	r2, #26
 8001106:	2110      	movs	r1, #16
 8001108:	4808      	ldr	r0, [pc, #32]	; (800112c <_Z41__static_initialization_and_destruction_0ii+0x5c>)
 800110a:	f7ff ffc9 	bl	80010a0 <_ZN7LcdFontC1EiiPKt>
 800110e:	bf00      	nop
 8001110:	3708      	adds	r7, #8
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	08007868 	.word	0x08007868
 800111c:	200000cc 	.word	0x200000cc
 8001120:	08007fd4 	.word	0x08007fd4
 8001124:	200000d8 	.word	0x200000d8
 8001128:	08008d30 	.word	0x08008d30
 800112c:	200000e4 	.word	0x200000e4

08001130 <_GLOBAL__sub_I__ZN7LcdFontC2EiiPKt>:
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
 8001134:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001138:	2001      	movs	r0, #1
 800113a:	f7ff ffc9 	bl	80010d0 <_Z41__static_initialization_and_destruction_0ii>
 800113e:	bd80      	pop	{r7, pc}

08001140 <_Z17TouchPenInterruptv>:

TouchScreen touch = TouchScreen();

/* Function ------------------------------------------------------------------*/

int TouchPenInterrupt(void) {
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(PEN_INT_GPIO_Port, PEN_INT_Pin) == GPIO_PIN_RESET);
 8001144:	2120      	movs	r1, #32
 8001146:	4805      	ldr	r0, [pc, #20]	; (800115c <_Z17TouchPenInterruptv+0x1c>)
 8001148:	f001 fab8 	bl	80026bc <HAL_GPIO_ReadPin>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	bf0c      	ite	eq
 8001152:	2301      	moveq	r3, #1
 8001154:	2300      	movne	r3, #0
 8001156:	b2db      	uxtb	r3, r3
}
 8001158:	4618      	mov	r0, r3
 800115a:	bd80      	pop	{r7, pc}
 800115c:	40020800 	.word	0x40020800

08001160 <_ZN11TouchScreenC1Ev>:

/* Methods ------------------------------------------------------------------*/

/*---------------------------------------------------------------------------*/
// Constructor
TouchScreen::TouchScreen() {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	//orientation = LCD_LANDSCAPE_1;
	//width = XPT2046_HOR_RES;
	//height = XPT2046_VER_RES;
}
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4618      	mov	r0, r3
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
	...

08001178 <_ZN11TouchScreen5ResetEv>:

/*---------------------------------------------------------------------------*/
void TouchScreen::Reset() {
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af02      	add	r7, sp, #8
 800117e:	6078      	str	r0, [r7, #4]
	uint8_t Cmd;
	uint8_t Data;

	// Reset
	Cmd = 0x80;
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi2, &Cmd, &Data, 1, 1000);
 8001184:	f107 020e 	add.w	r2, r7, #14
 8001188:	f107 010f 	add.w	r1, r7, #15
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	9300      	str	r3, [sp, #0]
 8001192:	2301      	movs	r3, #1
 8001194:	4811      	ldr	r0, [pc, #68]	; (80011dc <_ZN11TouchScreen5ResetEv+0x64>)
 8001196:	f002 f988 	bl	80034aa <HAL_SPI_TransmitReceive>
	Cmd = 0x00;
 800119a:	2300      	movs	r3, #0
 800119c:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi2, &Cmd, &Data, 1, 1000);
 800119e:	f107 020e 	add.w	r2, r7, #14
 80011a2:	f107 010f 	add.w	r1, r7, #15
 80011a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011aa:	9300      	str	r3, [sp, #0]
 80011ac:	2301      	movs	r3, #1
 80011ae:	480b      	ldr	r0, [pc, #44]	; (80011dc <_ZN11TouchScreen5ResetEv+0x64>)
 80011b0:	f002 f97b 	bl	80034aa <HAL_SPI_TransmitReceive>
	Cmd = 0x00;
 80011b4:	2300      	movs	r3, #0
 80011b6:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_TransmitReceive(&hspi2, &Cmd, &Data, 1, 1000);
 80011b8:	f107 020e 	add.w	r2, r7, #14
 80011bc:	f107 010f 	add.w	r1, r7, #15
 80011c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011c4:	9300      	str	r3, [sp, #0]
 80011c6:	2301      	movs	r3, #1
 80011c8:	4804      	ldr	r0, [pc, #16]	; (80011dc <_ZN11TouchScreen5ResetEv+0x64>)
 80011ca:	f002 f96e 	bl	80034aa <HAL_SPI_TransmitReceive>
	HAL_Delay(5);
 80011ce:	2005      	movs	r0, #5
 80011d0:	f000 ffd6 	bl	8002180 <HAL_Delay>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	20004a2c 	.word	0x20004a2c

080011e0 <_ZN11TouchScreen14SetOrientationEiii>:


/*---------------------------------------------------------------------------*/
void TouchScreen::SetOrientation(int w, int h, int o) {
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
 80011ec:	603b      	str	r3, [r7, #0]

	orientation = o;
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	601a      	str	r2, [r3, #0]
	width = w;
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	605a      	str	r2, [r3, #4]
	height = h;
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	687a      	ldr	r2, [r7, #4]
 80011fe:	609a      	str	r2, [r3, #8]
}
 8001200:	bf00      	nop
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <_ZN11TouchScreen3GetEh>:


/*---------------------------------------------------------------------------*/
int TouchScreen::Get(uint8_t address) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b086      	sub	sp, #24
 8001210:	af02      	add	r7, sp, #8
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
	int val;
	uint8_t Cmd = 0x00;
 8001218:	2300      	movs	r3, #0
 800121a:	72fb      	strb	r3, [r7, #11]
	uint8_t Data;

	// Reset
	HAL_SPI_TransmitReceive(&hspi2, &address, &Data, 1, 1000);
 800121c:	f107 020a 	add.w	r2, r7, #10
 8001220:	1cf9      	adds	r1, r7, #3
 8001222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	2301      	movs	r3, #1
 800122a:	4814      	ldr	r0, [pc, #80]	; (800127c <_ZN11TouchScreen3GetEh+0x70>)
 800122c:	f002 f93d 	bl	80034aa <HAL_SPI_TransmitReceive>
	HAL_SPI_TransmitReceive(&hspi2, &Cmd, &Data, 1, 1000);
 8001230:	f107 020a 	add.w	r2, r7, #10
 8001234:	f107 010b 	add.w	r1, r7, #11
 8001238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2301      	movs	r3, #1
 8001240:	480e      	ldr	r0, [pc, #56]	; (800127c <_ZN11TouchScreen3GetEh+0x70>)
 8001242:	f002 f932 	bl	80034aa <HAL_SPI_TransmitReceive>
	val = (uint16_t) Data << 8;
 8001246:	7abb      	ldrb	r3, [r7, #10]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	60fb      	str	r3, [r7, #12]
	HAL_SPI_TransmitReceive(&hspi2, &Cmd, &Data, 1, 1000);
 800124c:	f107 020a 	add.w	r2, r7, #10
 8001250:	f107 010b 	add.w	r1, r7, #11
 8001254:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	2301      	movs	r3, #1
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <_ZN11TouchScreen3GetEh+0x70>)
 800125e:	f002 f924 	bl	80034aa <HAL_SPI_TransmitReceive>
	val |= Data;
 8001262:	7abb      	ldrb	r3, [r7, #10]
 8001264:	461a      	mov	r2, r3
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]
	val >>= 3;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	10db      	asrs	r3, r3, #3
 8001270:	60fb      	str	r3, [r7, #12]
	return val;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20004a2c 	.word	0x20004a2c

08001280 <_ZN11TouchScreen5GetXYEPiS0_b>:

/*---------------------------------------------------------------------------*/
void TouchScreen::GetXY(int *x, int *y, bool norm) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	60f8      	str	r0, [r7, #12]
 8001288:	60b9      	str	r1, [r7, #8]
 800128a:	607a      	str	r2, [r7, #4]
 800128c:	70fb      	strb	r3, [r7, #3]

	*x = Get(XPT2046_READ_X);
 800128e:	21d0      	movs	r1, #208	; 0xd0
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f7ff ffbb 	bl	800120c <_ZN11TouchScreen3GetEh>
 8001296:	4602      	mov	r2, r0
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	601a      	str	r2, [r3, #0]
	*y = Get(XPT2046_READ_Y);
 800129c:	2190      	movs	r1, #144	; 0x90
 800129e:	68f8      	ldr	r0, [r7, #12]
 80012a0:	f7ff ffb4 	bl	800120c <_ZN11TouchScreen3GetEh>
 80012a4:	4602      	mov	r2, r0
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	601a      	str	r2, [r3, #0]

	if ((orientation == LCD_LANDSCAPE_1) || (orientation == LCD_LANDSCAPE_2)) {
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d003      	beq.n	80012ba <_ZN11TouchScreen5GetXYEPiS0_b+0x3a>
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d109      	bne.n	80012ce <_ZN11TouchScreen5GetXYEPiS0_b+0x4e>
		SWAP(*x, *y);
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	697a      	ldr	r2, [r7, #20]
 80012cc:	601a      	str	r2, [r3, #0]
	}

	if (norm) {
 80012ce:	78fb      	ldrb	r3, [r7, #3]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d023      	beq.n	800131c <_ZN11TouchScreen5GetXYEPiS0_b+0x9c>
		if (*x < XPT2046_MIN)
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2bc7      	cmp	r3, #199	; 0xc7
 80012da:	dc03      	bgt.n	80012e4 <_ZN11TouchScreen5GetXYEPiS0_b+0x64>
			*x = XPT2046_MIN;
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	22c8      	movs	r2, #200	; 0xc8
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	e009      	b.n	80012f8 <_ZN11TouchScreen5GetXYEPiS0_b+0x78>
		else if (*x > XPT2046_MAX)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f640 62d8 	movw	r2, #3800	; 0xed8
 80012ec:	4293      	cmp	r3, r2
 80012ee:	dd03      	ble.n	80012f8 <_ZN11TouchScreen5GetXYEPiS0_b+0x78>
			*x = XPT2046_MAX;
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	f640 62d8 	movw	r2, #3800	; 0xed8
 80012f6:	601a      	str	r2, [r3, #0]
		if (*y < XPT2046_MIN)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	2bc7      	cmp	r3, #199	; 0xc7
 80012fe:	dc03      	bgt.n	8001308 <_ZN11TouchScreen5GetXYEPiS0_b+0x88>
			*y = XPT2046_MIN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	22c8      	movs	r2, #200	; 0xc8
 8001304:	601a      	str	r2, [r3, #0]
		else if (*y > XPT2046_MAX)
			*y = XPT2046_MAX;
	}
}
 8001306:	e009      	b.n	800131c <_ZN11TouchScreen5GetXYEPiS0_b+0x9c>
		else if (*y > XPT2046_MAX)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f640 62d8 	movw	r2, #3800	; 0xed8
 8001310:	4293      	cmp	r3, r2
 8001312:	dd03      	ble.n	800131c <_ZN11TouchScreen5GetXYEPiS0_b+0x9c>
			*y = XPT2046_MAX;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f640 62d8 	movw	r2, #3800	; 0xed8
 800131a:	601a      	str	r2, [r3, #0]
}
 800131c:	bf00      	nop
 800131e:	3718      	adds	r7, #24
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <_ZN11TouchScreen10FastMedianEPi>:

/*---------------------------------------------------------------------------*/
int TouchScreen::FastMedian(int *samples) {
 8001324:	b480      	push	{r7}
 8001326:	b091      	sub	sp, #68	; 0x44
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	6039      	str	r1, [r7, #0]

	// do a fast median selection (reference code available on internet). This code basically
	// avoids sorting the entire samples array

	SORT(samples[0], samples[5]);
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	3314      	adds	r3, #20
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	429a      	cmp	r2, r3
 800133a:	dd0a      	ble.n	8001352 <_ZN11TouchScreen10FastMedianEPi+0x2e>
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	695a      	ldr	r2, [r3, #20]
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3314      	adds	r3, #20
 800134e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001350:	601a      	str	r2, [r3, #0]
	SORT(samples[0], samples[3]);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	330c      	adds	r3, #12
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	dd0a      	ble.n	8001376 <_ZN11TouchScreen10FastMedianEPi+0x52>
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	63bb      	str	r3, [r7, #56]	; 0x38
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	330c      	adds	r3, #12
 8001372:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001374:	601a      	str	r2, [r3, #0]
	SORT(samples[1], samples[6]);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	3304      	adds	r3, #4
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	3318      	adds	r3, #24
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	429a      	cmp	r2, r3
 8001384:	dd0b      	ble.n	800139e <_ZN11TouchScreen10FastMedianEPi+0x7a>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	637b      	str	r3, [r7, #52]	; 0x34
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	3304      	adds	r3, #4
 8001390:	683a      	ldr	r2, [r7, #0]
 8001392:	6992      	ldr	r2, [r2, #24]
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	3318      	adds	r3, #24
 800139a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800139c:	601a      	str	r2, [r3, #0]
	SORT(samples[2], samples[4]);
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	3308      	adds	r3, #8
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	3310      	adds	r3, #16
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	dd0b      	ble.n	80013c6 <_ZN11TouchScreen10FastMedianEPi+0xa2>
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	633b      	str	r3, [r7, #48]	; 0x30
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	3308      	adds	r3, #8
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	6912      	ldr	r2, [r2, #16]
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3310      	adds	r3, #16
 80013c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80013c4:	601a      	str	r2, [r3, #0]
	SORT(samples[0], samples[1]);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	3304      	adds	r3, #4
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	429a      	cmp	r2, r3
 80013d2:	dd0a      	ble.n	80013ea <_ZN11TouchScreen10FastMedianEPi+0xc6>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	3304      	adds	r3, #4
 80013e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013e8:	601a      	str	r2, [r3, #0]
	SORT(samples[3], samples[5]);
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	330c      	adds	r3, #12
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	3314      	adds	r3, #20
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	dd0b      	ble.n	8001412 <_ZN11TouchScreen10FastMedianEPi+0xee>
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	330c      	adds	r3, #12
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	6952      	ldr	r2, [r2, #20]
 8001408:	601a      	str	r2, [r3, #0]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	3314      	adds	r3, #20
 800140e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001410:	601a      	str	r2, [r3, #0]
	SORT(samples[2], samples[6]);
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	3308      	adds	r3, #8
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	3318      	adds	r3, #24
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	429a      	cmp	r2, r3
 8001420:	dd0b      	ble.n	800143a <_ZN11TouchScreen10FastMedianEPi+0x116>
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	627b      	str	r3, [r7, #36]	; 0x24
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	3308      	adds	r3, #8
 800142c:	683a      	ldr	r2, [r7, #0]
 800142e:	6992      	ldr	r2, [r2, #24]
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	3318      	adds	r3, #24
 8001436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001438:	601a      	str	r2, [r3, #0]
	SORT(samples[2], samples[3]);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	3308      	adds	r3, #8
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	330c      	adds	r3, #12
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	dd0b      	ble.n	8001462 <_ZN11TouchScreen10FastMedianEPi+0x13e>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	623b      	str	r3, [r7, #32]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	3308      	adds	r3, #8
 8001454:	683a      	ldr	r2, [r7, #0]
 8001456:	68d2      	ldr	r2, [r2, #12]
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	330c      	adds	r3, #12
 800145e:	6a3a      	ldr	r2, [r7, #32]
 8001460:	601a      	str	r2, [r3, #0]
	SORT(samples[3], samples[6]);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	330c      	adds	r3, #12
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	3318      	adds	r3, #24
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	dd0b      	ble.n	800148a <_ZN11TouchScreen10FastMedianEPi+0x166>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	61fb      	str	r3, [r7, #28]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	330c      	adds	r3, #12
 800147c:	683a      	ldr	r2, [r7, #0]
 800147e:	6992      	ldr	r2, [r2, #24]
 8001480:	601a      	str	r2, [r3, #0]
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	3318      	adds	r3, #24
 8001486:	69fa      	ldr	r2, [r7, #28]
 8001488:	601a      	str	r2, [r3, #0]
	SORT(samples[4], samples[5]);
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	3310      	adds	r3, #16
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	3314      	adds	r3, #20
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	429a      	cmp	r2, r3
 8001498:	dd0b      	ble.n	80014b2 <_ZN11TouchScreen10FastMedianEPi+0x18e>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	61bb      	str	r3, [r7, #24]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	3310      	adds	r3, #16
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	6952      	ldr	r2, [r2, #20]
 80014a8:	601a      	str	r2, [r3, #0]
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	3314      	adds	r3, #20
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	601a      	str	r2, [r3, #0]
	SORT(samples[1], samples[4]);
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	3304      	adds	r3, #4
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	3310      	adds	r3, #16
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	429a      	cmp	r2, r3
 80014c0:	dd0b      	ble.n	80014da <_ZN11TouchScreen10FastMedianEPi+0x1b6>
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	3304      	adds	r3, #4
 80014cc:	683a      	ldr	r2, [r7, #0]
 80014ce:	6912      	ldr	r2, [r2, #16]
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	3310      	adds	r3, #16
 80014d6:	697a      	ldr	r2, [r7, #20]
 80014d8:	601a      	str	r2, [r3, #0]
	SORT(samples[1], samples[3]);
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	3304      	adds	r3, #4
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	330c      	adds	r3, #12
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dd0b      	ble.n	8001502 <_ZN11TouchScreen10FastMedianEPi+0x1de>
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	613b      	str	r3, [r7, #16]
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	3304      	adds	r3, #4
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	68d2      	ldr	r2, [r2, #12]
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	330c      	adds	r3, #12
 80014fe:	693a      	ldr	r2, [r7, #16]
 8001500:	601a      	str	r2, [r3, #0]
	SORT(samples[3], samples[4]);
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	330c      	adds	r3, #12
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	3310      	adds	r3, #16
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	429a      	cmp	r2, r3
 8001510:	dd0b      	ble.n	800152a <_ZN11TouchScreen10FastMedianEPi+0x206>
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	330c      	adds	r3, #12
 800151c:	683a      	ldr	r2, [r7, #0]
 800151e:	6912      	ldr	r2, [r2, #16]
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	3310      	adds	r3, #16
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	601a      	str	r2, [r3, #0]

	return samples[3];
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	68db      	ldr	r3, [r3, #12]
}
 800152e:	4618      	mov	r0, r3
 8001530:	3744      	adds	r7, #68	; 0x44
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
	...

0800153c <_ZN11TouchScreen10CorrectionEPiS0_>:

/*---------------------------------------------------------------------------*/
void TouchScreen::Correction(int *x, int *y) {
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	60f8      	str	r0, [r7, #12]
 8001544:	60b9      	str	r1, [r7, #8]
 8001546:	607a      	str	r2, [r7, #4]
	*x -= XPT2046_MIN;
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	601a      	str	r2, [r3, #0]
	*y -= XPT2046_MIN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f1a3 02c8 	sub.w	r2, r3, #200	; 0xc8
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	601a      	str	r2, [r3, #0]

	*x = ((*x) * width) / (XPT2046_MAX - XPT2046_MIN);
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	68fa      	ldr	r2, [r7, #12]
 8001566:	6852      	ldr	r2, [r2, #4]
 8001568:	fb02 f303 	mul.w	r3, r2, r3
 800156c:	4a26      	ldr	r2, [pc, #152]	; (8001608 <_ZN11TouchScreen10CorrectionEPiS0_+0xcc>)
 800156e:	fb82 1203 	smull	r1, r2, r2, r3
 8001572:	441a      	add	r2, r3
 8001574:	12d2      	asrs	r2, r2, #11
 8001576:	17db      	asrs	r3, r3, #31
 8001578:	1ad2      	subs	r2, r2, r3
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	601a      	str	r2, [r3, #0]
	*y = ((*y) * height) / (XPT2046_MAX - XPT2046_MIN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	68fa      	ldr	r2, [r7, #12]
 8001584:	6892      	ldr	r2, [r2, #8]
 8001586:	fb02 f303 	mul.w	r3, r2, r3
 800158a:	4a1f      	ldr	r2, [pc, #124]	; (8001608 <_ZN11TouchScreen10CorrectionEPiS0_+0xcc>)
 800158c:	fb82 1203 	smull	r1, r2, r2, r3
 8001590:	441a      	add	r2, r3
 8001592:	12d2      	asrs	r2, r2, #11
 8001594:	17db      	asrs	r3, r3, #31
 8001596:	1ad2      	subs	r2, r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	601a      	str	r2, [r3, #0]

	switch (orientation) {
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d82b      	bhi.n	80015fc <_ZN11TouchScreen10CorrectionEPiS0_+0xc0>
 80015a4:	a201      	add	r2, pc, #4	; (adr r2, 80015ac <_ZN11TouchScreen10CorrectionEPiS0_+0x70>)
 80015a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015aa:	bf00      	nop
 80015ac:	080015dd 	.word	0x080015dd
 80015b0:	080015fb 	.word	0x080015fb
 80015b4:	080015bd 	.word	0x080015bd
 80015b8:	080015cd 	.word	0x080015cd
		case LCD_PORTRAIT_1:
			*y = height - *y;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	689a      	ldr	r2, [r3, #8]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	1ad2      	subs	r2, r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]
			break;
 80015ca:	e017      	b.n	80015fc <_ZN11TouchScreen10CorrectionEPiS0_+0xc0>
		case LCD_PORTRAIT_2:
			*x = width - *x;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1ad2      	subs	r2, r2, r3
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	601a      	str	r2, [r3, #0]
			break;
 80015da:	e00f      	b.n	80015fc <_ZN11TouchScreen10CorrectionEPiS0_+0xc0>
		case LCD_LANDSCAPE_1:
			*x = width - *x;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685a      	ldr	r2, [r3, #4]
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	1ad2      	subs	r2, r2, r3
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	601a      	str	r2, [r3, #0]
			*y = height - *y;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	1ad2      	subs	r2, r2, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	601a      	str	r2, [r3, #0]
			break;
 80015f8:	e000      	b.n	80015fc <_ZN11TouchScreen10CorrectionEPiS0_+0xc0>
		case LCD_LANDSCAPE_2:
			break;
 80015fa:	bf00      	nop
		}
}
 80015fc:	bf00      	nop
 80015fe:	3714      	adds	r7, #20
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	91a2b3c5 	.word	0x91a2b3c5

0800160c <_ZN11TouchScreen11GetXYMedianEPiS0_>:

/*---------------------------------------------------------------------------*/
void TouchScreen::GetXYMedian(int *x, int *y) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
	int i;
	int tab_x[7], tab_y[7];

	for (i = 0; i < 7; i++) {
 8001618:	2300      	movs	r3, #0
 800161a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800161c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800161e:	2b06      	cmp	r3, #6
 8001620:	dc11      	bgt.n	8001646 <_ZN11TouchScreen11GetXYMedianEPiS0_+0x3a>
		GetXY(&tab_x[i], &tab_y[i], true);
 8001622:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8001626:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	18d1      	adds	r1, r2, r3
 800162c:	f107 0214 	add.w	r2, r7, #20
 8001630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	441a      	add	r2, r3
 8001636:	2301      	movs	r3, #1
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f7ff fe21 	bl	8001280 <_ZN11TouchScreen5GetXYEPiS0_b>
	for (i = 0; i < 7; i++) {
 800163e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001640:	3301      	adds	r3, #1
 8001642:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001644:	e7ea      	b.n	800161c <_ZN11TouchScreen11GetXYMedianEPiS0_+0x10>
	}

	*x = FastMedian(tab_x);
 8001646:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164a:	4619      	mov	r1, r3
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff fe69 	bl	8001324 <_ZN11TouchScreen10FastMedianEPi>
 8001652:	4602      	mov	r2, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	601a      	str	r2, [r3, #0]
	*y = FastMedian(tab_y);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	68f8      	ldr	r0, [r7, #12]
 8001660:	f7ff fe60 	bl	8001324 <_ZN11TouchScreen10FastMedianEPi>
 8001664:	4602      	mov	r2, r0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	601a      	str	r2, [r3, #0]
	Correction(x, y);
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	68b9      	ldr	r1, [r7, #8]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f7ff ff64 	bl	800153c <_ZN11TouchScreen10CorrectionEPiS0_>
}
 8001674:	bf00      	nop
 8001676:	3750      	adds	r7, #80	; 0x50
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <_Z41__static_initialization_and_destruction_0ii>:
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d107      	bne.n	800169c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001692:	4293      	cmp	r3, r2
 8001694:	d102      	bne.n	800169c <_Z41__static_initialization_and_destruction_0ii+0x20>
TouchScreen touch = TouchScreen();
 8001696:	4803      	ldr	r0, [pc, #12]	; (80016a4 <_Z41__static_initialization_and_destruction_0ii+0x28>)
 8001698:	f7ff fd62 	bl	8001160 <_ZN11TouchScreenC1Ev>
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200000f0 	.word	0x200000f0

080016a8 <_GLOBAL__sub_I_touch>:
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80016b0:	2001      	movs	r0, #1
 80016b2:	f7ff ffe3 	bl	800167c <_Z41__static_initialization_and_destruction_0ii>
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <LedToggle>:

/*******************************************************************************
 * Toggle the LED, led can be LED2 or LED3
 ******************************************************************************/
void LedToggle(unsigned int Led)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
	if (Led >= NB_LED) return;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d808      	bhi.n	80016d8 <LedToggle+0x20>
	HAL_GPIO_TogglePin(GPIOA, LedPin[Led]);
 80016c6:	4a06      	ldr	r2, [pc, #24]	; (80016e0 <LedToggle+0x28>)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80016ce:	4619      	mov	r1, r3
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <LedToggle+0x2c>)
 80016d2:	f001 f824 	bl	800271e <HAL_GPIO_TogglePin>
 80016d6:	e000      	b.n	80016da <LedToggle+0x22>
	if (Led >= NB_LED) return;
 80016d8:	bf00      	nop
}
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000000 	.word	0x20000000
 80016e4:	40020000 	.word	0x40020000

080016e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016ec:	f000 fd06 	bl	80020fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016f0:	f000 f82e 	bl	8001750 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016f4:	f000 f972 	bl	80019dc <MX_GPIO_Init>
  MX_TIM1_Init();
 80016f8:	f000 f908 	bl	800190c <MX_TIM1_Init>
  MX_RTC_Init();
 80016fc:	f000 f8aa 	bl	8001854 <MX_RTC_Init>
  MX_SPI2_Init();
 8001700:	f000 f8ce 	bl	80018a0 <MX_SPI2_Init>
  MX_FSMC_Init();
 8001704:	f000 fa5a 	bl	8001bbc <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */

  AppInit();
 8001708:	f7fe ff90 	bl	800062c <AppInit>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800170c:	f002 ff00 	bl	8004510 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001710:	4a09      	ldr	r2, [pc, #36]	; (8001738 <main+0x50>)
 8001712:	2100      	movs	r1, #0
 8001714:	4809      	ldr	r0, [pc, #36]	; (800173c <main+0x54>)
 8001716:	f002 ff65 	bl	80045e4 <osThreadNew>
 800171a:	4602      	mov	r2, r0
 800171c:	4b08      	ldr	r3, [pc, #32]	; (8001740 <main+0x58>)
 800171e:	601a      	str	r2, [r3, #0]

  /* creation of blinkTask */
  blinkTaskHandle = osThreadNew(StartBlinkTask, NULL, &blinkTask_attributes);
 8001720:	4a08      	ldr	r2, [pc, #32]	; (8001744 <main+0x5c>)
 8001722:	2100      	movs	r1, #0
 8001724:	4808      	ldr	r0, [pc, #32]	; (8001748 <main+0x60>)
 8001726:	f002 ff5d 	bl	80045e4 <osThreadNew>
 800172a:	4602      	mov	r2, r0
 800172c:	4b07      	ldr	r3, [pc, #28]	; (800174c <main+0x64>)
 800172e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001730:	f002 ff22 	bl	8004578 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001734:	e7fe      	b.n	8001734 <main+0x4c>
 8001736:	bf00      	nop
 8001738:	0800a07c 	.word	0x0800a07c
 800173c:	08001c7d 	.word	0x08001c7d
 8001740:	20004a24 	.word	0x20004a24
 8001744:	0800a0a0 	.word	0x0800a0a0
 8001748:	08001c8b 	.word	0x08001c8b
 800174c:	20004a28 	.word	0x20004a28

08001750 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b098      	sub	sp, #96	; 0x60
 8001754:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001756:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800175a:	2230      	movs	r2, #48	; 0x30
 800175c:	2100      	movs	r1, #0
 800175e:	4618      	mov	r0, r3
 8001760:	f005 fc49 	bl	8006ff6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001764:	f107 031c 	add.w	r3, r7, #28
 8001768:	2200      	movs	r2, #0
 800176a:	601a      	str	r2, [r3, #0]
 800176c:	605a      	str	r2, [r3, #4]
 800176e:	609a      	str	r2, [r3, #8]
 8001770:	60da      	str	r2, [r3, #12]
 8001772:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001774:	f107 030c 	add.w	r3, r7, #12
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60bb      	str	r3, [r7, #8]
 8001786:	4b31      	ldr	r3, [pc, #196]	; (800184c <SystemClock_Config+0xfc>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178a:	4a30      	ldr	r2, [pc, #192]	; (800184c <SystemClock_Config+0xfc>)
 800178c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001790:	6413      	str	r3, [r2, #64]	; 0x40
 8001792:	4b2e      	ldr	r3, [pc, #184]	; (800184c <SystemClock_Config+0xfc>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179a:	60bb      	str	r3, [r7, #8]
 800179c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179e:	2300      	movs	r3, #0
 80017a0:	607b      	str	r3, [r7, #4]
 80017a2:	4b2b      	ldr	r3, [pc, #172]	; (8001850 <SystemClock_Config+0x100>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a2a      	ldr	r2, [pc, #168]	; (8001850 <SystemClock_Config+0x100>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6013      	str	r3, [r2, #0]
 80017ae:	4b28      	ldr	r3, [pc, #160]	; (8001850 <SystemClock_Config+0x100>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	607b      	str	r3, [r7, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80017ba:	2305      	movs	r3, #5
 80017bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017c8:	2302      	movs	r3, #2
 80017ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017d2:	2304      	movs	r3, #4
 80017d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 168;
 80017d6:	23a8      	movs	r3, #168	; 0xa8
 80017d8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017da:	2302      	movs	r3, #2
 80017dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017de:	2307      	movs	r3, #7
 80017e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80017e6:	4618      	mov	r0, r3
 80017e8:	f000 ffb4 	bl	8002754 <HAL_RCC_OscConfig>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80017f2:	f000 fa6f 	bl	8001cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017f6:	230f      	movs	r3, #15
 80017f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017fa:	2302      	movs	r3, #2
 80017fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001802:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180c:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	2105      	movs	r1, #5
 8001814:	4618      	mov	r0, r3
 8001816:	f001 fa0d 	bl	8002c34 <HAL_RCC_ClockConfig>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001820:	f000 fa58 	bl	8001cd4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001824:	2302      	movs	r3, #2
 8001826:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800182c:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800182e:	f107 030c 	add.w	r3, r7, #12
 8001832:	4618      	mov	r0, r3
 8001834:	f001 fc0e 	bl	8003054 <HAL_RCCEx_PeriphCLKConfig>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 800183e:	f000 fa49 	bl	8001cd4 <Error_Handler>
  }
}
 8001842:	bf00      	nop
 8001844:	3760      	adds	r7, #96	; 0x60
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800
 8001850:	40007000 	.word	0x40007000

08001854 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001858:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_RTC_Init+0x44>)
 800185a:	4a10      	ldr	r2, [pc, #64]	; (800189c <MX_RTC_Init+0x48>)
 800185c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800185e:	4b0e      	ldr	r3, [pc, #56]	; (8001898 <MX_RTC_Init+0x44>)
 8001860:	2200      	movs	r2, #0
 8001862:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001864:	4b0c      	ldr	r3, [pc, #48]	; (8001898 <MX_RTC_Init+0x44>)
 8001866:	227f      	movs	r2, #127	; 0x7f
 8001868:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <MX_RTC_Init+0x44>)
 800186c:	22ff      	movs	r2, #255	; 0xff
 800186e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001870:	4b09      	ldr	r3, [pc, #36]	; (8001898 <MX_RTC_Init+0x44>)
 8001872:	2200      	movs	r2, #0
 8001874:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001876:	4b08      	ldr	r3, [pc, #32]	; (8001898 <MX_RTC_Init+0x44>)
 8001878:	2200      	movs	r2, #0
 800187a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800187c:	4b06      	ldr	r3, [pc, #24]	; (8001898 <MX_RTC_Init+0x44>)
 800187e:	2200      	movs	r2, #0
 8001880:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001882:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_RTC_Init+0x44>)
 8001884:	f001 fcc8 	bl	8003218 <HAL_RTC_Init>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d001      	beq.n	8001892 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 800188e:	f000 fa21 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001892:	bf00      	nop
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20004ad4 	.word	0x20004ad4
 800189c:	40002800 	.word	0x40002800

080018a0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_SPI2_Init+0x64>)
 80018a6:	4a18      	ldr	r2, [pc, #96]	; (8001908 <MX_SPI2_Init+0x68>)
 80018a8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_SPI2_Init+0x64>)
 80018ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018b0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80018b2:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_SPI2_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80018b8:	4b12      	ldr	r3, [pc, #72]	; (8001904 <MX_SPI2_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_SPI2_Init+0x64>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_SPI2_Init+0x64>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_SPI2_Init+0x64>)
 80018cc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80018d0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80018d2:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_SPI2_Init+0x64>)
 80018d4:	2238      	movs	r2, #56	; 0x38
 80018d6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <MX_SPI2_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80018de:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_SPI2_Init+0x64>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018e4:	4b07      	ldr	r3, [pc, #28]	; (8001904 <MX_SPI2_Init+0x64>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80018ea:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_SPI2_Init+0x64>)
 80018ec:	220a      	movs	r2, #10
 80018ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80018f0:	4804      	ldr	r0, [pc, #16]	; (8001904 <MX_SPI2_Init+0x64>)
 80018f2:	f001 fd76 	bl	80033e2 <HAL_SPI_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80018fc:	f000 f9ea 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20004a2c 	.word	0x20004a2c
 8001908:	40003800 	.word	0x40003800

0800190c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08c      	sub	sp, #48	; 0x30
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001912:	f107 0320 	add.w	r3, r7, #32
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001920:	f107 030c 	add.w	r3, r7, #12
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
 800192e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001930:	1d3b      	adds	r3, r7, #4
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001938:	4b26      	ldr	r3, [pc, #152]	; (80019d4 <MX_TIM1_Init+0xc8>)
 800193a:	4a27      	ldr	r2, [pc, #156]	; (80019d8 <MX_TIM1_Init+0xcc>)
 800193c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <MX_TIM1_Init+0xc8>)
 8001940:	2200      	movs	r2, #0
 8001942:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <MX_TIM1_Init+0xc8>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800194a:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <MX_TIM1_Init+0xc8>)
 800194c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001950:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <MX_TIM1_Init+0xc8>)
 8001954:	2200      	movs	r2, #0
 8001956:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <MX_TIM1_Init+0xc8>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b1d      	ldr	r3, [pc, #116]	; (80019d4 <MX_TIM1_Init+0xc8>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001964:	481b      	ldr	r0, [pc, #108]	; (80019d4 <MX_TIM1_Init+0xc8>)
 8001966:	f002 f833 	bl	80039d0 <HAL_TIM_Base_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM1_Init+0x68>
  {
    Error_Handler();
 8001970:	f000 f9b0 	bl	8001cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001974:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001978:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800197a:	f107 0320 	add.w	r3, r7, #32
 800197e:	4619      	mov	r1, r3
 8001980:	4814      	ldr	r0, [pc, #80]	; (80019d4 <MX_TIM1_Init+0xc8>)
 8001982:	f002 f97c 	bl	8003c7e <HAL_TIM_ConfigClockSource>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d001      	beq.n	8001990 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 800198c:	f000 f9a2 	bl	8001cd4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001990:	2300      	movs	r3, #0
 8001992:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4619      	mov	r1, r3
 800199e:	480d      	ldr	r0, [pc, #52]	; (80019d4 <MX_TIM1_Init+0xc8>)
 80019a0:	f002 fa24 	bl	8003dec <HAL_TIM_SlaveConfigSynchro>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80019aa:	f000 f993 	bl	8001cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4806      	ldr	r0, [pc, #24]	; (80019d4 <MX_TIM1_Init+0xc8>)
 80019bc:	f002 fc40 	bl	8004240 <HAL_TIMEx_MasterConfigSynchronization>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80019c6:	f000 f985 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	3730      	adds	r7, #48	; 0x30
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20004af4 	.word	0x20004af4
 80019d8:	40010000 	.word	0x40010000

080019dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b08c      	sub	sp, #48	; 0x30
 80019e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
 80019ea:	605a      	str	r2, [r3, #4]
 80019ec:	609a      	str	r2, [r3, #8]
 80019ee:	60da      	str	r2, [r3, #12]
 80019f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	4b6b      	ldr	r3, [pc, #428]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a6a      	ldr	r2, [pc, #424]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 80019fc:	f043 0310 	orr.w	r3, r3, #16
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b68      	ldr	r3, [pc, #416]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0310 	and.w	r3, r3, #16
 8001a0a:	61bb      	str	r3, [r7, #24]
 8001a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	617b      	str	r3, [r7, #20]
 8001a12:	4b64      	ldr	r3, [pc, #400]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a63      	ldr	r2, [pc, #396]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a18:	f043 0304 	orr.w	r3, r3, #4
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b61      	ldr	r3, [pc, #388]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f003 0304 	and.w	r3, r3, #4
 8001a26:	617b      	str	r3, [r7, #20]
 8001a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
 8001a2e:	4b5d      	ldr	r3, [pc, #372]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a32:	4a5c      	ldr	r2, [pc, #368]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a38:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a42:	613b      	str	r3, [r7, #16]
 8001a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	2300      	movs	r3, #0
 8001a48:	60fb      	str	r3, [r7, #12]
 8001a4a:	4b56      	ldr	r3, [pc, #344]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	4a55      	ldr	r2, [pc, #340]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6313      	str	r3, [r2, #48]	; 0x30
 8001a56:	4b53      	ldr	r3, [pc, #332]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
 8001a66:	4b4f      	ldr	r3, [pc, #316]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a4e      	ldr	r2, [pc, #312]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b4c      	ldr	r3, [pc, #304]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	60bb      	str	r3, [r7, #8]
 8001a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	607b      	str	r3, [r7, #4]
 8001a82:	4b48      	ldr	r3, [pc, #288]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a88:	f043 0308 	orr.w	r3, r3, #8
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b45      	ldr	r3, [pc, #276]	; (8001ba4 <MX_GPIO_Init+0x1c8>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0308 	and.w	r3, r3, #8
 8001a96:	607b      	str	r3, [r7, #4]
 8001a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED2_Pin|LED3_Pin, GPIO_PIN_SET);
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	21c0      	movs	r1, #192	; 0xc0
 8001a9e:	4842      	ldr	r0, [pc, #264]	; (8001ba8 <MX_GPIO_Init+0x1cc>)
 8001aa0:	f000 fe24 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_GPIO_Port, LCD_BL_Pin, GPIO_PIN_SET);
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	2102      	movs	r1, #2
 8001aa8:	4840      	ldr	r0, [pc, #256]	; (8001bac <MX_GPIO_Init+0x1d0>)
 8001aaa:	f000 fe1f 	bl	80026ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : KEY1_Pin KEY0_Pin */
  GPIO_InitStruct.Pin = KEY1_Pin|KEY0_Pin;
 8001aae:	2318      	movs	r3, #24
 8001ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aba:	f107 031c 	add.w	r3, r7, #28
 8001abe:	4619      	mov	r1, r3
 8001ac0:	483b      	ldr	r0, [pc, #236]	; (8001bb0 <MX_GPIO_Init+0x1d4>)
 8001ac2:	f000 fc61 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED2_Pin|LED3_Pin;
 8001ac6:	23c0      	movs	r3, #192	; 0xc0
 8001ac8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aca:	2301      	movs	r3, #1
 8001acc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ace:	2300      	movs	r3, #0
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad6:	f107 031c 	add.w	r3, r7, #28
 8001ada:	4619      	mov	r1, r3
 8001adc:	4832      	ldr	r0, [pc, #200]	; (8001ba8 <MX_GPIO_Init+0x1cc>)
 8001ade:	f000 fc53 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PEN_INT_Pin */
  GPIO_InitStruct.Pin = PEN_INT_Pin;
 8001ae2:	2320      	movs	r3, #32
 8001ae4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aea:	2301      	movs	r3, #1
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PEN_INT_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 031c 	add.w	r3, r7, #28
 8001af2:	4619      	mov	r1, r3
 8001af4:	482f      	ldr	r0, [pc, #188]	; (8001bb4 <MX_GPIO_Init+0x1d8>)
 8001af6:	f000 fc47 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 8001afa:	2302      	movs	r3, #2
 8001afc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001afe:	2301      	movs	r3, #1
 8001b00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b06:	2300      	movs	r3, #0
 8001b08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 8001b0a:	f107 031c 	add.w	r3, r7, #28
 8001b0e:	4619      	mov	r1, r3
 8001b10:	4826      	ldr	r0, [pc, #152]	; (8001bac <MX_GPIO_Init+0x1d0>)
 8001b12:	f000 fc39 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001b16:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001b1a:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b24:	2303      	movs	r3, #3
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b28:	230c      	movs	r3, #12
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4820      	ldr	r0, [pc, #128]	; (8001bb4 <MX_GPIO_Init+0x1d8>)
 8001b34:	f000 fc28 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001b38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001b3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b46:	2303      	movs	r3, #3
 8001b48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001b4a:	230a      	movs	r3, #10
 8001b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4814      	ldr	r0, [pc, #80]	; (8001ba8 <MX_GPIO_Init+0x1cc>)
 8001b56:	f000 fc17 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b5a:	2304      	movs	r3, #4
 8001b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b5e:	2302      	movs	r3, #2
 8001b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b66:	2303      	movs	r3, #3
 8001b68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8001b6a:	230c      	movs	r3, #12
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4810      	ldr	r0, [pc, #64]	; (8001bb8 <MX_GPIO_Init+0x1dc>)
 8001b76:	f000 fc07 	bl	8002388 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001b7a:	2320      	movs	r3, #32
 8001b7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b7e:	2302      	movs	r3, #2
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b86:	2303      	movs	r3, #3
 8001b88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b8a:	2305      	movs	r3, #5
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b8e:	f107 031c 	add.w	r3, r7, #28
 8001b92:	4619      	mov	r1, r3
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <MX_GPIO_Init+0x1d0>)
 8001b96:	f000 fbf7 	bl	8002388 <HAL_GPIO_Init>

}
 8001b9a:	bf00      	nop
 8001b9c:	3730      	adds	r7, #48	; 0x30
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	40020000 	.word	0x40020000
 8001bac:	40020400 	.word	0x40020400
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	40020800 	.word	0x40020800
 8001bb8:	40020c00 	.word	0x40020c00

08001bbc <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001bd4:	4b27      	ldr	r3, [pc, #156]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001bd6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bda:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001bdc:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001bde:	4a26      	ldr	r2, [pc, #152]	; (8001c78 <MX_FSMC_Init+0xbc>)
 8001be0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001be2:	4b24      	ldr	r3, [pc, #144]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001be8:	4b22      	ldr	r3, [pc, #136]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001bee:	4b21      	ldr	r3, [pc, #132]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001bf4:	4b1f      	ldr	r3, [pc, #124]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001bf6:	2210      	movs	r2, #16
 8001bf8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001bfa:	4b1e      	ldr	r3, [pc, #120]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c00:	4b1c      	ldr	r3, [pc, #112]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001c0c:	4b19      	ldr	r3, [pc, #100]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001c12:	4b18      	ldr	r3, [pc, #96]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c14:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c18:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c26:	4b13      	ldr	r3, [pc, #76]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001c32:	4b10      	ldr	r3, [pc, #64]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 8001c38:	230f      	movs	r3, #15
 8001c3a:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c3c:	230f      	movs	r3, #15
 8001c3e:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8001c40:	23ff      	movs	r3, #255	; 0xff
 8001c42:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8001c44:	230f      	movs	r3, #15
 8001c46:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001c48:	2310      	movs	r3, #16
 8001c4a:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001c4c:	2311      	movs	r3, #17
 8001c4e:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001c50:	2300      	movs	r3, #0
 8001c52:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001c54:	1d3b      	adds	r3, r7, #4
 8001c56:	2200      	movs	r2, #0
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4806      	ldr	r0, [pc, #24]	; (8001c74 <MX_FSMC_Init+0xb8>)
 8001c5c:	f001 fe74 	bl	8003948 <HAL_SRAM_Init>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001c66:	f000 f835 	bl	8001cd4 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001c6a:	bf00      	nop
 8001c6c:	3720      	adds	r7, #32
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	20004a84 	.word	0x20004a84
 8001c78:	a0000104 	.word	0xa0000104

08001c7c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  AppLoop();
 8001c84:	f7fe fd06 	bl	8000694 <AppLoop>
 8001c88:	e7fc      	b.n	8001c84 <StartDefaultTask+0x8>

08001c8a <StartBlinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBlinkTask */
void StartBlinkTask(void *argument)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b082      	sub	sp, #8
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBlinkTask */
  /* Infinite loop */
  for(;;)
  {
	  LedToggle(LED2);
 8001c92:	2000      	movs	r0, #0
 8001c94:	f7ff fd10 	bl	80016b8 <LedToggle>
	  osDelay(100);
 8001c98:	2064      	movs	r0, #100	; 0x64
 8001c9a:	f002 fd49 	bl	8004730 <osDelay>
	  LedToggle(LED2);
 8001c9e:	2000      	movs	r0, #0
 8001ca0:	f7ff fd0a 	bl	80016b8 <LedToggle>
	  osDelay(900);
 8001ca4:	f44f 7061 	mov.w	r0, #900	; 0x384
 8001ca8:	f002 fd42 	bl	8004730 <osDelay>
	  LedToggle(LED2);
 8001cac:	e7f1      	b.n	8001c92 <StartBlinkTask+0x8>
	...

08001cb0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d101      	bne.n	8001cc6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cc2:	f000 fa3d 	bl	8002140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001cc6:	bf00      	nop
 8001cc8:	3708      	adds	r7, #8
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}
 8001cce:	bf00      	nop
 8001cd0:	40001c00 	.word	0x40001c00

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cda:	e7fe      	b.n	8001cda <Error_Handler+0x6>

08001cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_MspInit+0x54>)
 8001ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cea:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_MspInit+0x54>)
 8001cec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <HAL_MspInit+0x54>)
 8001cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfa:	607b      	str	r3, [r7, #4]
 8001cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_MspInit+0x54>)
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <HAL_MspInit+0x54>)
 8001d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0e:	4b08      	ldr	r3, [pc, #32]	; (8001d30 <HAL_MspInit+0x54>)
 8001d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d16:	603b      	str	r3, [r7, #0]
 8001d18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	210f      	movs	r1, #15
 8001d1e:	f06f 0001 	mvn.w	r0, #1
 8001d22:	f000 fb07 	bl	8002334 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d26:	bf00      	nop
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a05      	ldr	r2, [pc, #20]	; (8001d58 <HAL_RTC_MspInit+0x24>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d102      	bne.n	8001d4c <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d46:	4b05      	ldr	r3, [pc, #20]	; (8001d5c <HAL_RTC_MspInit+0x28>)
 8001d48:	2201      	movs	r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	40002800 	.word	0x40002800
 8001d5c:	42470e3c 	.word	0x42470e3c

08001d60 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a19      	ldr	r2, [pc, #100]	; (8001de4 <HAL_SPI_MspInit+0x84>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d12c      	bne.n	8001ddc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	613b      	str	r3, [r7, #16]
 8001d86:	4b18      	ldr	r3, [pc, #96]	; (8001de8 <HAL_SPI_MspInit+0x88>)
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	4a17      	ldr	r2, [pc, #92]	; (8001de8 <HAL_SPI_MspInit+0x88>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6413      	str	r3, [r2, #64]	; 0x40
 8001d92:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <HAL_SPI_MspInit+0x88>)
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	613b      	str	r3, [r7, #16]
 8001d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60fb      	str	r3, [r7, #12]
 8001da2:	4b11      	ldr	r3, [pc, #68]	; (8001de8 <HAL_SPI_MspInit+0x88>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a10      	ldr	r2, [pc, #64]	; (8001de8 <HAL_SPI_MspInit+0x88>)
 8001da8:	f043 0302 	orr.w	r3, r3, #2
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <HAL_SPI_MspInit+0x88>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	60fb      	str	r3, [r7, #12]
 8001db8:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001dba:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001dcc:	2305      	movs	r3, #5
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dd0:	f107 0314 	add.w	r3, r7, #20
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <HAL_SPI_MspInit+0x8c>)
 8001dd8:	f000 fad6 	bl	8002388 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40003800 	.word	0x40003800
 8001de8:	40023800 	.word	0x40023800
 8001dec:	40020400 	.word	0x40020400

08001df0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0b      	ldr	r2, [pc, #44]	; (8001e2c <HAL_TIM_Base_MspInit+0x3c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d10d      	bne.n	8001e1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b0a      	ldr	r3, [pc, #40]	; (8001e30 <HAL_TIM_Base_MspInit+0x40>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e0a:	4a09      	ldr	r2, [pc, #36]	; (8001e30 <HAL_TIM_Base_MspInit+0x40>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6453      	str	r3, [r2, #68]	; 0x44
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <HAL_TIM_Base_MspInit+0x40>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3714      	adds	r7, #20
 8001e22:	46bd      	mov	sp, r7
 8001e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	40010000 	.word	0x40010000
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b086      	sub	sp, #24
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001e3a:	1d3b      	adds	r3, r7, #4
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]
 8001e46:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001e48:	4b1c      	ldr	r3, [pc, #112]	; (8001ebc <HAL_FSMC_MspInit+0x88>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d131      	bne.n	8001eb4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001e50:	4b1a      	ldr	r3, [pc, #104]	; (8001ebc <HAL_FSMC_MspInit+0x88>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8001e56:	2300      	movs	r3, #0
 8001e58:	603b      	str	r3, [r7, #0]
 8001e5a:	4b19      	ldr	r3, [pc, #100]	; (8001ec0 <HAL_FSMC_MspInit+0x8c>)
 8001e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e5e:	4a18      	ldr	r2, [pc, #96]	; (8001ec0 <HAL_FSMC_MspInit+0x8c>)
 8001e60:	f043 0301 	orr.w	r3, r3, #1
 8001e64:	6393      	str	r3, [r2, #56]	; 0x38
 8001e66:	4b16      	ldr	r3, [pc, #88]	; (8001ec0 <HAL_FSMC_MspInit+0x8c>)
 8001e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e6a:	f003 0301 	and.w	r3, r3, #1
 8001e6e:	603b      	str	r3, [r7, #0]
 8001e70:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = TFT_FSMC_D4_Pin|TFT_FSMC_D5_Pin|TFT_FSMC_D6_Pin|TFT_FSMC_D7_Pin
 8001e72:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001e76:	607b      	str	r3, [r7, #4]
                          |TFT_FSMC_D8_Pin|TFT_FSMC_D9_Pin|TFT_FSMC_D10_Pin|TFT_FSMC_D11_Pin
                          |TFT_FSMC_D12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e80:	2303      	movs	r3, #3
 8001e82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001e84:	230c      	movs	r3, #12
 8001e86:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e88:	1d3b      	adds	r3, r7, #4
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <HAL_FSMC_MspInit+0x90>)
 8001e8e:	f000 fa7b 	bl	8002388 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = TFT_FSMC_D13_Pin|TFT_FSMC_D14_Pin|TFT_FSMC_D15_Pin|TFT_FSMC_A18_Pin
 8001e92:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 8001e96:	607b      	str	r3, [r7, #4]
                          |TFT_FSMC_D0_Pin|TFT_FSMC_D1_Pin|TFT_FSMC_D2_Pin|TFT_FSMC_D3_Pin
                          |TFT_FSMC_NOE_Pin|TFT_FSMC_NWE_Pin|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ea0:	2303      	movs	r3, #3
 8001ea2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8001ea4:	230c      	movs	r3, #12
 8001ea6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4806      	ldr	r0, [pc, #24]	; (8001ec8 <HAL_FSMC_MspInit+0x94>)
 8001eae:	f000 fa6b 	bl	8002388 <HAL_GPIO_Init>
 8001eb2:	e000      	b.n	8001eb6 <HAL_FSMC_MspInit+0x82>
    return;
 8001eb4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8001eb6:	3718      	adds	r7, #24
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	2000010c 	.word	0x2000010c
 8001ec0:	40023800 	.word	0x40023800
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001ed4:	f7ff ffae 	bl	8001e34 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001ed8:	bf00      	nop
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b08c      	sub	sp, #48	; 0x30
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	6879      	ldr	r1, [r7, #4]
 8001ef4:	202c      	movs	r0, #44	; 0x2c
 8001ef6:	f000 fa1d 	bl	8002334 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001efa:	202c      	movs	r0, #44	; 0x2c
 8001efc:	f000 fa36 	bl	800236c <HAL_NVIC_EnableIRQ>
  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8001f00:	2300      	movs	r3, #0
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4a1e      	ldr	r2, [pc, #120]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f10:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <HAL_InitTick+0xa4>)
 8001f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f18:	60fb      	str	r3, [r7, #12]
 8001f1a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f1c:	f107 0210 	add.w	r2, r7, #16
 8001f20:	f107 0314 	add.w	r3, r7, #20
 8001f24:	4611      	mov	r1, r2
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 f862 	bl	8002ff0 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001f2c:	f001 f84c 	bl	8002fc8 <HAL_RCC_GetPCLK1Freq>
 8001f30:	4603      	mov	r3, r0
 8001f32:	005b      	lsls	r3, r3, #1
 8001f34:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f38:	4a13      	ldr	r2, [pc, #76]	; (8001f88 <HAL_InitTick+0xa8>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0c9b      	lsrs	r3, r3, #18
 8001f40:	3b01      	subs	r3, #1
 8001f42:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_InitTick+0xac>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <HAL_InitTick+0xb0>)
 8001f48:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <HAL_InitTick+0xac>)
 8001f4c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f50:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8001f52:	4a0e      	ldr	r2, [pc, #56]	; (8001f8c <HAL_InitTick+0xac>)
 8001f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f56:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <HAL_InitTick+0xac>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <HAL_InitTick+0xac>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8001f64:	4809      	ldr	r0, [pc, #36]	; (8001f8c <HAL_InitTick+0xac>)
 8001f66:	f001 fd33 	bl	80039d0 <HAL_TIM_Base_Init>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d104      	bne.n	8001f7a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8001f70:	4806      	ldr	r0, [pc, #24]	; (8001f8c <HAL_InitTick+0xac>)
 8001f72:	f001 fd58 	bl	8003a26 <HAL_TIM_Base_Start_IT>
 8001f76:	4603      	mov	r3, r0
 8001f78:	e000      	b.n	8001f7c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3730      	adds	r7, #48	; 0x30
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	40023800 	.word	0x40023800
 8001f88:	431bde83 	.word	0x431bde83
 8001f8c:	20004b34 	.word	0x20004b34
 8001f90:	40001c00 	.word	0x40001c00

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>
	...

08001f9c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	2180      	movs	r1, #128	; 0x80
 8001fa4:	4801      	ldr	r0, [pc, #4]	; (8001fac <HardFault_Handler+0x10>)
 8001fa6:	f000 fba1 	bl	80026ec <HAL_GPIO_WritePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <HardFault_Handler+0xe>
 8001fac:	40020000 	.word	0x40020000

08001fb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	2180      	movs	r1, #128	; 0x80
 8001fb8:	4801      	ldr	r0, [pc, #4]	; (8001fc0 <MemManage_Handler+0x10>)
 8001fba:	f000 fb97 	bl	80026ec <HAL_GPIO_WritePin>

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fbe:	e7fe      	b.n	8001fbe <MemManage_Handler+0xe>
 8001fc0:	40020000 	.word	0x40020000

08001fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fc8:	2200      	movs	r2, #0
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	4801      	ldr	r0, [pc, #4]	; (8001fd4 <BusFault_Handler+0x10>)
 8001fce:	f000 fb8d 	bl	80026ec <HAL_GPIO_WritePin>

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd2:	e7fe      	b.n	8001fd2 <BusFault_Handler+0xe>
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2180      	movs	r1, #128	; 0x80
 8001fe0:	4801      	ldr	r0, [pc, #4]	; (8001fe8 <UsageFault_Handler+0x10>)
 8001fe2:	f000 fb83 	bl	80026ec <HAL_GPIO_WritePin>

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <UsageFault_Handler+0xe>
 8001fe8:	40020000 	.word	0x40020000

08001fec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002002:	f001 fd34 	bl	8003a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	20004b34 	.word	0x20004b34

08002010 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002018:	4a14      	ldr	r2, [pc, #80]	; (800206c <_sbrk+0x5c>)
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <_sbrk+0x60>)
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002024:	4b13      	ldr	r3, [pc, #76]	; (8002074 <_sbrk+0x64>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d102      	bne.n	8002032 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800202c:	4b11      	ldr	r3, [pc, #68]	; (8002074 <_sbrk+0x64>)
 800202e:	4a12      	ldr	r2, [pc, #72]	; (8002078 <_sbrk+0x68>)
 8002030:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <_sbrk+0x64>)
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4413      	add	r3, r2
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	429a      	cmp	r2, r3
 800203e:	d207      	bcs.n	8002050 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002040:	f004 ffa4 	bl	8006f8c <__errno>
 8002044:	4602      	mov	r2, r0
 8002046:	230c      	movs	r3, #12
 8002048:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800204a:	f04f 33ff 	mov.w	r3, #4294967295
 800204e:	e009      	b.n	8002064 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002056:	4b07      	ldr	r3, [pc, #28]	; (8002074 <_sbrk+0x64>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4413      	add	r3, r2
 800205e:	4a05      	ldr	r2, [pc, #20]	; (8002074 <_sbrk+0x64>)
 8002060:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002062:	68fb      	ldr	r3, [r7, #12]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3718      	adds	r7, #24
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20020000 	.word	0x20020000
 8002070:	00000400 	.word	0x00000400
 8002074:	20000110 	.word	0x20000110
 8002078:	20004bc0 	.word	0x20004bc0

0800207c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <SystemInit+0x28>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	4a07      	ldr	r2, [pc, #28]	; (80020a4 <SystemInit+0x28>)
 8002088:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800208c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <SystemInit+0x28>)
 8002092:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002096:	609a      	str	r2, [r3, #8]
#endif
}
 8002098:	bf00      	nop
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80020a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020e0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80020ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80020ae:	e003      	b.n	80020b8 <LoopCopyDataInit>

080020b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80020b0:	4b0c      	ldr	r3, [pc, #48]	; (80020e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80020b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80020b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80020b6:	3104      	adds	r1, #4

080020b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80020b8:	480b      	ldr	r0, [pc, #44]	; (80020e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80020ba:	4b0c      	ldr	r3, [pc, #48]	; (80020ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80020bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80020be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80020c0:	d3f6      	bcc.n	80020b0 <CopyDataInit>
  ldr  r2, =_sbss
 80020c2:	4a0b      	ldr	r2, [pc, #44]	; (80020f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80020c4:	e002      	b.n	80020cc <LoopFillZerobss>

080020c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80020c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80020c8:	f842 3b04 	str.w	r3, [r2], #4

080020cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80020cc:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80020ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80020d0:	d3f9      	bcc.n	80020c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80020d2:	f7ff ffd3 	bl	800207c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020d6:	f004 ff5f 	bl	8006f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020da:	f7ff fb05 	bl	80016e8 <main>
  bx  lr    
 80020de:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80020e0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80020e4:	0800a12c 	.word	0x0800a12c
  ldr  r0, =_sdata
 80020e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80020ec:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 80020f0:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 80020f4:	20004bbc 	.word	0x20004bbc

080020f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020f8:	e7fe      	b.n	80020f8 <ADC_IRQHandler>
	...

080020fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a0d      	ldr	r2, [pc, #52]	; (800213c <HAL_Init+0x40>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800210c:	4b0b      	ldr	r3, [pc, #44]	; (800213c <HAL_Init+0x40>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a0a      	ldr	r2, [pc, #40]	; (800213c <HAL_Init+0x40>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002118:	4b08      	ldr	r3, [pc, #32]	; (800213c <HAL_Init+0x40>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a07      	ldr	r2, [pc, #28]	; (800213c <HAL_Init+0x40>)
 800211e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002124:	2003      	movs	r0, #3
 8002126:	f000 f8fa 	bl	800231e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800212a:	2000      	movs	r0, #0
 800212c:	f7ff fed8 	bl	8001ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002130:	f7ff fdd4 	bl	8001cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	40023c00 	.word	0x40023c00

08002140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002144:	4b06      	ldr	r3, [pc, #24]	; (8002160 <HAL_IncTick+0x20>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	461a      	mov	r2, r3
 800214a:	4b06      	ldr	r3, [pc, #24]	; (8002164 <HAL_IncTick+0x24>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4413      	add	r3, r2
 8002150:	4a04      	ldr	r2, [pc, #16]	; (8002164 <HAL_IncTick+0x24>)
 8002152:	6013      	str	r3, [r2, #0]
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	2000000c 	.word	0x2000000c
 8002164:	20004b74 	.word	0x20004b74

08002168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  return uwTick;
 800216c:	4b03      	ldr	r3, [pc, #12]	; (800217c <HAL_GetTick+0x14>)
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	20004b74 	.word	0x20004b74

08002180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b084      	sub	sp, #16
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002188:	f7ff ffee 	bl	8002168 <HAL_GetTick>
 800218c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002198:	d005      	beq.n	80021a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800219a:	4b09      	ldr	r3, [pc, #36]	; (80021c0 <HAL_Delay+0x40>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	4413      	add	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021a6:	bf00      	nop
 80021a8:	f7ff ffde 	bl	8002168 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	68fa      	ldr	r2, [r7, #12]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	d8f7      	bhi.n	80021a8 <HAL_Delay+0x28>
  {
  }
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	2000000c 	.word	0x2000000c

080021c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021c4:	b480      	push	{r7}
 80021c6:	b085      	sub	sp, #20
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021da:	68ba      	ldr	r2, [r7, #8]
 80021dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e0:	4013      	ands	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021f6:	4a04      	ldr	r2, [pc, #16]	; (8002208 <__NVIC_SetPriorityGrouping+0x44>)
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	60d3      	str	r3, [r2, #12]
}
 80021fc:	bf00      	nop
 80021fe:	3714      	adds	r7, #20
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr
 8002208:	e000ed00 	.word	0xe000ed00

0800220c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002210:	4b04      	ldr	r3, [pc, #16]	; (8002224 <__NVIC_GetPriorityGrouping+0x18>)
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	0a1b      	lsrs	r3, r3, #8
 8002216:	f003 0307 	and.w	r3, r3, #7
}
 800221a:	4618      	mov	r0, r3
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr
 8002224:	e000ed00 	.word	0xe000ed00

08002228 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002228:	b480      	push	{r7}
 800222a:	b083      	sub	sp, #12
 800222c:	af00      	add	r7, sp, #0
 800222e:	4603      	mov	r3, r0
 8002230:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002232:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002236:	2b00      	cmp	r3, #0
 8002238:	db0b      	blt.n	8002252 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800223a:	79fb      	ldrb	r3, [r7, #7]
 800223c:	f003 021f 	and.w	r2, r3, #31
 8002240:	4907      	ldr	r1, [pc, #28]	; (8002260 <__NVIC_EnableIRQ+0x38>)
 8002242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2001      	movs	r0, #1
 800224a:	fa00 f202 	lsl.w	r2, r0, r2
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002252:	bf00      	nop
 8002254:	370c      	adds	r7, #12
 8002256:	46bd      	mov	sp, r7
 8002258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	e000e100 	.word	0xe000e100

08002264 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	4603      	mov	r3, r0
 800226c:	6039      	str	r1, [r7, #0]
 800226e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002270:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002274:	2b00      	cmp	r3, #0
 8002276:	db0a      	blt.n	800228e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	b2da      	uxtb	r2, r3
 800227c:	490c      	ldr	r1, [pc, #48]	; (80022b0 <__NVIC_SetPriority+0x4c>)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	0112      	lsls	r2, r2, #4
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	440b      	add	r3, r1
 8002288:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800228c:	e00a      	b.n	80022a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	b2da      	uxtb	r2, r3
 8002292:	4908      	ldr	r1, [pc, #32]	; (80022b4 <__NVIC_SetPriority+0x50>)
 8002294:	79fb      	ldrb	r3, [r7, #7]
 8002296:	f003 030f 	and.w	r3, r3, #15
 800229a:	3b04      	subs	r3, #4
 800229c:	0112      	lsls	r2, r2, #4
 800229e:	b2d2      	uxtb	r2, r2
 80022a0:	440b      	add	r3, r1
 80022a2:	761a      	strb	r2, [r3, #24]
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	e000e100 	.word	0xe000e100
 80022b4:	e000ed00 	.word	0xe000ed00

080022b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b089      	sub	sp, #36	; 0x24
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	f003 0307 	and.w	r3, r3, #7
 80022ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	f1c3 0307 	rsb	r3, r3, #7
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	bf28      	it	cs
 80022d6:	2304      	movcs	r3, #4
 80022d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	3304      	adds	r3, #4
 80022de:	2b06      	cmp	r3, #6
 80022e0:	d902      	bls.n	80022e8 <NVIC_EncodePriority+0x30>
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3b03      	subs	r3, #3
 80022e6:	e000      	b.n	80022ea <NVIC_EncodePriority+0x32>
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	f04f 32ff 	mov.w	r2, #4294967295
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43da      	mvns	r2, r3
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	401a      	ands	r2, r3
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002300:	f04f 31ff 	mov.w	r1, #4294967295
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	fa01 f303 	lsl.w	r3, r1, r3
 800230a:	43d9      	mvns	r1, r3
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002310:	4313      	orrs	r3, r2
         );
}
 8002312:	4618      	mov	r0, r3
 8002314:	3724      	adds	r7, #36	; 0x24
 8002316:	46bd      	mov	sp, r7
 8002318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231c:	4770      	bx	lr

0800231e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ff4c 	bl	80021c4 <__NVIC_SetPriorityGrouping>
}
 800232c:	bf00      	nop
 800232e:	3708      	adds	r7, #8
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}

08002334 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af00      	add	r7, sp, #0
 800233a:	4603      	mov	r3, r0
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002346:	f7ff ff61 	bl	800220c <__NVIC_GetPriorityGrouping>
 800234a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	68b9      	ldr	r1, [r7, #8]
 8002350:	6978      	ldr	r0, [r7, #20]
 8002352:	f7ff ffb1 	bl	80022b8 <NVIC_EncodePriority>
 8002356:	4602      	mov	r2, r0
 8002358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800235c:	4611      	mov	r1, r2
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff ff80 	bl	8002264 <__NVIC_SetPriority>
}
 8002364:	bf00      	nop
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	4603      	mov	r3, r0
 8002374:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff ff54 	bl	8002228 <__NVIC_EnableIRQ>
}
 8002380:	bf00      	nop
 8002382:	3708      	adds	r7, #8
 8002384:	46bd      	mov	sp, r7
 8002386:	bd80      	pop	{r7, pc}

08002388 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002388:	b480      	push	{r7}
 800238a:	b089      	sub	sp, #36	; 0x24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002396:	2300      	movs	r3, #0
 8002398:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800239a:	2300      	movs	r3, #0
 800239c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800239e:	2300      	movs	r3, #0
 80023a0:	61fb      	str	r3, [r7, #28]
 80023a2:	e16b      	b.n	800267c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023a4:	2201      	movs	r2, #1
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	697a      	ldr	r2, [r7, #20]
 80023b4:	4013      	ands	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	429a      	cmp	r2, r3
 80023be:	f040 815a 	bne.w	8002676 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d00b      	beq.n	80023e2 <HAL_GPIO_Init+0x5a>
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d007      	beq.n	80023e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80023d6:	2b11      	cmp	r3, #17
 80023d8:	d003      	beq.n	80023e2 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b12      	cmp	r3, #18
 80023e0:	d130      	bne.n	8002444 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	2203      	movs	r2, #3
 80023ee:	fa02 f303 	lsl.w	r3, r2, r3
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	fa02 f303 	lsl.w	r3, r2, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4313      	orrs	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002418:	2201      	movs	r2, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	091b      	lsrs	r3, r3, #4
 800242e:	f003 0201 	and.w	r2, r3, #1
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	2203      	movs	r2, #3
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	689a      	ldr	r2, [r3, #8]
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d003      	beq.n	8002484 <HAL_GPIO_Init+0xfc>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b12      	cmp	r3, #18
 8002482:	d123      	bne.n	80024cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	08da      	lsrs	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	3208      	adds	r2, #8
 800248c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002490:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	220f      	movs	r2, #15
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43db      	mvns	r3, r3
 80024a2:	69ba      	ldr	r2, [r7, #24]
 80024a4:	4013      	ands	r3, r2
 80024a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	691a      	ldr	r2, [r3, #16]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	fa02 f303 	lsl.w	r3, r2, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4313      	orrs	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	08da      	lsrs	r2, r3, #3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3208      	adds	r2, #8
 80024c6:	69b9      	ldr	r1, [r7, #24]
 80024c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	2203      	movs	r2, #3
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f003 0203 	and.w	r2, r3, #3
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	f000 80b4 	beq.w	8002676 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_GPIO_Init+0x308>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_GPIO_Init+0x308>)
 8002518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800251c:	6453      	str	r3, [r2, #68]	; 0x44
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_GPIO_Init+0x308>)
 8002520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002526:	60fb      	str	r3, [r7, #12]
 8002528:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800252a:	4a5a      	ldr	r2, [pc, #360]	; (8002694 <HAL_GPIO_Init+0x30c>)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	089b      	lsrs	r3, r3, #2
 8002530:	3302      	adds	r3, #2
 8002532:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002536:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f003 0303 	and.w	r3, r3, #3
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	220f      	movs	r2, #15
 8002542:	fa02 f303 	lsl.w	r3, r2, r3
 8002546:	43db      	mvns	r3, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4013      	ands	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_GPIO_Init+0x310>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d02b      	beq.n	80025ae <HAL_GPIO_Init+0x226>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_GPIO_Init+0x314>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d025      	beq.n	80025aa <HAL_GPIO_Init+0x222>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <HAL_GPIO_Init+0x318>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d01f      	beq.n	80025a6 <HAL_GPIO_Init+0x21e>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4e      	ldr	r2, [pc, #312]	; (80026a4 <HAL_GPIO_Init+0x31c>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d019      	beq.n	80025a2 <HAL_GPIO_Init+0x21a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4d      	ldr	r2, [pc, #308]	; (80026a8 <HAL_GPIO_Init+0x320>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d013      	beq.n	800259e <HAL_GPIO_Init+0x216>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4c      	ldr	r2, [pc, #304]	; (80026ac <HAL_GPIO_Init+0x324>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00d      	beq.n	800259a <HAL_GPIO_Init+0x212>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a4b      	ldr	r2, [pc, #300]	; (80026b0 <HAL_GPIO_Init+0x328>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d007      	beq.n	8002596 <HAL_GPIO_Init+0x20e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a4a      	ldr	r2, [pc, #296]	; (80026b4 <HAL_GPIO_Init+0x32c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_GPIO_Init+0x20a>
 800258e:	2307      	movs	r3, #7
 8002590:	e00e      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 8002592:	2308      	movs	r3, #8
 8002594:	e00c      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 8002596:	2306      	movs	r3, #6
 8002598:	e00a      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 800259a:	2305      	movs	r3, #5
 800259c:	e008      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 800259e:	2304      	movs	r3, #4
 80025a0:	e006      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025a2:	2303      	movs	r3, #3
 80025a4:	e004      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025a6:	2302      	movs	r3, #2
 80025a8:	e002      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_GPIO_Init+0x228>
 80025ae:	2300      	movs	r3, #0
 80025b0:	69fa      	ldr	r2, [r7, #28]
 80025b2:	f002 0203 	and.w	r2, r2, #3
 80025b6:	0092      	lsls	r2, r2, #2
 80025b8:	4093      	lsls	r3, r2
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025c0:	4934      	ldr	r1, [pc, #208]	; (8002694 <HAL_GPIO_Init+0x30c>)
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	089b      	lsrs	r3, r3, #2
 80025c6:	3302      	adds	r3, #2
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025ce:	4b3a      	ldr	r3, [pc, #232]	; (80026b8 <HAL_GPIO_Init+0x330>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	43db      	mvns	r3, r3
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	4013      	ands	r3, r2
 80025dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d003      	beq.n	80025f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80025f2:	4a31      	ldr	r2, [pc, #196]	; (80026b8 <HAL_GPIO_Init+0x330>)
 80025f4:	69bb      	ldr	r3, [r7, #24]
 80025f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025f8:	4b2f      	ldr	r3, [pc, #188]	; (80026b8 <HAL_GPIO_Init+0x330>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	43db      	mvns	r3, r3
 8002602:	69ba      	ldr	r2, [r7, #24]
 8002604:	4013      	ands	r3, r2
 8002606:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4313      	orrs	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800261c:	4a26      	ldr	r2, [pc, #152]	; (80026b8 <HAL_GPIO_Init+0x330>)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002622:	4b25      	ldr	r3, [pc, #148]	; (80026b8 <HAL_GPIO_Init+0x330>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	43db      	mvns	r3, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4013      	ands	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d003      	beq.n	8002646 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800263e:	69ba      	ldr	r2, [r7, #24]
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	4313      	orrs	r3, r2
 8002644:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002646:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <HAL_GPIO_Init+0x330>)
 8002648:	69bb      	ldr	r3, [r7, #24]
 800264a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800264c:	4b1a      	ldr	r3, [pc, #104]	; (80026b8 <HAL_GPIO_Init+0x330>)
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d003      	beq.n	8002670 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002668:	69ba      	ldr	r2, [r7, #24]
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	4313      	orrs	r3, r2
 800266e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002670:	4a11      	ldr	r2, [pc, #68]	; (80026b8 <HAL_GPIO_Init+0x330>)
 8002672:	69bb      	ldr	r3, [r7, #24]
 8002674:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	3301      	adds	r3, #1
 800267a:	61fb      	str	r3, [r7, #28]
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	2b0f      	cmp	r3, #15
 8002680:	f67f ae90 	bls.w	80023a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002684:	bf00      	nop
 8002686:	3724      	adds	r7, #36	; 0x24
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40023800 	.word	0x40023800
 8002694:	40013800 	.word	0x40013800
 8002698:	40020000 	.word	0x40020000
 800269c:	40020400 	.word	0x40020400
 80026a0:	40020800 	.word	0x40020800
 80026a4:	40020c00 	.word	0x40020c00
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40021400 	.word	0x40021400
 80026b0:	40021800 	.word	0x40021800
 80026b4:	40021c00 	.word	0x40021c00
 80026b8:	40013c00 	.word	0x40013c00

080026bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026bc:	b480      	push	{r7}
 80026be:	b085      	sub	sp, #20
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	887b      	ldrh	r3, [r7, #2]
 80026ce:	4013      	ands	r3, r2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026d4:	2301      	movs	r3, #1
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e001      	b.n	80026de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026de:	7bfb      	ldrb	r3, [r7, #15]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	3714      	adds	r7, #20
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
 80026f8:	4613      	mov	r3, r2
 80026fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026fc:	787b      	ldrb	r3, [r7, #1]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d003      	beq.n	800270a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002708:	e003      	b.n	8002712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800270a:	887b      	ldrh	r3, [r7, #2]
 800270c:	041a      	lsls	r2, r3, #16
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	619a      	str	r2, [r3, #24]
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr

0800271e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695a      	ldr	r2, [r3, #20]
 800272e:	887b      	ldrh	r3, [r7, #2]
 8002730:	401a      	ands	r2, r3
 8002732:	887b      	ldrh	r3, [r7, #2]
 8002734:	429a      	cmp	r2, r3
 8002736:	d104      	bne.n	8002742 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	041a      	lsls	r2, r3, #16
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002740:	e002      	b.n	8002748 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002742:	887a      	ldrh	r2, [r7, #2]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	619a      	str	r2, [r3, #24]
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e25b      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d075      	beq.n	800285e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002772:	4ba3      	ldr	r3, [pc, #652]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	2b04      	cmp	r3, #4
 800277c:	d00c      	beq.n	8002798 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800277e:	4ba0      	ldr	r3, [pc, #640]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002786:	2b08      	cmp	r3, #8
 8002788:	d112      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800278a:	4b9d      	ldr	r3, [pc, #628]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002792:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	4b99      	ldr	r3, [pc, #612]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05b      	beq.n	800285c <HAL_RCC_OscConfig+0x108>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d157      	bne.n	800285c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e236      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x74>
 80027ba:	4b91      	ldr	r3, [pc, #580]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a90      	ldr	r2, [pc, #576]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x98>
 80027d2:	4b8b      	ldr	r3, [pc, #556]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a8a      	ldr	r2, [pc, #552]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b88      	ldr	r3, [pc, #544]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a87      	ldr	r2, [pc, #540]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027ec:	4b84      	ldr	r3, [pc, #528]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a83      	ldr	r2, [pc, #524]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b81      	ldr	r3, [pc, #516]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a80      	ldr	r2, [pc, #512]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280c:	f7ff fcac 	bl	8002168 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002814:	f7ff fca8 	bl	8002168 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	; 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e1fb      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002826:	4b76      	ldr	r3, [pc, #472]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xc0>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff fc98 	bl	8002168 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff fc94 	bl	8002168 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	; 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e1e7      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800284e:	4b6c      	ldr	r3, [pc, #432]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0xe8>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d063      	beq.n	8002932 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	2b00      	cmp	r3, #0
 8002874:	d00b      	beq.n	800288e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002876:	4b62      	ldr	r3, [pc, #392]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800287e:	2b08      	cmp	r3, #8
 8002880:	d11c      	bne.n	80028bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800288a:	2b00      	cmp	r3, #0
 800288c:	d116      	bne.n	80028bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800288e:	4b5c      	ldr	r3, [pc, #368]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d005      	beq.n	80028a6 <HAL_RCC_OscConfig+0x152>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	68db      	ldr	r3, [r3, #12]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e1bb      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a6:	4b56      	ldr	r3, [pc, #344]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	4952      	ldr	r1, [pc, #328]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028ba:	e03a      	b.n	8002932 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	68db      	ldr	r3, [r3, #12]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d020      	beq.n	8002906 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028c4:	4b4f      	ldr	r3, [pc, #316]	; (8002a04 <HAL_RCC_OscConfig+0x2b0>)
 80028c6:	2201      	movs	r2, #1
 80028c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7ff fc4d 	bl	8002168 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028d2:	f7ff fc49 	bl	8002168 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e19c      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e4:	4b46      	ldr	r3, [pc, #280]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0302 	and.w	r3, r3, #2
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d0f0      	beq.n	80028d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f0:	4b43      	ldr	r3, [pc, #268]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	00db      	lsls	r3, r3, #3
 80028fe:	4940      	ldr	r1, [pc, #256]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002900:	4313      	orrs	r3, r2
 8002902:	600b      	str	r3, [r1, #0]
 8002904:	e015      	b.n	8002932 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002906:	4b3f      	ldr	r3, [pc, #252]	; (8002a04 <HAL_RCC_OscConfig+0x2b0>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7ff fc2c 	bl	8002168 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002914:	f7ff fc28 	bl	8002168 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e17b      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d030      	beq.n	80029a0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695b      	ldr	r3, [r3, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d016      	beq.n	8002974 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002946:	4b30      	ldr	r3, [pc, #192]	; (8002a08 <HAL_RCC_OscConfig+0x2b4>)
 8002948:	2201      	movs	r2, #1
 800294a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294c:	f7ff fc0c 	bl	8002168 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002954:	f7ff fc08 	bl	8002168 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e15b      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002968:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d0f0      	beq.n	8002954 <HAL_RCC_OscConfig+0x200>
 8002972:	e015      	b.n	80029a0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002974:	4b24      	ldr	r3, [pc, #144]	; (8002a08 <HAL_RCC_OscConfig+0x2b4>)
 8002976:	2200      	movs	r2, #0
 8002978:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800297a:	f7ff fbf5 	bl	8002168 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002982:	f7ff fbf1 	bl	8002168 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e144      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 8002996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1f0      	bne.n	8002982 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0304 	and.w	r3, r3, #4
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	f000 80a0 	beq.w	8002aee <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ae:	2300      	movs	r3, #0
 80029b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029b2:	4b13      	ldr	r3, [pc, #76]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10f      	bne.n	80029de <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60bb      	str	r3, [r7, #8]
 80029c2:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029cc:	6413      	str	r3, [r2, #64]	; 0x40
 80029ce:	4b0c      	ldr	r3, [pc, #48]	; (8002a00 <HAL_RCC_OscConfig+0x2ac>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029d6:	60bb      	str	r3, [r7, #8]
 80029d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029da:	2301      	movs	r3, #1
 80029dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029de:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_OscConfig+0x2b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d121      	bne.n	8002a2e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029ea:	4b08      	ldr	r3, [pc, #32]	; (8002a0c <HAL_RCC_OscConfig+0x2b8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a07      	ldr	r2, [pc, #28]	; (8002a0c <HAL_RCC_OscConfig+0x2b8>)
 80029f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029f6:	f7ff fbb7 	bl	8002168 <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029fc:	e011      	b.n	8002a22 <HAL_RCC_OscConfig+0x2ce>
 80029fe:	bf00      	nop
 8002a00:	40023800 	.word	0x40023800
 8002a04:	42470000 	.word	0x42470000
 8002a08:	42470e80 	.word	0x42470e80
 8002a0c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a10:	f7ff fbaa 	bl	8002168 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0fd      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a22:	4b81      	ldr	r3, [pc, #516]	; (8002c28 <HAL_RCC_OscConfig+0x4d4>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d0f0      	beq.n	8002a10 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d106      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2f0>
 8002a36:	4b7d      	ldr	r3, [pc, #500]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a3c:	f043 0301 	orr.w	r3, r3, #1
 8002a40:	6713      	str	r3, [r2, #112]	; 0x70
 8002a42:	e01c      	b.n	8002a7e <HAL_RCC_OscConfig+0x32a>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d10c      	bne.n	8002a66 <HAL_RCC_OscConfig+0x312>
 8002a4c:	4b77      	ldr	r3, [pc, #476]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a50:	4a76      	ldr	r2, [pc, #472]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a52:	f043 0304 	orr.w	r3, r3, #4
 8002a56:	6713      	str	r3, [r2, #112]	; 0x70
 8002a58:	4b74      	ldr	r3, [pc, #464]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a5c:	4a73      	ldr	r2, [pc, #460]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a5e:	f043 0301 	orr.w	r3, r3, #1
 8002a62:	6713      	str	r3, [r2, #112]	; 0x70
 8002a64:	e00b      	b.n	8002a7e <HAL_RCC_OscConfig+0x32a>
 8002a66:	4b71      	ldr	r3, [pc, #452]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a6a:	4a70      	ldr	r2, [pc, #448]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a6c:	f023 0301 	bic.w	r3, r3, #1
 8002a70:	6713      	str	r3, [r2, #112]	; 0x70
 8002a72:	4b6e      	ldr	r3, [pc, #440]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a76:	4a6d      	ldr	r2, [pc, #436]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002a78:	f023 0304 	bic.w	r3, r3, #4
 8002a7c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d015      	beq.n	8002ab2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a86:	f7ff fb6f 	bl	8002168 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a8c:	e00a      	b.n	8002aa4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a8e:	f7ff fb6b 	bl	8002168 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d901      	bls.n	8002aa4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002aa0:	2303      	movs	r3, #3
 8002aa2:	e0bc      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa4:	4b61      	ldr	r3, [pc, #388]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa8:	f003 0302 	and.w	r3, r3, #2
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d0ee      	beq.n	8002a8e <HAL_RCC_OscConfig+0x33a>
 8002ab0:	e014      	b.n	8002adc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ab2:	f7ff fb59 	bl	8002168 <HAL_GetTick>
 8002ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ab8:	e00a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aba:	f7ff fb55 	bl	8002168 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e0a6      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ad0:	4b56      	ldr	r3, [pc, #344]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d1ee      	bne.n	8002aba <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002adc:	7dfb      	ldrb	r3, [r7, #23]
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d105      	bne.n	8002aee <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ae2:	4b52      	ldr	r3, [pc, #328]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	4a51      	ldr	r2, [pc, #324]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002ae8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aec:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 8092 	beq.w	8002c1c <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002af8:	4b4c      	ldr	r3, [pc, #304]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 030c 	and.w	r3, r3, #12
 8002b00:	2b08      	cmp	r3, #8
 8002b02:	d05c      	beq.n	8002bbe <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b02      	cmp	r3, #2
 8002b0a:	d141      	bne.n	8002b90 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b0c:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <HAL_RCC_OscConfig+0x4dc>)
 8002b0e:	2200      	movs	r2, #0
 8002b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b12:	f7ff fb29 	bl	8002168 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b1a:	f7ff fb25 	bl	8002168 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e078      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2c:	4b3f      	ldr	r3, [pc, #252]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d1f0      	bne.n	8002b1a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a1b      	ldr	r3, [r3, #32]
 8002b40:	431a      	orrs	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b46:	019b      	lsls	r3, r3, #6
 8002b48:	431a      	orrs	r2, r3
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
 8002b54:	431a      	orrs	r2, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	061b      	lsls	r3, r3, #24
 8002b5c:	4933      	ldr	r1, [pc, #204]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b62:	4b33      	ldr	r3, [pc, #204]	; (8002c30 <HAL_RCC_OscConfig+0x4dc>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b68:	f7ff fafe 	bl	8002168 <HAL_GetTick>
 8002b6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b6e:	e008      	b.n	8002b82 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b70:	f7ff fafa 	bl	8002168 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d901      	bls.n	8002b82 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002b7e:	2303      	movs	r3, #3
 8002b80:	e04d      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b82:	4b2a      	ldr	r3, [pc, #168]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d0f0      	beq.n	8002b70 <HAL_RCC_OscConfig+0x41c>
 8002b8e:	e045      	b.n	8002c1c <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b90:	4b27      	ldr	r3, [pc, #156]	; (8002c30 <HAL_RCC_OscConfig+0x4dc>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7ff fae7 	bl	8002168 <HAL_GetTick>
 8002b9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b9c:	e008      	b.n	8002bb0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b9e:	f7ff fae3 	bl	8002168 <HAL_GetTick>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d901      	bls.n	8002bb0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002bac:	2303      	movs	r3, #3
 8002bae:	e036      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb0:	4b1e      	ldr	r3, [pc, #120]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f0      	bne.n	8002b9e <HAL_RCC_OscConfig+0x44a>
 8002bbc:	e02e      	b.n	8002c1c <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e029      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bca:	4b18      	ldr	r3, [pc, #96]	; (8002c2c <HAL_RCC_OscConfig+0x4d8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	69db      	ldr	r3, [r3, #28]
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d11c      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d115      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d10d      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d106      	bne.n	8002c18 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3718      	adds	r7, #24
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40007000 	.word	0x40007000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	42470060 	.word	0x42470060

08002c34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b084      	sub	sp, #16
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d101      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0cc      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c48:	4b68      	ldr	r3, [pc, #416]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f003 030f 	and.w	r3, r3, #15
 8002c50:	683a      	ldr	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d90c      	bls.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c56:	4b65      	ldr	r3, [pc, #404]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c5e:	4b63      	ldr	r3, [pc, #396]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	683a      	ldr	r2, [r7, #0]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d001      	beq.n	8002c70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0b8      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0302 	and.w	r3, r3, #2
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d020      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d005      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c88:	4b59      	ldr	r3, [pc, #356]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	4a58      	ldr	r2, [pc, #352]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002c92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0308 	and.w	r3, r3, #8
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ca0:	4b53      	ldr	r3, [pc, #332]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	4a52      	ldr	r2, [pc, #328]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002caa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cac:	4b50      	ldr	r3, [pc, #320]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	494d      	ldr	r1, [pc, #308]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0301 	and.w	r3, r3, #1
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d044      	beq.n	8002d54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d107      	bne.n	8002ce2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cd2:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d119      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e07f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d003      	beq.n	8002cf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002cee:	2b03      	cmp	r3, #3
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d109      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e06f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d02:	4b3b      	ldr	r3, [pc, #236]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e067      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d12:	4b37      	ldr	r3, [pc, #220]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f023 0203 	bic.w	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	4934      	ldr	r1, [pc, #208]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d24:	f7ff fa20 	bl	8002168 <HAL_GetTick>
 8002d28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d2a:	e00a      	b.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d2c:	f7ff fa1c 	bl	8002168 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e04f      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d42:	4b2b      	ldr	r3, [pc, #172]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 020c 	and.w	r2, r3, #12
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d1eb      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 030f 	and.w	r3, r3, #15
 8002d5c:	683a      	ldr	r2, [r7, #0]
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d20c      	bcs.n	8002d7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d62:	4b22      	ldr	r3, [pc, #136]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	b2d2      	uxtb	r2, r2
 8002d68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_RCC_ClockConfig+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d001      	beq.n	8002d7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e032      	b.n	8002de2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f003 0304 	and.w	r3, r3, #4
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d008      	beq.n	8002d9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d88:	4b19      	ldr	r3, [pc, #100]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	4916      	ldr	r1, [pc, #88]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002d96:	4313      	orrs	r3, r2
 8002d98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0308 	and.w	r3, r3, #8
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d009      	beq.n	8002dba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002da6:	4b12      	ldr	r3, [pc, #72]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	490e      	ldr	r1, [pc, #56]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002dba:	f000 f821 	bl	8002e00 <HAL_RCC_GetSysClockFreq>
 8002dbe:	4601      	mov	r1, r0
 8002dc0:	4b0b      	ldr	r3, [pc, #44]	; (8002df0 <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	091b      	lsrs	r3, r3, #4
 8002dc6:	f003 030f 	and.w	r3, r3, #15
 8002dca:	4a0a      	ldr	r2, [pc, #40]	; (8002df4 <HAL_RCC_ClockConfig+0x1c0>)
 8002dcc:	5cd3      	ldrb	r3, [r2, r3]
 8002dce:	fa21 f303 	lsr.w	r3, r1, r3
 8002dd2:	4a09      	ldr	r2, [pc, #36]	; (8002df8 <HAL_RCC_ClockConfig+0x1c4>)
 8002dd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002dd6:	4b09      	ldr	r3, [pc, #36]	; (8002dfc <HAL_RCC_ClockConfig+0x1c8>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff f880 	bl	8001ee0 <HAL_InitTick>

  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3710      	adds	r7, #16
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	40023c00 	.word	0x40023c00
 8002df0:	40023800 	.word	0x40023800
 8002df4:	0800a0c4 	.word	0x0800a0c4
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	20000008 	.word	0x20000008

08002e00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e02:	b085      	sub	sp, #20
 8002e04:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e06:	2300      	movs	r3, #0
 8002e08:	607b      	str	r3, [r7, #4]
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	60fb      	str	r3, [r7, #12]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e16:	4b63      	ldr	r3, [pc, #396]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d007      	beq.n	8002e32 <HAL_RCC_GetSysClockFreq+0x32>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d008      	beq.n	8002e38 <HAL_RCC_GetSysClockFreq+0x38>
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 80b4 	bne.w	8002f94 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e2c:	4b5e      	ldr	r3, [pc, #376]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002e2e:	60bb      	str	r3, [r7, #8]
       break;
 8002e30:	e0b3      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e32:	4b5e      	ldr	r3, [pc, #376]	; (8002fac <HAL_RCC_GetSysClockFreq+0x1ac>)
 8002e34:	60bb      	str	r3, [r7, #8]
      break;
 8002e36:	e0b0      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e38:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002e40:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d04a      	beq.n	8002ee4 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e4e:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	099b      	lsrs	r3, r3, #6
 8002e54:	f04f 0400 	mov.w	r4, #0
 8002e58:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002e5c:	f04f 0200 	mov.w	r2, #0
 8002e60:	ea03 0501 	and.w	r5, r3, r1
 8002e64:	ea04 0602 	and.w	r6, r4, r2
 8002e68:	4629      	mov	r1, r5
 8002e6a:	4632      	mov	r2, r6
 8002e6c:	f04f 0300 	mov.w	r3, #0
 8002e70:	f04f 0400 	mov.w	r4, #0
 8002e74:	0154      	lsls	r4, r2, #5
 8002e76:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002e7a:	014b      	lsls	r3, r1, #5
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	4622      	mov	r2, r4
 8002e80:	1b49      	subs	r1, r1, r5
 8002e82:	eb62 0206 	sbc.w	r2, r2, r6
 8002e86:	f04f 0300 	mov.w	r3, #0
 8002e8a:	f04f 0400 	mov.w	r4, #0
 8002e8e:	0194      	lsls	r4, r2, #6
 8002e90:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002e94:	018b      	lsls	r3, r1, #6
 8002e96:	1a5b      	subs	r3, r3, r1
 8002e98:	eb64 0402 	sbc.w	r4, r4, r2
 8002e9c:	f04f 0100 	mov.w	r1, #0
 8002ea0:	f04f 0200 	mov.w	r2, #0
 8002ea4:	00e2      	lsls	r2, r4, #3
 8002ea6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002eaa:	00d9      	lsls	r1, r3, #3
 8002eac:	460b      	mov	r3, r1
 8002eae:	4614      	mov	r4, r2
 8002eb0:	195b      	adds	r3, r3, r5
 8002eb2:	eb44 0406 	adc.w	r4, r4, r6
 8002eb6:	f04f 0100 	mov.w	r1, #0
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	0262      	lsls	r2, r4, #9
 8002ec0:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002ec4:	0259      	lsls	r1, r3, #9
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4614      	mov	r4, r2
 8002eca:	4618      	mov	r0, r3
 8002ecc:	4621      	mov	r1, r4
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	f04f 0400 	mov.w	r4, #0
 8002ed4:	461a      	mov	r2, r3
 8002ed6:	4623      	mov	r3, r4
 8002ed8:	f7fd f9d2 	bl	8000280 <__aeabi_uldivmod>
 8002edc:	4603      	mov	r3, r0
 8002ede:	460c      	mov	r4, r1
 8002ee0:	60fb      	str	r3, [r7, #12]
 8002ee2:	e049      	b.n	8002f78 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ee4:	4b2f      	ldr	r3, [pc, #188]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	099b      	lsrs	r3, r3, #6
 8002eea:	f04f 0400 	mov.w	r4, #0
 8002eee:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002ef2:	f04f 0200 	mov.w	r2, #0
 8002ef6:	ea03 0501 	and.w	r5, r3, r1
 8002efa:	ea04 0602 	and.w	r6, r4, r2
 8002efe:	4629      	mov	r1, r5
 8002f00:	4632      	mov	r2, r6
 8002f02:	f04f 0300 	mov.w	r3, #0
 8002f06:	f04f 0400 	mov.w	r4, #0
 8002f0a:	0154      	lsls	r4, r2, #5
 8002f0c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002f10:	014b      	lsls	r3, r1, #5
 8002f12:	4619      	mov	r1, r3
 8002f14:	4622      	mov	r2, r4
 8002f16:	1b49      	subs	r1, r1, r5
 8002f18:	eb62 0206 	sbc.w	r2, r2, r6
 8002f1c:	f04f 0300 	mov.w	r3, #0
 8002f20:	f04f 0400 	mov.w	r4, #0
 8002f24:	0194      	lsls	r4, r2, #6
 8002f26:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002f2a:	018b      	lsls	r3, r1, #6
 8002f2c:	1a5b      	subs	r3, r3, r1
 8002f2e:	eb64 0402 	sbc.w	r4, r4, r2
 8002f32:	f04f 0100 	mov.w	r1, #0
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	00e2      	lsls	r2, r4, #3
 8002f3c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002f40:	00d9      	lsls	r1, r3, #3
 8002f42:	460b      	mov	r3, r1
 8002f44:	4614      	mov	r4, r2
 8002f46:	195b      	adds	r3, r3, r5
 8002f48:	eb44 0406 	adc.w	r4, r4, r6
 8002f4c:	f04f 0100 	mov.w	r1, #0
 8002f50:	f04f 0200 	mov.w	r2, #0
 8002f54:	02a2      	lsls	r2, r4, #10
 8002f56:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002f5a:	0299      	lsls	r1, r3, #10
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4614      	mov	r4, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	4621      	mov	r1, r4
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	4623      	mov	r3, r4
 8002f6e:	f7fd f987 	bl	8000280 <__aeabi_uldivmod>
 8002f72:	4603      	mov	r3, r0
 8002f74:	460c      	mov	r4, r1
 8002f76:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	3301      	adds	r3, #1
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	60bb      	str	r3, [r7, #8]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f94:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002f96:	60bb      	str	r3, [r7, #8]
      break;
 8002f98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3714      	adds	r7, #20
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	00f42400 	.word	0x00f42400
 8002fac:	007a1200 	.word	0x007a1200

08002fb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fb4:	4b03      	ldr	r3, [pc, #12]	; (8002fc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
}
 8002fb8:	4618      	mov	r0, r3
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	20000004 	.word	0x20000004

08002fc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fcc:	f7ff fff0 	bl	8002fb0 <HAL_RCC_GetHCLKFreq>
 8002fd0:	4601      	mov	r1, r0
 8002fd2:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	0a9b      	lsrs	r3, r3, #10
 8002fd8:	f003 0307 	and.w	r3, r3, #7
 8002fdc:	4a03      	ldr	r2, [pc, #12]	; (8002fec <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fde:	5cd3      	ldrb	r3, [r2, r3]
 8002fe0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40023800 	.word	0x40023800
 8002fec:	0800a0d4 	.word	0x0800a0d4

08002ff0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_RCC_GetClockConfig+0x5c>)
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f003 0203 	and.w	r2, r3, #3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800300c:	4b0f      	ldr	r3, [pc, #60]	; (800304c <HAL_RCC_GetClockConfig+0x5c>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003018:	4b0c      	ldr	r3, [pc, #48]	; (800304c <HAL_RCC_GetClockConfig+0x5c>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_RCC_GetClockConfig+0x5c>)
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	08db      	lsrs	r3, r3, #3
 800302a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003032:	4b07      	ldr	r3, [pc, #28]	; (8003050 <HAL_RCC_GetClockConfig+0x60>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 020f 	and.w	r2, r3, #15
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	601a      	str	r2, [r3, #0]
}
 800303e:	bf00      	nop
 8003040:	370c      	adds	r7, #12
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	40023800 	.word	0x40023800
 8003050:	40023c00 	.word	0x40023c00

08003054 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003060:	2300      	movs	r3, #0
 8003062:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f003 0301 	and.w	r3, r3, #1
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003078:	2b00      	cmp	r3, #0
 800307a:	d035      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800307c:	4b62      	ldr	r3, [pc, #392]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800307e:	2200      	movs	r2, #0
 8003080:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003082:	f7ff f871 	bl	8002168 <HAL_GetTick>
 8003086:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003088:	e008      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800308a:	f7ff f86d 	bl	8002168 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e0b0      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800309c:	4b5b      	ldr	r3, [pc, #364]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1f0      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	019a      	lsls	r2, r3, #6
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	071b      	lsls	r3, r3, #28
 80030b4:	4955      	ldr	r1, [pc, #340]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80030bc:	4b52      	ldr	r3, [pc, #328]	; (8003208 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80030be:	2201      	movs	r2, #1
 80030c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80030c2:	f7ff f851 	bl	8002168 <HAL_GetTick>
 80030c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030c8:	e008      	b.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80030ca:	f7ff f84d 	bl	8002168 <HAL_GetTick>
 80030ce:	4602      	mov	r2, r0
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	1ad3      	subs	r3, r2, r3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d901      	bls.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e090      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80030dc:	4b4b      	ldr	r3, [pc, #300]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d0f0      	beq.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	f000 8083 	beq.w	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b44      	ldr	r3, [pc, #272]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a43      	ldr	r2, [pc, #268]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b41      	ldr	r3, [pc, #260]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003112:	4b3f      	ldr	r3, [pc, #252]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3e      	ldr	r2, [pc, #248]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800311e:	f7ff f823 	bl	8002168 <HAL_GetTick>
 8003122:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003126:	f7ff f81f 	bl	8002168 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	697b      	ldr	r3, [r7, #20]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e062      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003138:	4b35      	ldr	r3, [pc, #212]	; (8003210 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d0f0      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003144:	4b31      	ldr	r3, [pc, #196]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d02f      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800315c:	693a      	ldr	r2, [r7, #16]
 800315e:	429a      	cmp	r2, r3
 8003160:	d028      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003162:	4b2a      	ldr	r3, [pc, #168]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003166:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800316a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800316c:	4b29      	ldr	r3, [pc, #164]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800316e:	2201      	movs	r2, #1
 8003170:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003172:	4b28      	ldr	r3, [pc, #160]	; (8003214 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003174:	2200      	movs	r2, #0
 8003176:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003178:	4a24      	ldr	r2, [pc, #144]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800317a:	693b      	ldr	r3, [r7, #16]
 800317c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003182:	f003 0301 	and.w	r3, r3, #1
 8003186:	2b01      	cmp	r3, #1
 8003188:	d114      	bne.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800318a:	f7fe ffed 	bl	8002168 <HAL_GetTick>
 800318e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003190:	e00a      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe ffe9 	bl	8002168 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e02a      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031a8:	4b18      	ldr	r3, [pc, #96]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ac:	f003 0302 	and.w	r3, r3, #2
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ee      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	68db      	ldr	r3, [r3, #12]
 80031b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c0:	d10d      	bne.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80031c2:	4b12      	ldr	r3, [pc, #72]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	68db      	ldr	r3, [r3, #12]
 80031ce:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80031d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d6:	490d      	ldr	r1, [pc, #52]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031d8:	4313      	orrs	r3, r2
 80031da:	608b      	str	r3, [r1, #8]
 80031dc:	e005      	b.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x196>
 80031de:	4b0b      	ldr	r3, [pc, #44]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	4a0a      	ldr	r2, [pc, #40]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031e4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80031e8:	6093      	str	r3, [r2, #8]
 80031ea:	4b08      	ldr	r3, [pc, #32]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031f6:	4905      	ldr	r1, [pc, #20]	; (800320c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3718      	adds	r7, #24
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	42470068 	.word	0x42470068
 800320c:	40023800 	.word	0x40023800
 8003210:	40007000 	.word	0x40007000
 8003214:	42470e40 	.word	0x42470e40

08003218 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b082      	sub	sp, #8
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d101      	bne.n	800322a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e083      	b.n	8003332 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	7f5b      	ldrb	r3, [r3, #29]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	2b00      	cmp	r3, #0
 8003232:	d105      	bne.n	8003240 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2200      	movs	r2, #0
 8003238:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f7fe fd7a 	bl	8001d34 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2202      	movs	r2, #2
 8003244:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	22ca      	movs	r2, #202	; 0xca
 800324c:	625a      	str	r2, [r3, #36]	; 0x24
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2253      	movs	r2, #83	; 0x53
 8003254:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 f897 	bl	800338a <RTC_EnterInitMode>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d008      	beq.n	8003274 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	22ff      	movs	r2, #255	; 0xff
 8003268:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2204      	movs	r2, #4
 800326e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e05e      	b.n	8003332 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	687a      	ldr	r2, [r7, #4]
 800327c:	6812      	ldr	r2, [r2, #0]
 800327e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8003282:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003286:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6899      	ldr	r1, [r3, #8]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	695b      	ldr	r3, [r3, #20]
 800329c:	431a      	orrs	r2, r3
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	430a      	orrs	r2, r1
 80032a4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	68d2      	ldr	r2, [r2, #12]
 80032ae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6919      	ldr	r1, [r3, #16]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	041a      	lsls	r2, r3, #16
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68da      	ldr	r2, [r3, #12]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 0320 	and.w	r3, r3, #32
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d10e      	bne.n	8003300 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f829 	bl	800333a <HAL_RTC_WaitForSynchro>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d008      	beq.n	8003300 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	22ff      	movs	r2, #255	; 0xff
 80032f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2204      	movs	r2, #4
 80032fa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e018      	b.n	8003332 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800330e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	699a      	ldr	r2, [r3, #24]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	22ff      	movs	r2, #255	; 0xff
 8003328:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2201      	movs	r2, #1
 800332e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8003330:	2300      	movs	r3, #0
  }
}
 8003332:	4618      	mov	r0, r3
 8003334:	3708      	adds	r7, #8
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}

0800333a <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b084      	sub	sp, #16
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003342:	2300      	movs	r3, #0
 8003344:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	68da      	ldr	r2, [r3, #12]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003354:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003356:	f7fe ff07 	bl	8002168 <HAL_GetTick>
 800335a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800335c:	e009      	b.n	8003372 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800335e:	f7fe ff03 	bl	8002168 <HAL_GetTick>
 8003362:	4602      	mov	r2, r0
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	1ad3      	subs	r3, r2, r3
 8003368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800336c:	d901      	bls.n	8003372 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800336e:	2303      	movs	r3, #3
 8003370:	e007      	b.n	8003382 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0320 	and.w	r3, r3, #32
 800337c:	2b00      	cmp	r3, #0
 800337e:	d0ee      	beq.n	800335e <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003392:	2300      	movs	r3, #0
 8003394:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d119      	bne.n	80033d8 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f04f 32ff 	mov.w	r2, #4294967295
 80033ac:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80033ae:	f7fe fedb 	bl	8002168 <HAL_GetTick>
 80033b2:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033b4:	e009      	b.n	80033ca <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80033b6:	f7fe fed7 	bl	8002168 <HAL_GetTick>
 80033ba:	4602      	mov	r2, r0
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80033c4:	d901      	bls.n	80033ca <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e007      	b.n	80033da <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	68db      	ldr	r3, [r3, #12]
 80033d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d0ee      	beq.n	80033b6 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b082      	sub	sp, #8
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e056      	b.n	80034a2 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d106      	bne.n	8003414 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f7fe fca6 	bl	8001d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800342a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	431a      	orrs	r2, r3
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	691b      	ldr	r3, [r3, #16]
 8003440:	431a      	orrs	r2, r3
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	699b      	ldr	r3, [r3, #24]
 800344c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69db      	ldr	r3, [r3, #28]
 8003456:	431a      	orrs	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a1b      	ldr	r3, [r3, #32]
 800345c:	ea42 0103 	orr.w	r1, r2, r3
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	430a      	orrs	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	699b      	ldr	r3, [r3, #24]
 8003470:	0c1b      	lsrs	r3, r3, #16
 8003472:	f003 0104 	and.w	r1, r3, #4
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	430a      	orrs	r2, r1
 8003480:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	69da      	ldr	r2, [r3, #28]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003490:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80034a0:	2300      	movs	r3, #0
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3708      	adds	r7, #8
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b08c      	sub	sp, #48	; 0x30
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	60f8      	str	r0, [r7, #12]
 80034b2:	60b9      	str	r1, [r7, #8]
 80034b4:	607a      	str	r2, [r7, #4]
 80034b6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034b8:	2301      	movs	r3, #1
 80034ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d101      	bne.n	80034d0 <HAL_SPI_TransmitReceive+0x26>
 80034cc:	2302      	movs	r3, #2
 80034ce:	e18a      	b.n	80037e6 <HAL_SPI_TransmitReceive+0x33c>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034d8:	f7fe fe46 	bl	8002168 <HAL_GetTick>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80034e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d00f      	beq.n	800351a <HAL_SPI_TransmitReceive+0x70>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003500:	d107      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d103      	bne.n	8003512 <HAL_SPI_TransmitReceive+0x68>
 800350a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003512:	2302      	movs	r3, #2
 8003514:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003518:	e15b      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d005      	beq.n	800352c <HAL_SPI_TransmitReceive+0x82>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d002      	beq.n	800352c <HAL_SPI_TransmitReceive+0x82>
 8003526:	887b      	ldrh	r3, [r7, #2]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d103      	bne.n	8003534 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003532:	e14e      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b04      	cmp	r3, #4
 800353e:	d003      	beq.n	8003548 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2205      	movs	r2, #5
 8003544:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	2200      	movs	r2, #0
 800354c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	887a      	ldrh	r2, [r7, #2]
 8003558:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	887a      	ldrh	r2, [r7, #2]
 800355e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	68ba      	ldr	r2, [r7, #8]
 8003564:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	887a      	ldrh	r2, [r7, #2]
 800356a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	887a      	ldrh	r2, [r7, #2]
 8003570:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2200      	movs	r2, #0
 8003576:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003588:	2b40      	cmp	r3, #64	; 0x40
 800358a:	d007      	beq.n	800359c <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800359a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80035a4:	d178      	bne.n	8003698 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d002      	beq.n	80035b4 <HAL_SPI_TransmitReceive+0x10a>
 80035ae:	8b7b      	ldrh	r3, [r7, #26]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d166      	bne.n	8003682 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b8:	881a      	ldrh	r2, [r3, #0]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c4:	1c9a      	adds	r2, r3, #2
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ce:	b29b      	uxth	r3, r3
 80035d0:	3b01      	subs	r3, #1
 80035d2:	b29a      	uxth	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035d8:	e053      	b.n	8003682 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0302 	and.w	r3, r3, #2
 80035e4:	2b02      	cmp	r3, #2
 80035e6:	d11b      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x176>
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_SPI_TransmitReceive+0x176>
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d113      	bne.n	8003620 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fc:	881a      	ldrh	r2, [r3, #0]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	1c9a      	adds	r2, r3, #2
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800361c:	2300      	movs	r3, #0
 800361e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f003 0301 	and.w	r3, r3, #1
 800362a:	2b01      	cmp	r3, #1
 800362c:	d119      	bne.n	8003662 <HAL_SPI_TransmitReceive+0x1b8>
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003632:	b29b      	uxth	r3, r3
 8003634:	2b00      	cmp	r3, #0
 8003636:	d014      	beq.n	8003662 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68da      	ldr	r2, [r3, #12]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003642:	b292      	uxth	r2, r2
 8003644:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800364a:	1c9a      	adds	r2, r3, #2
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800365e:	2301      	movs	r3, #1
 8003660:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003662:	f7fe fd81 	bl	8002168 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800366e:	429a      	cmp	r2, r3
 8003670:	d807      	bhi.n	8003682 <HAL_SPI_TransmitReceive+0x1d8>
 8003672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003678:	d003      	beq.n	8003682 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003680:	e0a7      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003686:	b29b      	uxth	r3, r3
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1a6      	bne.n	80035da <HAL_SPI_TransmitReceive+0x130>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003690:	b29b      	uxth	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1a1      	bne.n	80035da <HAL_SPI_TransmitReceive+0x130>
 8003696:	e07c      	b.n	8003792 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x1fc>
 80036a0:	8b7b      	ldrh	r3, [r7, #26]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d16b      	bne.n	800377e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	330c      	adds	r3, #12
 80036b0:	7812      	ldrb	r2, [r2, #0]
 80036b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b8:	1c5a      	adds	r2, r3, #1
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036cc:	e057      	b.n	800377e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b02      	cmp	r3, #2
 80036da:	d11c      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x26c>
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d017      	beq.n	8003716 <HAL_SPI_TransmitReceive+0x26c>
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d114      	bne.n	8003716 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	330c      	adds	r3, #12
 80036f6:	7812      	ldrb	r2, [r2, #0]
 80036f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fe:	1c5a      	adds	r2, r3, #1
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003708:	b29b      	uxth	r3, r3
 800370a:	3b01      	subs	r3, #1
 800370c:	b29a      	uxth	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b01      	cmp	r3, #1
 8003722:	d119      	bne.n	8003758 <HAL_SPI_TransmitReceive+0x2ae>
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003728:	b29b      	uxth	r3, r3
 800372a:	2b00      	cmp	r3, #0
 800372c:	d014      	beq.n	8003758 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	68da      	ldr	r2, [r3, #12]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003738:	b2d2      	uxtb	r2, r2
 800373a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800374a:	b29b      	uxth	r3, r3
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003754:	2301      	movs	r3, #1
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003758:	f7fe fd06 	bl	8002168 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003764:	429a      	cmp	r2, r3
 8003766:	d803      	bhi.n	8003770 <HAL_SPI_TransmitReceive+0x2c6>
 8003768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800376a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800376e:	d102      	bne.n	8003776 <HAL_SPI_TransmitReceive+0x2cc>
 8003770:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003772:	2b00      	cmp	r3, #0
 8003774:	d103      	bne.n	800377e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800377c:	e029      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003782:	b29b      	uxth	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d1a2      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x224>
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800378c:	b29b      	uxth	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d19d      	bne.n	80036ce <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003794:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003796:	68f8      	ldr	r0, [r7, #12]
 8003798:	f000 f894 	bl	80038c4 <SPI_EndRxTxTransaction>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d006      	beq.n	80037b0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2220      	movs	r2, #32
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80037ae:	e010      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10b      	bne.n	80037d0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	617b      	str	r3, [r7, #20]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	e000      	b.n	80037d2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80037d0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80037e2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3730      	adds	r7, #48	; 0x30
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}

080037ee <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	603b      	str	r3, [r7, #0]
 80037fa:	4613      	mov	r3, r2
 80037fc:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fe:	e04c      	b.n	800389a <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003806:	d048      	beq.n	800389a <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003808:	f7fe fcae 	bl	8002168 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	683a      	ldr	r2, [r7, #0]
 8003814:	429a      	cmp	r2, r3
 8003816:	d902      	bls.n	800381e <SPI_WaitFlagStateUntilTimeout+0x30>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d13d      	bne.n	800389a <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800382c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003836:	d111      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0x6e>
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003840:	d004      	beq.n	800384c <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800384a:	d107      	bne.n	800385c <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003864:	d10f      	bne.n	8003886 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003874:	601a      	str	r2, [r3, #0]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003884:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2201      	movs	r2, #1
 800388a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e00f      	b.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4013      	ands	r3, r2
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	bf0c      	ite	eq
 80038aa:	2301      	moveq	r3, #1
 80038ac:	2300      	movne	r3, #0
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	461a      	mov	r2, r3
 80038b2:	79fb      	ldrb	r3, [r7, #7]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d1a3      	bne.n	8003800 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3710      	adds	r7, #16
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}
	...

080038c4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80038d0:	4b1b      	ldr	r3, [pc, #108]	; (8003940 <SPI_EndRxTxTransaction+0x7c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <SPI_EndRxTxTransaction+0x80>)
 80038d6:	fba2 2303 	umull	r2, r3, r2, r3
 80038da:	0d5b      	lsrs	r3, r3, #21
 80038dc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80038e0:	fb02 f303 	mul.w	r3, r2, r3
 80038e4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038ee:	d112      	bne.n	8003916 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	2200      	movs	r2, #0
 80038f8:	2180      	movs	r1, #128	; 0x80
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f7ff ff77 	bl	80037ee <SPI_WaitFlagStateUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800390a:	f043 0220 	orr.w	r2, r3, #32
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e00f      	b.n	8003936 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	3b01      	subs	r3, #1
 8003920:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800392c:	2b80      	cmp	r3, #128	; 0x80
 800392e:	d0f2      	beq.n	8003916 <SPI_EndRxTxTransaction+0x52>
 8003930:	e000      	b.n	8003934 <SPI_EndRxTxTransaction+0x70>
        break;
 8003932:	bf00      	nop
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}
 800393e:	bf00      	nop
 8003940:	20000004 	.word	0x20000004
 8003944:	165e9f81 	.word	0x165e9f81

08003948 <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d101      	bne.n	800395e <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	e034      	b.n	80039c8 <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8003964:	b2db      	uxtb	r3, r3
 8003966:	2b00      	cmp	r3, #0
 8003968:	d106      	bne.n	8003978 <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f7fe faaa 	bl	8001ecc <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681a      	ldr	r2, [r3, #0]
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	3308      	adds	r3, #8
 8003980:	4619      	mov	r1, r3
 8003982:	4610      	mov	r0, r2
 8003984:	f000 fcec 	bl	8004360 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6818      	ldr	r0, [r3, #0]
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	461a      	mov	r2, r3
 8003992:	68b9      	ldr	r1, [r7, #8]
 8003994:	f000 fd36 	bl	8004404 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6858      	ldr	r0, [r3, #4]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	6879      	ldr	r1, [r7, #4]
 80039a6:	f000 fd6b 	bl	8004480 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	6892      	ldr	r2, [r2, #8]
 80039b2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	6892      	ldr	r2, [r2, #8]
 80039be:	f041 0101 	orr.w	r1, r1, #1
 80039c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3710      	adds	r7, #16
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e01d      	b.n	8003a1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d106      	bne.n	80039fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f7fe f9fa 	bl	8001df0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2202      	movs	r2, #2
 8003a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	3304      	adds	r3, #4
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4610      	mov	r0, r2
 8003a10:	f000 fa56 	bl	8003ec0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}

08003a26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68da      	ldr	r2, [r3, #12]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f042 0201 	orr.w	r2, r2, #1
 8003a3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d007      	beq.n	8003a60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr

08003a6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	691b      	ldr	r3, [r3, #16]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b02      	cmp	r3, #2
 8003a82:	d122      	bne.n	8003aca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b02      	cmp	r3, #2
 8003a90:	d11b      	bne.n	8003aca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0202 	mvn.w	r2, #2
 8003a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	699b      	ldr	r3, [r3, #24]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 f9e7 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003ab6:	e005      	b.n	8003ac4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 f9d9 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f9ea 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f003 0304 	and.w	r3, r3, #4
 8003ad4:	2b04      	cmp	r3, #4
 8003ad6:	d122      	bne.n	8003b1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d11b      	bne.n	8003b1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f06f 0204 	mvn.w	r2, #4
 8003aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2202      	movs	r2, #2
 8003af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 f9bd 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003b0a:	e005      	b.n	8003b18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9af 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b12:	6878      	ldr	r0, [r7, #4]
 8003b14:	f000 f9c0 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d122      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	68db      	ldr	r3, [r3, #12]
 8003b32:	f003 0308 	and.w	r3, r3, #8
 8003b36:	2b08      	cmp	r3, #8
 8003b38:	d11b      	bne.n	8003b72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f06f 0208 	mvn.w	r2, #8
 8003b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2204      	movs	r2, #4
 8003b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69db      	ldr	r3, [r3, #28]
 8003b50:	f003 0303 	and.w	r3, r3, #3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d003      	beq.n	8003b60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f993 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003b5e:	e005      	b.n	8003b6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f000 f985 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f996 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	691b      	ldr	r3, [r3, #16]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b10      	cmp	r3, #16
 8003b7e:	d122      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	68db      	ldr	r3, [r3, #12]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b10      	cmp	r3, #16
 8003b8c:	d11b      	bne.n	8003bc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f06f 0210 	mvn.w	r2, #16
 8003b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2208      	movs	r2, #8
 8003b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	f000 f969 	bl	8003e84 <HAL_TIM_IC_CaptureCallback>
 8003bb2:	e005      	b.n	8003bc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f95b 	bl	8003e70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f96c 	bl	8003e98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691b      	ldr	r3, [r3, #16]
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b01      	cmp	r3, #1
 8003bd2:	d10e      	bne.n	8003bf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0301 	and.w	r3, r3, #1
 8003bde:	2b01      	cmp	r3, #1
 8003be0:	d107      	bne.n	8003bf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f06f 0201 	mvn.w	r2, #1
 8003bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7fe f85f 	bl	8001cb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfc:	2b80      	cmp	r3, #128	; 0x80
 8003bfe:	d10e      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b80      	cmp	r3, #128	; 0x80
 8003c0c:	d107      	bne.n	8003c1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 fb97 	bl	800434c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c28:	2b40      	cmp	r3, #64	; 0x40
 8003c2a:	d10e      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c36:	2b40      	cmp	r3, #64	; 0x40
 8003c38:	d107      	bne.n	8003c4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f931 	bl	8003eac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	691b      	ldr	r3, [r3, #16]
 8003c50:	f003 0320 	and.w	r3, r3, #32
 8003c54:	2b20      	cmp	r3, #32
 8003c56:	d10e      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	f003 0320 	and.w	r3, r3, #32
 8003c62:	2b20      	cmp	r3, #32
 8003c64:	d107      	bne.n	8003c76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f06f 0220 	mvn.w	r2, #32
 8003c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 fb61 	bl	8004338 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c76:	bf00      	nop
 8003c78:	3708      	adds	r7, #8
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
 8003c86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8e:	2b01      	cmp	r3, #1
 8003c90:	d101      	bne.n	8003c96 <HAL_TIM_ConfigClockSource+0x18>
 8003c92:	2302      	movs	r3, #2
 8003c94:	e0a6      	b.n	8003de4 <HAL_TIM_ConfigClockSource+0x166>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2201      	movs	r2, #1
 8003c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003cb4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cbc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2b40      	cmp	r3, #64	; 0x40
 8003ccc:	d067      	beq.n	8003d9e <HAL_TIM_ConfigClockSource+0x120>
 8003cce:	2b40      	cmp	r3, #64	; 0x40
 8003cd0:	d80b      	bhi.n	8003cea <HAL_TIM_ConfigClockSource+0x6c>
 8003cd2:	2b10      	cmp	r3, #16
 8003cd4:	d073      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x140>
 8003cd6:	2b10      	cmp	r3, #16
 8003cd8:	d802      	bhi.n	8003ce0 <HAL_TIM_ConfigClockSource+0x62>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d06f      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003cde:	e078      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003ce0:	2b20      	cmp	r3, #32
 8003ce2:	d06c      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x140>
 8003ce4:	2b30      	cmp	r3, #48	; 0x30
 8003ce6:	d06a      	beq.n	8003dbe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003ce8:	e073      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cea:	2b70      	cmp	r3, #112	; 0x70
 8003cec:	d00d      	beq.n	8003d0a <HAL_TIM_ConfigClockSource+0x8c>
 8003cee:	2b70      	cmp	r3, #112	; 0x70
 8003cf0:	d804      	bhi.n	8003cfc <HAL_TIM_ConfigClockSource+0x7e>
 8003cf2:	2b50      	cmp	r3, #80	; 0x50
 8003cf4:	d033      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0xe0>
 8003cf6:	2b60      	cmp	r3, #96	; 0x60
 8003cf8:	d041      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003cfa:	e06a      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d00:	d066      	beq.n	8003dd0 <HAL_TIM_ConfigClockSource+0x152>
 8003d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d06:	d017      	beq.n	8003d38 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d08:	e063      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6818      	ldr	r0, [r3, #0]
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6899      	ldr	r1, [r3, #8]
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685a      	ldr	r2, [r3, #4]
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	f000 fa71 	bl	8004200 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	68fa      	ldr	r2, [r7, #12]
 8003d34:	609a      	str	r2, [r3, #8]
      break;
 8003d36:	e04c      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6818      	ldr	r0, [r3, #0]
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	6899      	ldr	r1, [r3, #8]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	685a      	ldr	r2, [r3, #4]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	f000 fa5a 	bl	8004200 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	689a      	ldr	r2, [r3, #8]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d5a:	609a      	str	r2, [r3, #8]
      break;
 8003d5c:	e039      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 f9ce 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2150      	movs	r1, #80	; 0x50
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fa27 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e029      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6818      	ldr	r0, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	6859      	ldr	r1, [r3, #4]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	68db      	ldr	r3, [r3, #12]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	f000 f9ed 	bl	800416a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2160      	movs	r1, #96	; 0x60
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fa17 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003d9c:	e019      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6818      	ldr	r0, [r3, #0]
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	6859      	ldr	r1, [r3, #4]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	461a      	mov	r2, r3
 8003dac:	f000 f9ae 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2140      	movs	r1, #64	; 0x40
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fa07 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003dbc:	e009      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	4610      	mov	r0, r2
 8003dca:	f000 f9fe 	bl	80041ca <TIM_ITRx_SetConfig>
      break;
 8003dce:	e000      	b.n	8003dd2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003dd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2201      	movs	r2, #1
 8003dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003de2:	2300      	movs	r3, #0
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	3710      	adds	r7, #16
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bd80      	pop	{r7, pc}

08003dec <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
 8003df4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e031      	b.n	8003e68 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2202      	movs	r2, #2
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8f2 	bl	8004000 <TIM_SlaveTimer_SetConfig>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d009      	beq.n	8003e36 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e018      	b.n	8003e68 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68da      	ldr	r2, [r3, #12]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e44:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68da      	ldr	r2, [r3, #12]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e54:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e66:	2300      	movs	r3, #0
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3708      	adds	r7, #8
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a40      	ldr	r2, [pc, #256]	; (8003fd4 <TIM_Base_SetConfig+0x114>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d013      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ede:	d00f      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3d      	ldr	r2, [pc, #244]	; (8003fd8 <TIM_Base_SetConfig+0x118>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d00b      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3c      	ldr	r2, [pc, #240]	; (8003fdc <TIM_Base_SetConfig+0x11c>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d007      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3b      	ldr	r2, [pc, #236]	; (8003fe0 <TIM_Base_SetConfig+0x120>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d003      	beq.n	8003f00 <TIM_Base_SetConfig+0x40>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a3a      	ldr	r2, [pc, #232]	; (8003fe4 <TIM_Base_SetConfig+0x124>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d108      	bne.n	8003f12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	68fa      	ldr	r2, [r7, #12]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	4a2f      	ldr	r2, [pc, #188]	; (8003fd4 <TIM_Base_SetConfig+0x114>)
 8003f16:	4293      	cmp	r3, r2
 8003f18:	d02b      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f20:	d027      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2c      	ldr	r2, [pc, #176]	; (8003fd8 <TIM_Base_SetConfig+0x118>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d023      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2b      	ldr	r2, [pc, #172]	; (8003fdc <TIM_Base_SetConfig+0x11c>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01f      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a2a      	ldr	r2, [pc, #168]	; (8003fe0 <TIM_Base_SetConfig+0x120>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d01b      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a29      	ldr	r2, [pc, #164]	; (8003fe4 <TIM_Base_SetConfig+0x124>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d017      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a28      	ldr	r2, [pc, #160]	; (8003fe8 <TIM_Base_SetConfig+0x128>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d013      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a27      	ldr	r2, [pc, #156]	; (8003fec <TIM_Base_SetConfig+0x12c>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00f      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a26      	ldr	r2, [pc, #152]	; (8003ff0 <TIM_Base_SetConfig+0x130>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d00b      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a25      	ldr	r2, [pc, #148]	; (8003ff4 <TIM_Base_SetConfig+0x134>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d007      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a24      	ldr	r2, [pc, #144]	; (8003ff8 <TIM_Base_SetConfig+0x138>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d003      	beq.n	8003f72 <TIM_Base_SetConfig+0xb2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	4a23      	ldr	r2, [pc, #140]	; (8003ffc <TIM_Base_SetConfig+0x13c>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d108      	bne.n	8003f84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	68db      	ldr	r3, [r3, #12]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4313      	orrs	r3, r2
 8003f82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	695b      	ldr	r3, [r3, #20]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681a      	ldr	r2, [r3, #0]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0a      	ldr	r2, [pc, #40]	; (8003fd4 <TIM_Base_SetConfig+0x114>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d003      	beq.n	8003fb8 <TIM_Base_SetConfig+0xf8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	; (8003fe4 <TIM_Base_SetConfig+0x124>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d103      	bne.n	8003fc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	691a      	ldr	r2, [r3, #16]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]
}
 8003fc6:	bf00      	nop
 8003fc8:	3714      	adds	r7, #20
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40010400 	.word	0x40010400
 8003fe8:	40014000 	.word	0x40014000
 8003fec:	40014400 	.word	0x40014400
 8003ff0:	40014800 	.word	0x40014800
 8003ff4:	40001800 	.word	0x40001800
 8003ff8:	40001c00 	.word	0x40001c00
 8003ffc:	40002000 	.word	0x40002000

08004000 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004018:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	f023 0307 	bic.w	r3, r3, #7
 800402a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	2b30      	cmp	r3, #48	; 0x30
 8004044:	d05c      	beq.n	8004100 <TIM_SlaveTimer_SetConfig+0x100>
 8004046:	2b30      	cmp	r3, #48	; 0x30
 8004048:	d806      	bhi.n	8004058 <TIM_SlaveTimer_SetConfig+0x58>
 800404a:	2b10      	cmp	r3, #16
 800404c:	d058      	beq.n	8004100 <TIM_SlaveTimer_SetConfig+0x100>
 800404e:	2b20      	cmp	r3, #32
 8004050:	d056      	beq.n	8004100 <TIM_SlaveTimer_SetConfig+0x100>
 8004052:	2b00      	cmp	r3, #0
 8004054:	d054      	beq.n	8004100 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8004056:	e054      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004058:	2b50      	cmp	r3, #80	; 0x50
 800405a:	d03d      	beq.n	80040d8 <TIM_SlaveTimer_SetConfig+0xd8>
 800405c:	2b50      	cmp	r3, #80	; 0x50
 800405e:	d802      	bhi.n	8004066 <TIM_SlaveTimer_SetConfig+0x66>
 8004060:	2b40      	cmp	r3, #64	; 0x40
 8004062:	d010      	beq.n	8004086 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8004064:	e04d      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8004066:	2b60      	cmp	r3, #96	; 0x60
 8004068:	d040      	beq.n	80040ec <TIM_SlaveTimer_SetConfig+0xec>
 800406a:	2b70      	cmp	r3, #112	; 0x70
 800406c:	d000      	beq.n	8004070 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800406e:	e048      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6818      	ldr	r0, [r3, #0]
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	68d9      	ldr	r1, [r3, #12]
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	f000 f8be 	bl	8004200 <TIM_ETR_SetConfig>
      break;
 8004084:	e03d      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b05      	cmp	r3, #5
 800408c:	d101      	bne.n	8004092 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e038      	b.n	8004104 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	6a1a      	ldr	r2, [r3, #32]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 0201 	bic.w	r2, r2, #1
 80040a8:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80040b8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	011b      	lsls	r3, r3, #4
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	693a      	ldr	r2, [r7, #16]
 80040d4:	621a      	str	r2, [r3, #32]
      break;
 80040d6:	e014      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6818      	ldr	r0, [r3, #0]
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	691b      	ldr	r3, [r3, #16]
 80040e4:	461a      	mov	r2, r3
 80040e6:	f000 f811 	bl	800410c <TIM_TI1_ConfigInputStage>
      break;
 80040ea:	e00a      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691b      	ldr	r3, [r3, #16]
 80040f8:	461a      	mov	r2, r3
 80040fa:	f000 f836 	bl	800416a <TIM_TI2_ConfigInputStage>
      break;
 80040fe:	e000      	b.n	8004102 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 8004100:	bf00      	nop
  }
  return HAL_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b480      	push	{r7}
 800410e:	b087      	sub	sp, #28
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	f023 0201 	bic.w	r2, r3, #1
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	699b      	ldr	r3, [r3, #24]
 800412e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004136:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	011b      	lsls	r3, r3, #4
 800413c:	693a      	ldr	r2, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 030a 	bic.w	r3, r3, #10
 8004148:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	4313      	orrs	r3, r2
 8004150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	697a      	ldr	r2, [r7, #20]
 800415c:	621a      	str	r2, [r3, #32]
}
 800415e:	bf00      	nop
 8004160:	371c      	adds	r7, #28
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr

0800416a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416a:	b480      	push	{r7}
 800416c:	b087      	sub	sp, #28
 800416e:	af00      	add	r7, sp, #0
 8004170:	60f8      	str	r0, [r7, #12]
 8004172:	60b9      	str	r1, [r7, #8]
 8004174:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	6a1b      	ldr	r3, [r3, #32]
 800417a:	f023 0210 	bic.w	r2, r3, #16
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	699b      	ldr	r3, [r3, #24]
 8004186:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a1b      	ldr	r3, [r3, #32]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004194:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
 80041d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	f043 0307 	orr.w	r3, r3, #7
 80041ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	609a      	str	r2, [r3, #8]
}
 80041f4:	bf00      	nop
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004200:	b480      	push	{r7}
 8004202:	b087      	sub	sp, #28
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
 800420c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800421a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	021a      	lsls	r2, r3, #8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	431a      	orrs	r2, r3
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	4313      	orrs	r3, r2
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	4313      	orrs	r3, r2
 800422c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	697a      	ldr	r2, [r7, #20]
 8004232:	609a      	str	r2, [r3, #8]
}
 8004234:	bf00      	nop
 8004236:	371c      	adds	r7, #28
 8004238:	46bd      	mov	sp, r7
 800423a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423e:	4770      	bx	lr

08004240 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004240:	b480      	push	{r7}
 8004242:	b085      	sub	sp, #20
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004250:	2b01      	cmp	r3, #1
 8004252:	d101      	bne.n	8004258 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004254:	2302      	movs	r3, #2
 8004256:	e05a      	b.n	800430e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	4a21      	ldr	r2, [pc, #132]	; (800431c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d022      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a4:	d01d      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	4a1d      	ldr	r2, [pc, #116]	; (8004320 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d018      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a1b      	ldr	r2, [pc, #108]	; (8004324 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d013      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a1a      	ldr	r2, [pc, #104]	; (8004328 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d00e      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a18      	ldr	r2, [pc, #96]	; (800432c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d009      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a17      	ldr	r2, [pc, #92]	; (8004330 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d004      	beq.n	80042e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a15      	ldr	r2, [pc, #84]	; (8004334 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d10c      	bne.n	80042fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68ba      	ldr	r2, [r7, #8]
 80042fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40000400 	.word	0x40000400
 8004324:	40000800 	.word	0x40000800
 8004328:	40000c00 	.word	0x40000c00
 800432c:	40010400 	.word	0x40010400
 8004330:	40014000 	.word	0x40014000
 8004334:	40001800 	.word	0x40001800

08004338 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004340:	bf00      	nop
 8004342:	370c      	adds	r7, #12
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 800436a:	2300      	movs	r3, #0
 800436c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004378:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	4b20      	ldr	r3, [pc, #128]	; (8004400 <FSMC_NORSRAM_Init+0xa0>)
 800437e:	4013      	ands	r3, r2
 8004380:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 800438a:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8004390:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8004396:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 800439c:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 80043a2:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 80043a8:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 80043ae:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 80043b4:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 80043ba:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 80043c0:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 80043c6:	431a      	orrs	r2, r3
                     Init->WriteBurst
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 80043cc:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b08      	cmp	r3, #8
 80043da:	d103      	bne.n	80043e4 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043e2:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68f9      	ldr	r1, [r7, #12]
 80043ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	fff00080 	.word	0xfff00080

08004404 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8004410:	2300      	movs	r3, #0
 8004412:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	1c5a      	adds	r2, r3, #1
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800441e:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8004426:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8004432:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 800443a:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8004442:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	3b01      	subs	r3, #1
 800444a:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 800444c:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	695b      	ldr	r3, [r3, #20]
 8004452:	3b02      	subs	r3, #2
 8004454:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8004456:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 800445c:	4313      	orrs	r3, r2
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	4313      	orrs	r3, r2
 8004462:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	1c5a      	adds	r2, r3, #1
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6979      	ldr	r1, [r7, #20]
 800446c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	371c      	adds	r7, #28
 8004476:	46bd      	mov	sp, r7
 8004478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447c:	4770      	bx	lr
	...

08004480 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8004480:	b480      	push	{r7}
 8004482:	b087      	sub	sp, #28
 8004484:	af00      	add	r7, sp, #0
 8004486:	60f8      	str	r0, [r7, #12]
 8004488:	60b9      	str	r1, [r7, #8]
 800448a:	607a      	str	r2, [r7, #4]
 800448c:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004498:	d122      	bne.n	80044e0 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044a2:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 80044a4:	697a      	ldr	r2, [r7, #20]
 80044a6:	4b15      	ldr	r3, [pc, #84]	; (80044fc <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 80044a8:	4013      	ands	r3, r2
 80044aa:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044b6:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 80044be:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 80044c6:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 80044cc:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6979      	ldr	r1, [r7, #20]
 80044da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80044de:	e005      	b.n	80044ec <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80044e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	cff00000 	.word	0xcff00000

08004500 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8004504:	bf00      	nop
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004510:	b480      	push	{r7}
 8004512:	b085      	sub	sp, #20
 8004514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004516:	f3ef 8305 	mrs	r3, IPSR
 800451a:	60bb      	str	r3, [r7, #8]
  return(result);
 800451c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800451e:	2b00      	cmp	r3, #0
 8004520:	d10f      	bne.n	8004542 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004522:	f3ef 8310 	mrs	r3, PRIMASK
 8004526:	607b      	str	r3, [r7, #4]
  return(result);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d105      	bne.n	800453a <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800452e:	f3ef 8311 	mrs	r3, BASEPRI
 8004532:	603b      	str	r3, [r7, #0]
  return(result);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <osKernelInitialize+0x3a>
 800453a:	4b0e      	ldr	r3, [pc, #56]	; (8004574 <osKernelInitialize+0x64>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b02      	cmp	r3, #2
 8004540:	d103      	bne.n	800454a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8004542:	f06f 0305 	mvn.w	r3, #5
 8004546:	60fb      	str	r3, [r7, #12]
 8004548:	e00c      	b.n	8004564 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800454a:	4b0a      	ldr	r3, [pc, #40]	; (8004574 <osKernelInitialize+0x64>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d105      	bne.n	800455e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004552:	4b08      	ldr	r3, [pc, #32]	; (8004574 <osKernelInitialize+0x64>)
 8004554:	2201      	movs	r2, #1
 8004556:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004558:	2300      	movs	r3, #0
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e002      	b.n	8004564 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800455e:	f04f 33ff 	mov.w	r3, #4294967295
 8004562:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8004564:	68fb      	ldr	r3, [r7, #12]
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	20000114 	.word	0x20000114

08004578 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004578:	b580      	push	{r7, lr}
 800457a:	b084      	sub	sp, #16
 800457c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800457e:	f3ef 8305 	mrs	r3, IPSR
 8004582:	60bb      	str	r3, [r7, #8]
  return(result);
 8004584:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10f      	bne.n	80045aa <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800458a:	f3ef 8310 	mrs	r3, PRIMASK
 800458e:	607b      	str	r3, [r7, #4]
  return(result);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d105      	bne.n	80045a2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004596:	f3ef 8311 	mrs	r3, BASEPRI
 800459a:	603b      	str	r3, [r7, #0]
  return(result);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d007      	beq.n	80045b2 <osKernelStart+0x3a>
 80045a2:	4b0f      	ldr	r3, [pc, #60]	; (80045e0 <osKernelStart+0x68>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b02      	cmp	r3, #2
 80045a8:	d103      	bne.n	80045b2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80045aa:	f06f 0305 	mvn.w	r3, #5
 80045ae:	60fb      	str	r3, [r7, #12]
 80045b0:	e010      	b.n	80045d4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80045b2:	4b0b      	ldr	r3, [pc, #44]	; (80045e0 <osKernelStart+0x68>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d109      	bne.n	80045ce <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80045ba:	f7ff ffa1 	bl	8004500 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80045be:	4b08      	ldr	r3, [pc, #32]	; (80045e0 <osKernelStart+0x68>)
 80045c0:	2202      	movs	r2, #2
 80045c2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80045c4:	f001 f870 	bl	80056a8 <vTaskStartScheduler>
      stat = osOK;
 80045c8:	2300      	movs	r3, #0
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	e002      	b.n	80045d4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80045ce:	f04f 33ff 	mov.w	r3, #4294967295
 80045d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80045d4:	68fb      	ldr	r3, [r7, #12]
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3710      	adds	r7, #16
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop
 80045e0:	20000114 	.word	0x20000114

080045e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b090      	sub	sp, #64	; 0x40
 80045e8:	af04      	add	r7, sp, #16
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80045f0:	2300      	movs	r3, #0
 80045f2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045f4:	f3ef 8305 	mrs	r3, IPSR
 80045f8:	61fb      	str	r3, [r7, #28]
  return(result);
 80045fa:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	f040 808f 	bne.w	8004720 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004602:	f3ef 8310 	mrs	r3, PRIMASK
 8004606:	61bb      	str	r3, [r7, #24]
  return(result);
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d105      	bne.n	800461a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800460e:	f3ef 8311 	mrs	r3, BASEPRI
 8004612:	617b      	str	r3, [r7, #20]
  return(result);
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d003      	beq.n	8004622 <osThreadNew+0x3e>
 800461a:	4b44      	ldr	r3, [pc, #272]	; (800472c <osThreadNew+0x148>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d07e      	beq.n	8004720 <osThreadNew+0x13c>
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d07b      	beq.n	8004720 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800462c:	2318      	movs	r3, #24
 800462e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 8004630:	2300      	movs	r3, #0
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 8004634:	f04f 33ff 	mov.w	r3, #4294967295
 8004638:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d045      	beq.n	80046cc <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d002      	beq.n	800464e <osThreadNew+0x6a>
        name = attr->name;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	699b      	ldr	r3, [r3, #24]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d002      	beq.n	800465c <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	699b      	ldr	r3, [r3, #24]
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800465c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465e:	2b00      	cmp	r3, #0
 8004660:	d008      	beq.n	8004674 <osThreadNew+0x90>
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	2b38      	cmp	r3, #56	; 0x38
 8004666:	d805      	bhi.n	8004674 <osThreadNew+0x90>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <osThreadNew+0x94>
        return (NULL);
 8004674:	2300      	movs	r3, #0
 8004676:	e054      	b.n	8004722 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	695b      	ldr	r3, [r3, #20]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	089b      	lsrs	r3, r3, #2
 8004686:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	689b      	ldr	r3, [r3, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00e      	beq.n	80046ae <osThreadNew+0xca>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b5b      	cmp	r3, #91	; 0x5b
 8004696:	d90a      	bls.n	80046ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800469c:	2b00      	cmp	r3, #0
 800469e:	d006      	beq.n	80046ae <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d002      	beq.n	80046ae <osThreadNew+0xca>
        mem = 1;
 80046a8:	2301      	movs	r3, #1
 80046aa:	623b      	str	r3, [r7, #32]
 80046ac:	e010      	b.n	80046d0 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10c      	bne.n	80046d0 <osThreadNew+0xec>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	68db      	ldr	r3, [r3, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d108      	bne.n	80046d0 <osThreadNew+0xec>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	691b      	ldr	r3, [r3, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d104      	bne.n	80046d0 <osThreadNew+0xec>
          mem = 0;
 80046c6:	2300      	movs	r3, #0
 80046c8:	623b      	str	r3, [r7, #32]
 80046ca:	e001      	b.n	80046d0 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 80046d0:	6a3b      	ldr	r3, [r7, #32]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d110      	bne.n	80046f8 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80046de:	9202      	str	r2, [sp, #8]
 80046e0:	9301      	str	r3, [sp, #4]
 80046e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ec:	68f8      	ldr	r0, [r7, #12]
 80046ee:	f000 fe09 	bl	8005304 <xTaskCreateStatic>
 80046f2:	4603      	mov	r3, r0
 80046f4:	613b      	str	r3, [r7, #16]
 80046f6:	e013      	b.n	8004720 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80046f8:	6a3b      	ldr	r3, [r7, #32]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d110      	bne.n	8004720 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	b29a      	uxth	r2, r3
 8004702:	f107 0310 	add.w	r3, r7, #16
 8004706:	9301      	str	r3, [sp, #4]
 8004708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470a:	9300      	str	r3, [sp, #0]
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004710:	68f8      	ldr	r0, [r7, #12]
 8004712:	f000 fe51 	bl	80053b8 <xTaskCreate>
 8004716:	4603      	mov	r3, r0
 8004718:	2b01      	cmp	r3, #1
 800471a:	d001      	beq.n	8004720 <osThreadNew+0x13c>
          hTask = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004720:	693b      	ldr	r3, [r7, #16]
}
 8004722:	4618      	mov	r0, r3
 8004724:	3730      	adds	r7, #48	; 0x30
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000114 	.word	0x20000114

08004730 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b086      	sub	sp, #24
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004738:	f3ef 8305 	mrs	r3, IPSR
 800473c:	613b      	str	r3, [r7, #16]
  return(result);
 800473e:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10f      	bne.n	8004764 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004744:	f3ef 8310 	mrs	r3, PRIMASK
 8004748:	60fb      	str	r3, [r7, #12]
  return(result);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d105      	bne.n	800475c <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004750:	f3ef 8311 	mrs	r3, BASEPRI
 8004754:	60bb      	str	r3, [r7, #8]
  return(result);
 8004756:	68bb      	ldr	r3, [r7, #8]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d007      	beq.n	800476c <osDelay+0x3c>
 800475c:	4b0a      	ldr	r3, [pc, #40]	; (8004788 <osDelay+0x58>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d103      	bne.n	800476c <osDelay+0x3c>
    stat = osErrorISR;
 8004764:	f06f 0305 	mvn.w	r3, #5
 8004768:	617b      	str	r3, [r7, #20]
 800476a:	e007      	b.n	800477c <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800476c:	2300      	movs	r3, #0
 800476e:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <osDelay+0x4c>
      vTaskDelay(ticks);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 ff62 	bl	8005640 <vTaskDelay>
    }
  }

  return (stat);
 800477c:	697b      	ldr	r3, [r7, #20]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000114 	.word	0x20000114

0800478c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	4a07      	ldr	r2, [pc, #28]	; (80047b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800479c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4a06      	ldr	r2, [pc, #24]	; (80047bc <vApplicationGetIdleTaskMemory+0x30>)
 80047a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2280      	movs	r2, #128	; 0x80
 80047a8:	601a      	str	r2, [r3, #0]
}
 80047aa:	bf00      	nop
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop
 80047b8:	20000118 	.word	0x20000118
 80047bc:	20000174 	.word	0x20000174

080047c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047c0:	b480      	push	{r7}
 80047c2:	b085      	sub	sp, #20
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	60f8      	str	r0, [r7, #12]
 80047c8:	60b9      	str	r1, [r7, #8]
 80047ca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4a07      	ldr	r2, [pc, #28]	; (80047ec <vApplicationGetTimerTaskMemory+0x2c>)
 80047d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4a06      	ldr	r2, [pc, #24]	; (80047f0 <vApplicationGetTimerTaskMemory+0x30>)
 80047d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047de:	601a      	str	r2, [r3, #0]
}
 80047e0:	bf00      	nop
 80047e2:	3714      	adds	r7, #20
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr
 80047ec:	20000374 	.word	0x20000374
 80047f0:	200003d0 	.word	0x200003d0

080047f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047f4:	b480      	push	{r7}
 80047f6:	b083      	sub	sp, #12
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f103 0208 	add.w	r2, r3, #8
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f04f 32ff 	mov.w	r2, #4294967295
 800480c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f103 0208 	add.w	r2, r3, #8
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	f103 0208 	add.w	r2, r3, #8
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004828:	bf00      	nop
 800482a:	370c      	adds	r7, #12
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr

08004834 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004834:	b480      	push	{r7}
 8004836:	b083      	sub	sp, #12
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800484e:	b480      	push	{r7}
 8004850:	b085      	sub	sp, #20
 8004852:	af00      	add	r7, sp, #0
 8004854:	6078      	str	r0, [r7, #4]
 8004856:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68fa      	ldr	r2, [r7, #12]
 8004862:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	683a      	ldr	r2, [r7, #0]
 8004878:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	601a      	str	r2, [r3, #0]
}
 800488a:	bf00      	nop
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004894:	4770      	bx	lr

08004896 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004896:	b480      	push	{r7}
 8004898:	b085      	sub	sp, #20
 800489a:	af00      	add	r7, sp, #0
 800489c:	6078      	str	r0, [r7, #4]
 800489e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048ac:	d103      	bne.n	80048b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	e00c      	b.n	80048d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3308      	adds	r3, #8
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e002      	b.n	80048c4 <vListInsert+0x2e>
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	60fb      	str	r3, [r7, #12]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d2f6      	bcs.n	80048be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	685a      	ldr	r2, [r3, #4]
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	685b      	ldr	r3, [r3, #4]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	683a      	ldr	r2, [r7, #0]
 80048ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	1c5a      	adds	r2, r3, #1
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	601a      	str	r2, [r3, #0]
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr

08004908 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6892      	ldr	r2, [r2, #8]
 800491e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6852      	ldr	r2, [r2, #4]
 8004928:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	429a      	cmp	r2, r3
 8004932:	d103      	bne.n	800493c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	1e5a      	subs	r2, r3, #1
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800495c:	b580      	push	{r7, lr}
 800495e:	b084      	sub	sp, #16
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d109      	bne.n	8004984 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004974:	f383 8811 	msr	BASEPRI, r3
 8004978:	f3bf 8f6f 	isb	sy
 800497c:	f3bf 8f4f 	dsb	sy
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	e7fe      	b.n	8004982 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8004984:	f002 f812 	bl	80069ac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004990:	68f9      	ldr	r1, [r7, #12]
 8004992:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004994:	fb01 f303 	mul.w	r3, r1, r3
 8004998:	441a      	add	r2, r3
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049b4:	3b01      	subs	r3, #1
 80049b6:	68f9      	ldr	r1, [r7, #12]
 80049b8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	441a      	add	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	22ff      	movs	r2, #255	; 0xff
 80049c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	22ff      	movs	r2, #255	; 0xff
 80049d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d114      	bne.n	8004a04 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01a      	beq.n	8004a18 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	3310      	adds	r3, #16
 80049e6:	4618      	mov	r0, r3
 80049e8:	f001 f8de 	bl	8005ba8 <xTaskRemoveFromEventList>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049f2:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <xQueueGenericReset+0xcc>)
 80049f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049f8:	601a      	str	r2, [r3, #0]
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	f3bf 8f6f 	isb	sy
 8004a02:	e009      	b.n	8004a18 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3310      	adds	r3, #16
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff fef3 	bl	80047f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	3324      	adds	r3, #36	; 0x24
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff feee 	bl	80047f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a18:	f001 fff6 	bl	8006a08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a1c:	2301      	movs	r3, #1
}
 8004a1e:	4618      	mov	r0, r3
 8004a20:	3710      	adds	r7, #16
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}
 8004a26:	bf00      	nop
 8004a28:	e000ed04 	.word	0xe000ed04

08004a2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08e      	sub	sp, #56	; 0x38
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d109      	bne.n	8004a54 <xQueueGenericCreateStatic+0x28>
 8004a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a44:	f383 8811 	msr	BASEPRI, r3
 8004a48:	f3bf 8f6f 	isb	sy
 8004a4c:	f3bf 8f4f 	dsb	sy
 8004a50:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a52:	e7fe      	b.n	8004a52 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d109      	bne.n	8004a6e <xQueueGenericCreateStatic+0x42>
 8004a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a5e:	f383 8811 	msr	BASEPRI, r3
 8004a62:	f3bf 8f6f 	isb	sy
 8004a66:	f3bf 8f4f 	dsb	sy
 8004a6a:	627b      	str	r3, [r7, #36]	; 0x24
 8004a6c:	e7fe      	b.n	8004a6c <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d002      	beq.n	8004a7a <xQueueGenericCreateStatic+0x4e>
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <xQueueGenericCreateStatic+0x52>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e000      	b.n	8004a80 <xQueueGenericCreateStatic+0x54>
 8004a7e:	2300      	movs	r3, #0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <xQueueGenericCreateStatic+0x6c>
 8004a84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a88:	f383 8811 	msr	BASEPRI, r3
 8004a8c:	f3bf 8f6f 	isb	sy
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	623b      	str	r3, [r7, #32]
 8004a96:	e7fe      	b.n	8004a96 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d102      	bne.n	8004aa4 <xQueueGenericCreateStatic+0x78>
 8004a9e:	68bb      	ldr	r3, [r7, #8]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <xQueueGenericCreateStatic+0x7c>
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e000      	b.n	8004aaa <xQueueGenericCreateStatic+0x7e>
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d109      	bne.n	8004ac2 <xQueueGenericCreateStatic+0x96>
 8004aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab2:	f383 8811 	msr	BASEPRI, r3
 8004ab6:	f3bf 8f6f 	isb	sy
 8004aba:	f3bf 8f4f 	dsb	sy
 8004abe:	61fb      	str	r3, [r7, #28]
 8004ac0:	e7fe      	b.n	8004ac0 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ac2:	2350      	movs	r3, #80	; 0x50
 8004ac4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	2b50      	cmp	r3, #80	; 0x50
 8004aca:	d009      	beq.n	8004ae0 <xQueueGenericCreateStatic+0xb4>
 8004acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad0:	f383 8811 	msr	BASEPRI, r3
 8004ad4:	f3bf 8f6f 	isb	sy
 8004ad8:	f3bf 8f4f 	dsb	sy
 8004adc:	61bb      	str	r3, [r7, #24]
 8004ade:	e7fe      	b.n	8004ade <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ae0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d00d      	beq.n	8004b08 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004af4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	9300      	str	r3, [sp, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	68b9      	ldr	r1, [r7, #8]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f000 f805 	bl	8004b12 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3730      	adds	r7, #48	; 0x30
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b084      	sub	sp, #16
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	60f8      	str	r0, [r7, #12]
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d103      	bne.n	8004b2e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	e002      	b.n	8004b34 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b40:	2101      	movs	r1, #1
 8004b42:	69b8      	ldr	r0, [r7, #24]
 8004b44:	f7ff ff0a 	bl	800495c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	78fa      	ldrb	r2, [r7, #3]
 8004b4c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b50:	bf00      	nop
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}

08004b58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b08e      	sub	sp, #56	; 0x38
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	60f8      	str	r0, [r7, #12]
 8004b60:	60b9      	str	r1, [r7, #8]
 8004b62:	607a      	str	r2, [r7, #4]
 8004b64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b66:	2300      	movs	r3, #0
 8004b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d109      	bne.n	8004b88 <xQueueGenericSend+0x30>
 8004b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b78:	f383 8811 	msr	BASEPRI, r3
 8004b7c:	f3bf 8f6f 	isb	sy
 8004b80:	f3bf 8f4f 	dsb	sy
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b86:	e7fe      	b.n	8004b86 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <xQueueGenericSend+0x3e>
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <xQueueGenericSend+0x42>
 8004b96:	2301      	movs	r3, #1
 8004b98:	e000      	b.n	8004b9c <xQueueGenericSend+0x44>
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d109      	bne.n	8004bb4 <xQueueGenericSend+0x5c>
 8004ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	627b      	str	r3, [r7, #36]	; 0x24
 8004bb2:	e7fe      	b.n	8004bb2 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d103      	bne.n	8004bc2 <xQueueGenericSend+0x6a>
 8004bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d101      	bne.n	8004bc6 <xQueueGenericSend+0x6e>
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e000      	b.n	8004bc8 <xQueueGenericSend+0x70>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d109      	bne.n	8004be0 <xQueueGenericSend+0x88>
 8004bcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd0:	f383 8811 	msr	BASEPRI, r3
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	f3bf 8f4f 	dsb	sy
 8004bdc:	623b      	str	r3, [r7, #32]
 8004bde:	e7fe      	b.n	8004bde <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004be0:	f001 f998 	bl	8005f14 <xTaskGetSchedulerState>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <xQueueGenericSend+0x98>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d101      	bne.n	8004bf4 <xQueueGenericSend+0x9c>
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e000      	b.n	8004bf6 <xQueueGenericSend+0x9e>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d109      	bne.n	8004c0e <xQueueGenericSend+0xb6>
 8004bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bfe:	f383 8811 	msr	BASEPRI, r3
 8004c02:	f3bf 8f6f 	isb	sy
 8004c06:	f3bf 8f4f 	dsb	sy
 8004c0a:	61fb      	str	r3, [r7, #28]
 8004c0c:	e7fe      	b.n	8004c0c <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c0e:	f001 fecd 	bl	80069ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <xQueueGenericSend+0xcc>
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b02      	cmp	r3, #2
 8004c22:	d129      	bne.n	8004c78 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	68b9      	ldr	r1, [r7, #8]
 8004c28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c2a:	f000 f9ff 	bl	800502c <prvCopyDataToQueue>
 8004c2e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d010      	beq.n	8004c5a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c3a:	3324      	adds	r3, #36	; 0x24
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f000 ffb3 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004c42:	4603      	mov	r3, r0
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d013      	beq.n	8004c70 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c48:	4b3f      	ldr	r3, [pc, #252]	; (8004d48 <xQueueGenericSend+0x1f0>)
 8004c4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c4e:	601a      	str	r2, [r3, #0]
 8004c50:	f3bf 8f4f 	dsb	sy
 8004c54:	f3bf 8f6f 	isb	sy
 8004c58:	e00a      	b.n	8004c70 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d007      	beq.n	8004c70 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c60:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <xQueueGenericSend+0x1f0>)
 8004c62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c66:	601a      	str	r2, [r3, #0]
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c70:	f001 feca 	bl	8006a08 <vPortExitCritical>
				return pdPASS;
 8004c74:	2301      	movs	r3, #1
 8004c76:	e063      	b.n	8004d40 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d103      	bne.n	8004c86 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c7e:	f001 fec3 	bl	8006a08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c82:	2300      	movs	r3, #0
 8004c84:	e05c      	b.n	8004d40 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d106      	bne.n	8004c9a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c8c:	f107 0314 	add.w	r3, r7, #20
 8004c90:	4618      	mov	r0, r3
 8004c92:	f000 ffeb 	bl	8005c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c96:	2301      	movs	r3, #1
 8004c98:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c9a:	f001 feb5 	bl	8006a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c9e:	f000 fd67 	bl	8005770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004ca2:	f001 fe83 	bl	80069ac <vPortEnterCritical>
 8004ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004cac:	b25b      	sxtb	r3, r3
 8004cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cb2:	d103      	bne.n	8004cbc <xQueueGenericSend+0x164>
 8004cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cc2:	b25b      	sxtb	r3, r3
 8004cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc8:	d103      	bne.n	8004cd2 <xQueueGenericSend+0x17a>
 8004cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd2:	f001 fe99 	bl	8006a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cd6:	1d3a      	adds	r2, r7, #4
 8004cd8:	f107 0314 	add.w	r3, r7, #20
 8004cdc:	4611      	mov	r1, r2
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 ffda 	bl	8005c98 <xTaskCheckForTimeOut>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d124      	bne.n	8004d34 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004cea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cec:	f000 fa96 	bl	800521c <prvIsQueueFull>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d018      	beq.n	8004d28 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	3310      	adds	r3, #16
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	4611      	mov	r1, r2
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 ff04 	bl	8005b0c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d06:	f000 fa21 	bl	800514c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d0a:	f000 fd3f 	bl	800578c <xTaskResumeAll>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	f47f af7c 	bne.w	8004c0e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8004d16:	4b0c      	ldr	r3, [pc, #48]	; (8004d48 <xQueueGenericSend+0x1f0>)
 8004d18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1c:	601a      	str	r2, [r3, #0]
 8004d1e:	f3bf 8f4f 	dsb	sy
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	e772      	b.n	8004c0e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d2a:	f000 fa0f 	bl	800514c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d2e:	f000 fd2d 	bl	800578c <xTaskResumeAll>
 8004d32:	e76c      	b.n	8004c0e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004d36:	f000 fa09 	bl	800514c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d3a:	f000 fd27 	bl	800578c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d3e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3738      	adds	r7, #56	; 0x38
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	e000ed04 	.word	0xe000ed04

08004d4c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b08e      	sub	sp, #56	; 0x38
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
 8004d58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d109      	bne.n	8004d78 <xQueueGenericSendFromISR+0x2c>
 8004d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d68:	f383 8811 	msr	BASEPRI, r3
 8004d6c:	f3bf 8f6f 	isb	sy
 8004d70:	f3bf 8f4f 	dsb	sy
 8004d74:	627b      	str	r3, [r7, #36]	; 0x24
 8004d76:	e7fe      	b.n	8004d76 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSendFromISR+0x3a>
 8004d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <xQueueGenericSendFromISR+0x3e>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <xQueueGenericSendFromISR+0x40>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d109      	bne.n	8004da4 <xQueueGenericSendFromISR+0x58>
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	623b      	str	r3, [r7, #32]
 8004da2:	e7fe      	b.n	8004da2 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d103      	bne.n	8004db2 <xQueueGenericSendFromISR+0x66>
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d101      	bne.n	8004db6 <xQueueGenericSendFromISR+0x6a>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <xQueueGenericSendFromISR+0x6c>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d109      	bne.n	8004dd0 <xQueueGenericSendFromISR+0x84>
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e7fe      	b.n	8004dce <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dd0:	f001 fec8 	bl	8006b64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004dd4:	f3ef 8211 	mrs	r2, BASEPRI
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	61ba      	str	r2, [r7, #24]
 8004dea:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004dec:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004dee:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004df4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d302      	bcc.n	8004e02 <xQueueGenericSendFromISR+0xb6>
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d12c      	bne.n	8004e5c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e12:	f000 f90b 	bl	800502c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e16:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8004e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e1e:	d112      	bne.n	8004e46 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d016      	beq.n	8004e56 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	3324      	adds	r3, #36	; 0x24
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 febb 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004e32:	4603      	mov	r3, r0
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00e      	beq.n	8004e56 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d00b      	beq.n	8004e56 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2201      	movs	r2, #1
 8004e42:	601a      	str	r2, [r3, #0]
 8004e44:	e007      	b.n	8004e56 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	b25a      	sxtb	r2, r3
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e56:	2301      	movs	r3, #1
 8004e58:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8004e5a:	e001      	b.n	8004e60 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3738      	adds	r7, #56	; 0x38
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}

08004e74 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b08c      	sub	sp, #48	; 0x30
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e80:	2300      	movs	r3, #0
 8004e82:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d109      	bne.n	8004ea2 <xQueueReceive+0x2e>
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	623b      	str	r3, [r7, #32]
 8004ea0:	e7fe      	b.n	8004ea0 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d103      	bne.n	8004eb0 <xQueueReceive+0x3c>
 8004ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d101      	bne.n	8004eb4 <xQueueReceive+0x40>
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <xQueueReceive+0x42>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <xQueueReceive+0x5a>
 8004eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	61fb      	str	r3, [r7, #28]
 8004ecc:	e7fe      	b.n	8004ecc <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ece:	f001 f821 	bl	8005f14 <xTaskGetSchedulerState>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d102      	bne.n	8004ede <xQueueReceive+0x6a>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <xQueueReceive+0x6e>
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e000      	b.n	8004ee4 <xQueueReceive+0x70>
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d109      	bne.n	8004efc <xQueueReceive+0x88>
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61bb      	str	r3, [r7, #24]
 8004efa:	e7fe      	b.n	8004efa <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004efc:	f001 fd56 	bl	80069ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f04:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01f      	beq.n	8004f4c <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f0c:	68b9      	ldr	r1, [r7, #8]
 8004f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f10:	f000 f8f6 	bl	8005100 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f16:	1e5a      	subs	r2, r3, #1
 8004f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1e:	691b      	ldr	r3, [r3, #16]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00f      	beq.n	8004f44 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f26:	3310      	adds	r3, #16
 8004f28:	4618      	mov	r0, r3
 8004f2a:	f000 fe3d 	bl	8005ba8 <xTaskRemoveFromEventList>
 8004f2e:	4603      	mov	r3, r0
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d007      	beq.n	8004f44 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f34:	4b3c      	ldr	r3, [pc, #240]	; (8005028 <xQueueReceive+0x1b4>)
 8004f36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f3a:	601a      	str	r2, [r3, #0]
 8004f3c:	f3bf 8f4f 	dsb	sy
 8004f40:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f44:	f001 fd60 	bl	8006a08 <vPortExitCritical>
				return pdPASS;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e069      	b.n	8005020 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d103      	bne.n	8004f5a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f52:	f001 fd59 	bl	8006a08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f56:	2300      	movs	r3, #0
 8004f58:	e062      	b.n	8005020 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d106      	bne.n	8004f6e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f60:	f107 0310 	add.w	r3, r7, #16
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fe81 	bl	8005c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f6e:	f001 fd4b 	bl	8006a08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f72:	f000 fbfd 	bl	8005770 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f76:	f001 fd19 	bl	80069ac <vPortEnterCritical>
 8004f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f80:	b25b      	sxtb	r3, r3
 8004f82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f86:	d103      	bne.n	8004f90 <xQueueReceive+0x11c>
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f96:	b25b      	sxtb	r3, r3
 8004f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f9c:	d103      	bne.n	8004fa6 <xQueueReceive+0x132>
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fa6:	f001 fd2f 	bl	8006a08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004faa:	1d3a      	adds	r2, r7, #4
 8004fac:	f107 0310 	add.w	r3, r7, #16
 8004fb0:	4611      	mov	r1, r2
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	f000 fe70 	bl	8005c98 <xTaskCheckForTimeOut>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d123      	bne.n	8005006 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fbe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fc0:	f000 f916 	bl	80051f0 <prvIsQueueEmpty>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d017      	beq.n	8004ffa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fcc:	3324      	adds	r3, #36	; 0x24
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	4611      	mov	r1, r2
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 fd9a 	bl	8005b0c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fda:	f000 f8b7 	bl	800514c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fde:	f000 fbd5 	bl	800578c <xTaskResumeAll>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d189      	bne.n	8004efc <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <xQueueReceive+0x1b4>)
 8004fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	f3bf 8f6f 	isb	sy
 8004ff8:	e780      	b.n	8004efc <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004ffa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ffc:	f000 f8a6 	bl	800514c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005000:	f000 fbc4 	bl	800578c <xTaskResumeAll>
 8005004:	e77a      	b.n	8004efc <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005006:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005008:	f000 f8a0 	bl	800514c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800500c:	f000 fbbe 	bl	800578c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f000 f8ed 	bl	80051f0 <prvIsQueueEmpty>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	f43f af6f 	beq.w	8004efc <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800501e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005020:	4618      	mov	r0, r3
 8005022:	3730      	adds	r7, #48	; 0x30
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}
 8005028:	e000ed04 	.word	0xe000ed04

0800502c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b086      	sub	sp, #24
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005038:	2300      	movs	r3, #0
 800503a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005040:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	2b00      	cmp	r3, #0
 8005048:	d10d      	bne.n	8005066 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d14d      	bne.n	80050ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	4618      	mov	r0, r3
 8005058:	f000 ff7a 	bl	8005f50 <xTaskPriorityDisinherit>
 800505c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	609a      	str	r2, [r3, #8]
 8005064:	e043      	b.n	80050ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d119      	bne.n	80050a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6858      	ldr	r0, [r3, #4]
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	461a      	mov	r2, r3
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	f001 ffb2 	bl	8006fe0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	685a      	ldr	r2, [r3, #4]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005084:	441a      	add	r2, r3
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	429a      	cmp	r2, r3
 8005094:	d32b      	bcc.n	80050ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	605a      	str	r2, [r3, #4]
 800509e:	e026      	b.n	80050ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	68d8      	ldr	r0, [r3, #12]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050a8:	461a      	mov	r2, r3
 80050aa:	68b9      	ldr	r1, [r7, #8]
 80050ac:	f001 ff98 	bl	8006fe0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b8:	425b      	negs	r3, r3
 80050ba:	441a      	add	r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	68da      	ldr	r2, [r3, #12]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d207      	bcs.n	80050dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d4:	425b      	negs	r3, r3
 80050d6:	441a      	add	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d105      	bne.n	80050ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d002      	beq.n	80050ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	3b01      	subs	r3, #1
 80050ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1c5a      	adds	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80050f6:	697b      	ldr	r3, [r7, #20]
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510e:	2b00      	cmp	r3, #0
 8005110:	d018      	beq.n	8005144 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68da      	ldr	r2, [r3, #12]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511a:	441a      	add	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	68da      	ldr	r2, [r3, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	429a      	cmp	r2, r3
 800512a:	d303      	bcc.n	8005134 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68d9      	ldr	r1, [r3, #12]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	461a      	mov	r2, r3
 800513e:	6838      	ldr	r0, [r7, #0]
 8005140:	f001 ff4e 	bl	8006fe0 <memcpy>
	}
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005154:	f001 fc2a 	bl	80069ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800515e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005160:	e011      	b.n	8005186 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005166:	2b00      	cmp	r3, #0
 8005168:	d012      	beq.n	8005190 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3324      	adds	r3, #36	; 0x24
 800516e:	4618      	mov	r0, r3
 8005170:	f000 fd1a 	bl	8005ba8 <xTaskRemoveFromEventList>
 8005174:	4603      	mov	r3, r0
 8005176:	2b00      	cmp	r3, #0
 8005178:	d001      	beq.n	800517e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800517a:	f000 fded 	bl	8005d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800517e:	7bfb      	ldrb	r3, [r7, #15]
 8005180:	3b01      	subs	r3, #1
 8005182:	b2db      	uxtb	r3, r3
 8005184:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005186:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800518a:	2b00      	cmp	r3, #0
 800518c:	dce9      	bgt.n	8005162 <prvUnlockQueue+0x16>
 800518e:	e000      	b.n	8005192 <prvUnlockQueue+0x46>
					break;
 8005190:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	22ff      	movs	r2, #255	; 0xff
 8005196:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800519a:	f001 fc35 	bl	8006a08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800519e:	f001 fc05 	bl	80069ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80051a8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051aa:	e011      	b.n	80051d0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d012      	beq.n	80051da <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	3310      	adds	r3, #16
 80051b8:	4618      	mov	r0, r3
 80051ba:	f000 fcf5 	bl	8005ba8 <xTaskRemoveFromEventList>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051c4:	f000 fdc8 	bl	8005d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051c8:	7bbb      	ldrb	r3, [r7, #14]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051d0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	dce9      	bgt.n	80051ac <prvUnlockQueue+0x60>
 80051d8:	e000      	b.n	80051dc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051da:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	22ff      	movs	r2, #255	; 0xff
 80051e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80051e4:	f001 fc10 	bl	8006a08 <vPortExitCritical>
}
 80051e8:	bf00      	nop
 80051ea:	3710      	adds	r7, #16
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b084      	sub	sp, #16
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80051f8:	f001 fbd8 	bl	80069ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005200:	2b00      	cmp	r3, #0
 8005202:	d102      	bne.n	800520a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005204:	2301      	movs	r3, #1
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e001      	b.n	800520e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800520a:	2300      	movs	r3, #0
 800520c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800520e:	f001 fbfb 	bl	8006a08 <vPortExitCritical>

	return xReturn;
 8005212:	68fb      	ldr	r3, [r7, #12]
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005224:	f001 fbc2 	bl	80069ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005230:	429a      	cmp	r2, r3
 8005232:	d102      	bne.n	800523a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005234:	2301      	movs	r3, #1
 8005236:	60fb      	str	r3, [r7, #12]
 8005238:	e001      	b.n	800523e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800523e:	f001 fbe3 	bl	8006a08 <vPortExitCritical>

	return xReturn;
 8005242:	68fb      	ldr	r3, [r7, #12]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800524c:	b480      	push	{r7}
 800524e:	b085      	sub	sp, #20
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
 8005254:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	e014      	b.n	8005286 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800525c:	4a0e      	ldr	r2, [pc, #56]	; (8005298 <vQueueAddToRegistry+0x4c>)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10b      	bne.n	8005280 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005268:	490b      	ldr	r1, [pc, #44]	; (8005298 <vQueueAddToRegistry+0x4c>)
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	683a      	ldr	r2, [r7, #0]
 800526e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005272:	4a09      	ldr	r2, [pc, #36]	; (8005298 <vQueueAddToRegistry+0x4c>)
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800527e:	e005      	b.n	800528c <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	3301      	adds	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b07      	cmp	r3, #7
 800528a:	d9e7      	bls.n	800525c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20004b78 	.word	0x20004b78

0800529c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052ac:	f001 fb7e 	bl	80069ac <vPortEnterCritical>
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052b6:	b25b      	sxtb	r3, r3
 80052b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052bc:	d103      	bne.n	80052c6 <vQueueWaitForMessageRestricted+0x2a>
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	2200      	movs	r2, #0
 80052c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052cc:	b25b      	sxtb	r3, r3
 80052ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d2:	d103      	bne.n	80052dc <vQueueWaitForMessageRestricted+0x40>
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2200      	movs	r2, #0
 80052d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052dc:	f001 fb94 	bl	8006a08 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d106      	bne.n	80052f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3324      	adds	r3, #36	; 0x24
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	68b9      	ldr	r1, [r7, #8]
 80052f0:	4618      	mov	r0, r3
 80052f2:	f000 fc2f 	bl	8005b54 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80052f6:	6978      	ldr	r0, [r7, #20]
 80052f8:	f7ff ff28 	bl	800514c <prvUnlockQueue>
	}
 80052fc:	bf00      	nop
 80052fe:	3718      	adds	r7, #24
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	; 0x38
 8005308:	af04      	add	r7, sp, #16
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	607a      	str	r2, [r7, #4]
 8005310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005314:	2b00      	cmp	r3, #0
 8005316:	d109      	bne.n	800532c <xTaskCreateStatic+0x28>
 8005318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531c:	f383 8811 	msr	BASEPRI, r3
 8005320:	f3bf 8f6f 	isb	sy
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	623b      	str	r3, [r7, #32]
 800532a:	e7fe      	b.n	800532a <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800532e:	2b00      	cmp	r3, #0
 8005330:	d109      	bne.n	8005346 <xTaskCreateStatic+0x42>
 8005332:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005336:	f383 8811 	msr	BASEPRI, r3
 800533a:	f3bf 8f6f 	isb	sy
 800533e:	f3bf 8f4f 	dsb	sy
 8005342:	61fb      	str	r3, [r7, #28]
 8005344:	e7fe      	b.n	8005344 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005346:	235c      	movs	r3, #92	; 0x5c
 8005348:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	2b5c      	cmp	r3, #92	; 0x5c
 800534e:	d009      	beq.n	8005364 <xTaskCreateStatic+0x60>
 8005350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005354:	f383 8811 	msr	BASEPRI, r3
 8005358:	f3bf 8f6f 	isb	sy
 800535c:	f3bf 8f4f 	dsb	sy
 8005360:	61bb      	str	r3, [r7, #24]
 8005362:	e7fe      	b.n	8005362 <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005364:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005368:	2b00      	cmp	r3, #0
 800536a:	d01e      	beq.n	80053aa <xTaskCreateStatic+0xa6>
 800536c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800536e:	2b00      	cmp	r3, #0
 8005370:	d01b      	beq.n	80053aa <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005374:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005378:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800537a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	2202      	movs	r2, #2
 8005380:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005384:	2300      	movs	r3, #0
 8005386:	9303      	str	r3, [sp, #12]
 8005388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538a:	9302      	str	r3, [sp, #8]
 800538c:	f107 0314 	add.w	r3, r7, #20
 8005390:	9301      	str	r3, [sp, #4]
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	687a      	ldr	r2, [r7, #4]
 800539a:	68b9      	ldr	r1, [r7, #8]
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f000 f850 	bl	8005442 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80053a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80053a4:	f000 f8dc 	bl	8005560 <prvAddNewTaskToReadyList>
 80053a8:	e001      	b.n	80053ae <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80053ae:	697b      	ldr	r3, [r7, #20]
	}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3728      	adds	r7, #40	; 0x28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}

080053b8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08c      	sub	sp, #48	; 0x30
 80053bc:	af04      	add	r7, sp, #16
 80053be:	60f8      	str	r0, [r7, #12]
 80053c0:	60b9      	str	r1, [r7, #8]
 80053c2:	603b      	str	r3, [r7, #0]
 80053c4:	4613      	mov	r3, r2
 80053c6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	009b      	lsls	r3, r3, #2
 80053cc:	4618      	mov	r0, r3
 80053ce:	f001 fc07 	bl	8006be0 <pvPortMalloc>
 80053d2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00e      	beq.n	80053f8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80053da:	205c      	movs	r0, #92	; 0x5c
 80053dc:	f001 fc00 	bl	8006be0 <pvPortMalloc>
 80053e0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d003      	beq.n	80053f0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	631a      	str	r2, [r3, #48]	; 0x30
 80053ee:	e005      	b.n	80053fc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80053f0:	6978      	ldr	r0, [r7, #20]
 80053f2:	f001 fcb7 	bl	8006d64 <vPortFree>
 80053f6:	e001      	b.n	80053fc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80053f8:	2300      	movs	r3, #0
 80053fa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d017      	beq.n	8005432 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800540a:	88fa      	ldrh	r2, [r7, #6]
 800540c:	2300      	movs	r3, #0
 800540e:	9303      	str	r3, [sp, #12]
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	9302      	str	r3, [sp, #8]
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	9301      	str	r3, [sp, #4]
 8005418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	68b9      	ldr	r1, [r7, #8]
 8005420:	68f8      	ldr	r0, [r7, #12]
 8005422:	f000 f80e 	bl	8005442 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005426:	69f8      	ldr	r0, [r7, #28]
 8005428:	f000 f89a 	bl	8005560 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800542c:	2301      	movs	r3, #1
 800542e:	61bb      	str	r3, [r7, #24]
 8005430:	e002      	b.n	8005438 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005432:	f04f 33ff 	mov.w	r3, #4294967295
 8005436:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005438:	69bb      	ldr	r3, [r7, #24]
	}
 800543a:	4618      	mov	r0, r3
 800543c:	3720      	adds	r7, #32
 800543e:	46bd      	mov	sp, r7
 8005440:	bd80      	pop	{r7, pc}

08005442 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b088      	sub	sp, #32
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005452:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	461a      	mov	r2, r3
 800545a:	21a5      	movs	r1, #165	; 0xa5
 800545c:	f001 fdcb 	bl	8006ff6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005462:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800546a:	3b01      	subs	r3, #1
 800546c:	009b      	lsls	r3, r3, #2
 800546e:	4413      	add	r3, r2
 8005470:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005472:	69bb      	ldr	r3, [r7, #24]
 8005474:	f023 0307 	bic.w	r3, r3, #7
 8005478:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	f003 0307 	and.w	r3, r3, #7
 8005480:	2b00      	cmp	r3, #0
 8005482:	d009      	beq.n	8005498 <prvInitialiseNewTask+0x56>
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	f383 8811 	msr	BASEPRI, r3
 800548c:	f3bf 8f6f 	isb	sy
 8005490:	f3bf 8f4f 	dsb	sy
 8005494:	617b      	str	r3, [r7, #20]
 8005496:	e7fe      	b.n	8005496 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d01f      	beq.n	80054de <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800549e:	2300      	movs	r3, #0
 80054a0:	61fb      	str	r3, [r7, #28]
 80054a2:	e012      	b.n	80054ca <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80054a4:	68ba      	ldr	r2, [r7, #8]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	4413      	add	r3, r2
 80054aa:	7819      	ldrb	r1, [r3, #0]
 80054ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	4413      	add	r3, r2
 80054b2:	3334      	adds	r3, #52	; 0x34
 80054b4:	460a      	mov	r2, r1
 80054b6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80054b8:	68ba      	ldr	r2, [r7, #8]
 80054ba:	69fb      	ldr	r3, [r7, #28]
 80054bc:	4413      	add	r3, r2
 80054be:	781b      	ldrb	r3, [r3, #0]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	61fb      	str	r3, [r7, #28]
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	2b0f      	cmp	r3, #15
 80054ce:	d9e9      	bls.n	80054a4 <prvInitialiseNewTask+0x62>
 80054d0:	e000      	b.n	80054d4 <prvInitialiseNewTask+0x92>
			{
				break;
 80054d2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80054d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80054dc:	e003      	b.n	80054e6 <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80054de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054e0:	2200      	movs	r2, #0
 80054e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80054e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054e8:	2b37      	cmp	r3, #55	; 0x37
 80054ea:	d901      	bls.n	80054f0 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80054ec:	2337      	movs	r3, #55	; 0x37
 80054ee:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054f4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80054f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80054fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fe:	2200      	movs	r2, #0
 8005500:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005504:	3304      	adds	r3, #4
 8005506:	4618      	mov	r0, r3
 8005508:	f7ff f994 	bl	8004834 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800550c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550e:	3318      	adds	r3, #24
 8005510:	4618      	mov	r0, r3
 8005512:	f7ff f98f 	bl	8004834 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005518:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800551a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005524:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800552a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800552c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552e:	2200      	movs	r2, #0
 8005530:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005534:	2200      	movs	r2, #0
 8005536:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	68f9      	ldr	r1, [r7, #12]
 800553e:	69b8      	ldr	r0, [r7, #24]
 8005540:	f001 f90c 	bl	800675c <pxPortInitialiseStack>
 8005544:	4602      	mov	r2, r0
 8005546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005548:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800554a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005552:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005554:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005556:	bf00      	nop
 8005558:	3720      	adds	r7, #32
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b082      	sub	sp, #8
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005568:	f001 fa20 	bl	80069ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800556c:	4b2d      	ldr	r3, [pc, #180]	; (8005624 <prvAddNewTaskToReadyList+0xc4>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	3301      	adds	r3, #1
 8005572:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <prvAddNewTaskToReadyList+0xc4>)
 8005574:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005576:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <prvAddNewTaskToReadyList+0xc8>)
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d109      	bne.n	8005592 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800557e:	4a2a      	ldr	r2, [pc, #168]	; (8005628 <prvAddNewTaskToReadyList+0xc8>)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005584:	4b27      	ldr	r3, [pc, #156]	; (8005624 <prvAddNewTaskToReadyList+0xc4>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2b01      	cmp	r3, #1
 800558a:	d110      	bne.n	80055ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800558c:	f000 fc08 	bl	8005da0 <prvInitialiseTaskLists>
 8005590:	e00d      	b.n	80055ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005592:	4b26      	ldr	r3, [pc, #152]	; (800562c <prvAddNewTaskToReadyList+0xcc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d109      	bne.n	80055ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <prvAddNewTaskToReadyList+0xc8>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d802      	bhi.n	80055ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80055a8:	4a1f      	ldr	r2, [pc, #124]	; (8005628 <prvAddNewTaskToReadyList+0xc8>)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80055ae:	4b20      	ldr	r3, [pc, #128]	; (8005630 <prvAddNewTaskToReadyList+0xd0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3301      	adds	r3, #1
 80055b4:	4a1e      	ldr	r2, [pc, #120]	; (8005630 <prvAddNewTaskToReadyList+0xd0>)
 80055b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80055b8:	4b1d      	ldr	r3, [pc, #116]	; (8005630 <prvAddNewTaskToReadyList+0xd0>)
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b1b      	ldr	r3, [pc, #108]	; (8005634 <prvAddNewTaskToReadyList+0xd4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d903      	bls.n	80055d4 <prvAddNewTaskToReadyList+0x74>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a18      	ldr	r2, [pc, #96]	; (8005634 <prvAddNewTaskToReadyList+0xd4>)
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a15      	ldr	r2, [pc, #84]	; (8005638 <prvAddNewTaskToReadyList+0xd8>)
 80055e2:	441a      	add	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7ff f92f 	bl	800484e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80055f0:	f001 fa0a 	bl	8006a08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80055f4:	4b0d      	ldr	r3, [pc, #52]	; (800562c <prvAddNewTaskToReadyList+0xcc>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d00e      	beq.n	800561a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80055fc:	4b0a      	ldr	r3, [pc, #40]	; (8005628 <prvAddNewTaskToReadyList+0xc8>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005606:	429a      	cmp	r2, r3
 8005608:	d207      	bcs.n	800561a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800560a:	4b0c      	ldr	r3, [pc, #48]	; (800563c <prvAddNewTaskToReadyList+0xdc>)
 800560c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	f3bf 8f4f 	dsb	sy
 8005616:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800561a:	bf00      	nop
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000ca4 	.word	0x20000ca4
 8005628:	200007d0 	.word	0x200007d0
 800562c:	20000cb0 	.word	0x20000cb0
 8005630:	20000cc0 	.word	0x20000cc0
 8005634:	20000cac 	.word	0x20000cac
 8005638:	200007d4 	.word	0x200007d4
 800563c:	e000ed04 	.word	0xe000ed04

08005640 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d016      	beq.n	8005680 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005652:	4b13      	ldr	r3, [pc, #76]	; (80056a0 <vTaskDelay+0x60>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d009      	beq.n	800566e <vTaskDelay+0x2e>
 800565a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	e7fe      	b.n	800566c <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800566e:	f000 f87f 	bl	8005770 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005672:	2100      	movs	r1, #0
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f000 fcd7 	bl	8006028 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800567a:	f000 f887 	bl	800578c <xTaskResumeAll>
 800567e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d107      	bne.n	8005696 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005686:	4b07      	ldr	r3, [pc, #28]	; (80056a4 <vTaskDelay+0x64>)
 8005688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	f3bf 8f4f 	dsb	sy
 8005692:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005696:	bf00      	nop
 8005698:	3710      	adds	r7, #16
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	20000ccc 	.word	0x20000ccc
 80056a4:	e000ed04 	.word	0xe000ed04

080056a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b08a      	sub	sp, #40	; 0x28
 80056ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80056ae:	2300      	movs	r3, #0
 80056b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80056b2:	2300      	movs	r3, #0
 80056b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80056b6:	463a      	mov	r2, r7
 80056b8:	1d39      	adds	r1, r7, #4
 80056ba:	f107 0308 	add.w	r3, r7, #8
 80056be:	4618      	mov	r0, r3
 80056c0:	f7ff f864 	bl	800478c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80056c4:	6839      	ldr	r1, [r7, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	68ba      	ldr	r2, [r7, #8]
 80056ca:	9202      	str	r2, [sp, #8]
 80056cc:	9301      	str	r3, [sp, #4]
 80056ce:	2300      	movs	r3, #0
 80056d0:	9300      	str	r3, [sp, #0]
 80056d2:	2300      	movs	r3, #0
 80056d4:	460a      	mov	r2, r1
 80056d6:	4920      	ldr	r1, [pc, #128]	; (8005758 <vTaskStartScheduler+0xb0>)
 80056d8:	4820      	ldr	r0, [pc, #128]	; (800575c <vTaskStartScheduler+0xb4>)
 80056da:	f7ff fe13 	bl	8005304 <xTaskCreateStatic>
 80056de:	4602      	mov	r2, r0
 80056e0:	4b1f      	ldr	r3, [pc, #124]	; (8005760 <vTaskStartScheduler+0xb8>)
 80056e2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80056e4:	4b1e      	ldr	r3, [pc, #120]	; (8005760 <vTaskStartScheduler+0xb8>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d002      	beq.n	80056f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e001      	b.n	80056f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d102      	bne.n	8005702 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80056fc:	f000 fce8 	bl	80060d0 <xTimerCreateTimerTask>
 8005700:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d115      	bne.n	8005734 <vTaskStartScheduler+0x8c>
 8005708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570c:	f383 8811 	msr	BASEPRI, r3
 8005710:	f3bf 8f6f 	isb	sy
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800571a:	4b12      	ldr	r3, [pc, #72]	; (8005764 <vTaskStartScheduler+0xbc>)
 800571c:	f04f 32ff 	mov.w	r2, #4294967295
 8005720:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005722:	4b11      	ldr	r3, [pc, #68]	; (8005768 <vTaskStartScheduler+0xc0>)
 8005724:	2201      	movs	r2, #1
 8005726:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005728:	4b10      	ldr	r3, [pc, #64]	; (800576c <vTaskStartScheduler+0xc4>)
 800572a:	2200      	movs	r2, #0
 800572c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800572e:	f001 f89f 	bl	8006870 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005732:	e00d      	b.n	8005750 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800573a:	d109      	bne.n	8005750 <vTaskStartScheduler+0xa8>
 800573c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005740:	f383 8811 	msr	BASEPRI, r3
 8005744:	f3bf 8f6f 	isb	sy
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	e7fe      	b.n	800574e <vTaskStartScheduler+0xa6>
}
 8005750:	bf00      	nop
 8005752:	3718      	adds	r7, #24
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	08007850 	.word	0x08007850
 800575c:	08005d71 	.word	0x08005d71
 8005760:	20000cc8 	.word	0x20000cc8
 8005764:	20000cc4 	.word	0x20000cc4
 8005768:	20000cb0 	.word	0x20000cb0
 800576c:	20000ca8 	.word	0x20000ca8

08005770 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005770:	b480      	push	{r7}
 8005772:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005774:	4b04      	ldr	r3, [pc, #16]	; (8005788 <vTaskSuspendAll+0x18>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	3301      	adds	r3, #1
 800577a:	4a03      	ldr	r2, [pc, #12]	; (8005788 <vTaskSuspendAll+0x18>)
 800577c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800577e:	bf00      	nop
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	20000ccc 	.word	0x20000ccc

0800578c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b084      	sub	sp, #16
 8005790:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005792:	2300      	movs	r3, #0
 8005794:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005796:	2300      	movs	r3, #0
 8005798:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800579a:	4b41      	ldr	r3, [pc, #260]	; (80058a0 <xTaskResumeAll+0x114>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d109      	bne.n	80057b6 <xTaskResumeAll+0x2a>
 80057a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	603b      	str	r3, [r7, #0]
 80057b4:	e7fe      	b.n	80057b4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80057b6:	f001 f8f9 	bl	80069ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80057ba:	4b39      	ldr	r3, [pc, #228]	; (80058a0 <xTaskResumeAll+0x114>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	3b01      	subs	r3, #1
 80057c0:	4a37      	ldr	r2, [pc, #220]	; (80058a0 <xTaskResumeAll+0x114>)
 80057c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057c4:	4b36      	ldr	r3, [pc, #216]	; (80058a0 <xTaskResumeAll+0x114>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d162      	bne.n	8005892 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <xTaskResumeAll+0x118>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d05e      	beq.n	8005892 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80057d4:	e02f      	b.n	8005836 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057d6:	4b34      	ldr	r3, [pc, #208]	; (80058a8 <xTaskResumeAll+0x11c>)
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3318      	adds	r3, #24
 80057e2:	4618      	mov	r0, r3
 80057e4:	f7ff f890 	bl	8004908 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3304      	adds	r3, #4
 80057ec:	4618      	mov	r0, r3
 80057ee:	f7ff f88b 	bl	8004908 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f6:	4b2d      	ldr	r3, [pc, #180]	; (80058ac <xTaskResumeAll+0x120>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	429a      	cmp	r2, r3
 80057fc:	d903      	bls.n	8005806 <xTaskResumeAll+0x7a>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <xTaskResumeAll+0x120>)
 8005804:	6013      	str	r3, [r2, #0]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580a:	4613      	mov	r3, r2
 800580c:	009b      	lsls	r3, r3, #2
 800580e:	4413      	add	r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	4a27      	ldr	r2, [pc, #156]	; (80058b0 <xTaskResumeAll+0x124>)
 8005814:	441a      	add	r2, r3
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	3304      	adds	r3, #4
 800581a:	4619      	mov	r1, r3
 800581c:	4610      	mov	r0, r2
 800581e:	f7ff f816 	bl	800484e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005826:	4b23      	ldr	r3, [pc, #140]	; (80058b4 <xTaskResumeAll+0x128>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582c:	429a      	cmp	r2, r3
 800582e:	d302      	bcc.n	8005836 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8005830:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <xTaskResumeAll+0x12c>)
 8005832:	2201      	movs	r2, #1
 8005834:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005836:	4b1c      	ldr	r3, [pc, #112]	; (80058a8 <xTaskResumeAll+0x11c>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1cb      	bne.n	80057d6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d001      	beq.n	8005848 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005844:	f000 fb46 	bl	8005ed4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005848:	4b1c      	ldr	r3, [pc, #112]	; (80058bc <xTaskResumeAll+0x130>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d010      	beq.n	8005876 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005854:	f000 f846 	bl	80058e4 <xTaskIncrementTick>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d002      	beq.n	8005864 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800585e:	4b16      	ldr	r3, [pc, #88]	; (80058b8 <xTaskResumeAll+0x12c>)
 8005860:	2201      	movs	r2, #1
 8005862:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	3b01      	subs	r3, #1
 8005868:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d1f1      	bne.n	8005854 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8005870:	4b12      	ldr	r3, [pc, #72]	; (80058bc <xTaskResumeAll+0x130>)
 8005872:	2200      	movs	r2, #0
 8005874:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005876:	4b10      	ldr	r3, [pc, #64]	; (80058b8 <xTaskResumeAll+0x12c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800587e:	2301      	movs	r3, #1
 8005880:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005882:	4b0f      	ldr	r3, [pc, #60]	; (80058c0 <xTaskResumeAll+0x134>)
 8005884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005888:	601a      	str	r2, [r3, #0]
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005892:	f001 f8b9 	bl	8006a08 <vPortExitCritical>

	return xAlreadyYielded;
 8005896:	68bb      	ldr	r3, [r7, #8]
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}
 80058a0:	20000ccc 	.word	0x20000ccc
 80058a4:	20000ca4 	.word	0x20000ca4
 80058a8:	20000c64 	.word	0x20000c64
 80058ac:	20000cac 	.word	0x20000cac
 80058b0:	200007d4 	.word	0x200007d4
 80058b4:	200007d0 	.word	0x200007d0
 80058b8:	20000cb8 	.word	0x20000cb8
 80058bc:	20000cb4 	.word	0x20000cb4
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80058ca:	4b05      	ldr	r3, [pc, #20]	; (80058e0 <xTaskGetTickCount+0x1c>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80058d0:	687b      	ldr	r3, [r7, #4]
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	370c      	adds	r7, #12
 80058d6:	46bd      	mov	sp, r7
 80058d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058dc:	4770      	bx	lr
 80058de:	bf00      	nop
 80058e0:	20000ca8 	.word	0x20000ca8

080058e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80058ea:	2300      	movs	r3, #0
 80058ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058ee:	4b4e      	ldr	r3, [pc, #312]	; (8005a28 <xTaskIncrementTick+0x144>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	f040 8088 	bne.w	8005a08 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80058f8:	4b4c      	ldr	r3, [pc, #304]	; (8005a2c <xTaskIncrementTick+0x148>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	3301      	adds	r3, #1
 80058fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005900:	4a4a      	ldr	r2, [pc, #296]	; (8005a2c <xTaskIncrementTick+0x148>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d11f      	bne.n	800594c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800590c:	4b48      	ldr	r3, [pc, #288]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d009      	beq.n	800592a <xTaskIncrementTick+0x46>
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	603b      	str	r3, [r7, #0]
 8005928:	e7fe      	b.n	8005928 <xTaskIncrementTick+0x44>
 800592a:	4b41      	ldr	r3, [pc, #260]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	60fb      	str	r3, [r7, #12]
 8005930:	4b40      	ldr	r3, [pc, #256]	; (8005a34 <xTaskIncrementTick+0x150>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a3e      	ldr	r2, [pc, #248]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4a3e      	ldr	r2, [pc, #248]	; (8005a34 <xTaskIncrementTick+0x150>)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6013      	str	r3, [r2, #0]
 800593e:	4b3e      	ldr	r3, [pc, #248]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3301      	adds	r3, #1
 8005944:	4a3c      	ldr	r2, [pc, #240]	; (8005a38 <xTaskIncrementTick+0x154>)
 8005946:	6013      	str	r3, [r2, #0]
 8005948:	f000 fac4 	bl	8005ed4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800594c:	4b3b      	ldr	r3, [pc, #236]	; (8005a3c <xTaskIncrementTick+0x158>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	693a      	ldr	r2, [r7, #16]
 8005952:	429a      	cmp	r2, r3
 8005954:	d349      	bcc.n	80059ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005956:	4b36      	ldr	r3, [pc, #216]	; (8005a30 <xTaskIncrementTick+0x14c>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d104      	bne.n	800596a <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005960:	4b36      	ldr	r3, [pc, #216]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005962:	f04f 32ff 	mov.w	r2, #4294967295
 8005966:	601a      	str	r2, [r3, #0]
					break;
 8005968:	e03f      	b.n	80059ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800596a:	4b31      	ldr	r3, [pc, #196]	; (8005a30 <xTaskIncrementTick+0x14c>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	68db      	ldr	r3, [r3, #12]
 8005972:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800597a:	693a      	ldr	r2, [r7, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	429a      	cmp	r2, r3
 8005980:	d203      	bcs.n	800598a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005982:	4a2e      	ldr	r2, [pc, #184]	; (8005a3c <xTaskIncrementTick+0x158>)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005988:	e02f      	b.n	80059ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe ffba 	bl	8004908 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005998:	2b00      	cmp	r3, #0
 800599a:	d004      	beq.n	80059a6 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	3318      	adds	r3, #24
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fe ffb1 	bl	8004908 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059aa:	4b25      	ldr	r3, [pc, #148]	; (8005a40 <xTaskIncrementTick+0x15c>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d903      	bls.n	80059ba <xTaskIncrementTick+0xd6>
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059b6:	4a22      	ldr	r2, [pc, #136]	; (8005a40 <xTaskIncrementTick+0x15c>)
 80059b8:	6013      	str	r3, [r2, #0]
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059be:	4613      	mov	r3, r2
 80059c0:	009b      	lsls	r3, r3, #2
 80059c2:	4413      	add	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4a1f      	ldr	r2, [pc, #124]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059c8:	441a      	add	r2, r3
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	3304      	adds	r3, #4
 80059ce:	4619      	mov	r1, r3
 80059d0:	4610      	mov	r0, r2
 80059d2:	f7fe ff3c 	bl	800484e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059da:	4b1b      	ldr	r3, [pc, #108]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d3b8      	bcc.n	8005956 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80059e4:	2301      	movs	r3, #1
 80059e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80059e8:	e7b5      	b.n	8005956 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80059ea:	4b17      	ldr	r3, [pc, #92]	; (8005a48 <xTaskIncrementTick+0x164>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f0:	4914      	ldr	r1, [pc, #80]	; (8005a44 <xTaskIncrementTick+0x160>)
 80059f2:	4613      	mov	r3, r2
 80059f4:	009b      	lsls	r3, r3, #2
 80059f6:	4413      	add	r3, r2
 80059f8:	009b      	lsls	r3, r3, #2
 80059fa:	440b      	add	r3, r1
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d907      	bls.n	8005a12 <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 8005a02:	2301      	movs	r3, #1
 8005a04:	617b      	str	r3, [r7, #20]
 8005a06:	e004      	b.n	8005a12 <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005a08:	4b10      	ldr	r3, [pc, #64]	; (8005a4c <xTaskIncrementTick+0x168>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	3301      	adds	r3, #1
 8005a0e:	4a0f      	ldr	r2, [pc, #60]	; (8005a4c <xTaskIncrementTick+0x168>)
 8005a10:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005a12:	4b0f      	ldr	r3, [pc, #60]	; (8005a50 <xTaskIncrementTick+0x16c>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005a1e:	697b      	ldr	r3, [r7, #20]
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	20000ccc 	.word	0x20000ccc
 8005a2c:	20000ca8 	.word	0x20000ca8
 8005a30:	20000c5c 	.word	0x20000c5c
 8005a34:	20000c60 	.word	0x20000c60
 8005a38:	20000cbc 	.word	0x20000cbc
 8005a3c:	20000cc4 	.word	0x20000cc4
 8005a40:	20000cac 	.word	0x20000cac
 8005a44:	200007d4 	.word	0x200007d4
 8005a48:	200007d0 	.word	0x200007d0
 8005a4c:	20000cb4 	.word	0x20000cb4
 8005a50:	20000cb8 	.word	0x20000cb8

08005a54 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005a54:	b480      	push	{r7}
 8005a56:	b085      	sub	sp, #20
 8005a58:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005a5a:	4b27      	ldr	r3, [pc, #156]	; (8005af8 <vTaskSwitchContext+0xa4>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005a62:	4b26      	ldr	r3, [pc, #152]	; (8005afc <vTaskSwitchContext+0xa8>)
 8005a64:	2201      	movs	r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005a68:	e040      	b.n	8005aec <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8005a6a:	4b24      	ldr	r3, [pc, #144]	; (8005afc <vTaskSwitchContext+0xa8>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <vTaskSwitchContext+0xac>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	e00f      	b.n	8005a98 <vTaskSwitchContext+0x44>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d109      	bne.n	8005a92 <vTaskSwitchContext+0x3e>
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	607b      	str	r3, [r7, #4]
 8005a90:	e7fe      	b.n	8005a90 <vTaskSwitchContext+0x3c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	3b01      	subs	r3, #1
 8005a96:	60fb      	str	r3, [r7, #12]
 8005a98:	491a      	ldr	r1, [pc, #104]	; (8005b04 <vTaskSwitchContext+0xb0>)
 8005a9a:	68fa      	ldr	r2, [r7, #12]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0e5      	beq.n	8005a78 <vTaskSwitchContext+0x24>
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	009b      	lsls	r3, r3, #2
 8005ab2:	4413      	add	r3, r2
 8005ab4:	009b      	lsls	r3, r3, #2
 8005ab6:	4a13      	ldr	r2, [pc, #76]	; (8005b04 <vTaskSwitchContext+0xb0>)
 8005ab8:	4413      	add	r3, r2
 8005aba:	60bb      	str	r3, [r7, #8]
 8005abc:	68bb      	ldr	r3, [r7, #8]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	685a      	ldr	r2, [r3, #4]
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	605a      	str	r2, [r3, #4]
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	685a      	ldr	r2, [r3, #4]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	3308      	adds	r3, #8
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d104      	bne.n	8005adc <vTaskSwitchContext+0x88>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	685a      	ldr	r2, [r3, #4]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	605a      	str	r2, [r3, #4]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	685b      	ldr	r3, [r3, #4]
 8005ae0:	68db      	ldr	r3, [r3, #12]
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <vTaskSwitchContext+0xb4>)
 8005ae4:	6013      	str	r3, [r2, #0]
 8005ae6:	4a06      	ldr	r2, [pc, #24]	; (8005b00 <vTaskSwitchContext+0xac>)
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6013      	str	r3, [r2, #0]
}
 8005aec:	bf00      	nop
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	20000ccc 	.word	0x20000ccc
 8005afc:	20000cb8 	.word	0x20000cb8
 8005b00:	20000cac 	.word	0x20000cac
 8005b04:	200007d4 	.word	0x200007d4
 8005b08:	200007d0 	.word	0x200007d0

08005b0c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d109      	bne.n	8005b30 <vTaskPlaceOnEventList+0x24>
 8005b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b20:	f383 8811 	msr	BASEPRI, r3
 8005b24:	f3bf 8f6f 	isb	sy
 8005b28:	f3bf 8f4f 	dsb	sy
 8005b2c:	60fb      	str	r3, [r7, #12]
 8005b2e:	e7fe      	b.n	8005b2e <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b30:	4b07      	ldr	r3, [pc, #28]	; (8005b50 <vTaskPlaceOnEventList+0x44>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3318      	adds	r3, #24
 8005b36:	4619      	mov	r1, r3
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f7fe feac 	bl	8004896 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005b3e:	2101      	movs	r1, #1
 8005b40:	6838      	ldr	r0, [r7, #0]
 8005b42:	f000 fa71 	bl	8006028 <prvAddCurrentTaskToDelayedList>
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	200007d0 	.word	0x200007d0

08005b54 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b086      	sub	sp, #24
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	60f8      	str	r0, [r7, #12]
 8005b5c:	60b9      	str	r1, [r7, #8]
 8005b5e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d109      	bne.n	8005b7a <vTaskPlaceOnEventListRestricted+0x26>
 8005b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b6a:	f383 8811 	msr	BASEPRI, r3
 8005b6e:	f3bf 8f6f 	isb	sy
 8005b72:	f3bf 8f4f 	dsb	sy
 8005b76:	617b      	str	r3, [r7, #20]
 8005b78:	e7fe      	b.n	8005b78 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <vTaskPlaceOnEventListRestricted+0x50>)
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	3318      	adds	r3, #24
 8005b80:	4619      	mov	r1, r3
 8005b82:	68f8      	ldr	r0, [r7, #12]
 8005b84:	f7fe fe63 	bl	800484e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d002      	beq.n	8005b94 <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 8005b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8005b92:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005b94:	6879      	ldr	r1, [r7, #4]
 8005b96:	68b8      	ldr	r0, [r7, #8]
 8005b98:	f000 fa46 	bl	8006028 <prvAddCurrentTaskToDelayedList>
	}
 8005b9c:	bf00      	nop
 8005b9e:	3718      	adds	r7, #24
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	200007d0 	.word	0x200007d0

08005ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b086      	sub	sp, #24
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d109      	bne.n	8005bd2 <xTaskRemoveFromEventList+0x2a>
 8005bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc2:	f383 8811 	msr	BASEPRI, r3
 8005bc6:	f3bf 8f6f 	isb	sy
 8005bca:	f3bf 8f4f 	dsb	sy
 8005bce:	60fb      	str	r3, [r7, #12]
 8005bd0:	e7fe      	b.n	8005bd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	3318      	adds	r3, #24
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fe96 	bl	8004908 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005bdc:	4b1d      	ldr	r3, [pc, #116]	; (8005c54 <xTaskRemoveFromEventList+0xac>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d11d      	bne.n	8005c20 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	3304      	adds	r3, #4
 8005be8:	4618      	mov	r0, r3
 8005bea:	f7fe fe8d 	bl	8004908 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005bee:	693b      	ldr	r3, [r7, #16]
 8005bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bf2:	4b19      	ldr	r3, [pc, #100]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	d903      	bls.n	8005c02 <xTaskRemoveFromEventList+0x5a>
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bfe:	4a16      	ldr	r2, [pc, #88]	; (8005c58 <xTaskRemoveFromEventList+0xb0>)
 8005c00:	6013      	str	r3, [r2, #0]
 8005c02:	693b      	ldr	r3, [r7, #16]
 8005c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	4a13      	ldr	r2, [pc, #76]	; (8005c5c <xTaskRemoveFromEventList+0xb4>)
 8005c10:	441a      	add	r2, r3
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	3304      	adds	r3, #4
 8005c16:	4619      	mov	r1, r3
 8005c18:	4610      	mov	r0, r2
 8005c1a:	f7fe fe18 	bl	800484e <vListInsertEnd>
 8005c1e:	e005      	b.n	8005c2c <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	3318      	adds	r3, #24
 8005c24:	4619      	mov	r1, r3
 8005c26:	480e      	ldr	r0, [pc, #56]	; (8005c60 <xTaskRemoveFromEventList+0xb8>)
 8005c28:	f7fe fe11 	bl	800484e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c30:	4b0c      	ldr	r3, [pc, #48]	; (8005c64 <xTaskRemoveFromEventList+0xbc>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d905      	bls.n	8005c46 <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005c3e:	4b0a      	ldr	r3, [pc, #40]	; (8005c68 <xTaskRemoveFromEventList+0xc0>)
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e001      	b.n	8005c4a <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005c4a:	697b      	ldr	r3, [r7, #20]
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3718      	adds	r7, #24
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	20000ccc 	.word	0x20000ccc
 8005c58:	20000cac 	.word	0x20000cac
 8005c5c:	200007d4 	.word	0x200007d4
 8005c60:	20000c64 	.word	0x20000c64
 8005c64:	200007d0 	.word	0x200007d0
 8005c68:	20000cb8 	.word	0x20000cb8

08005c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <vTaskInternalSetTimeOutState+0x24>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005c7c:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <vTaskInternalSetTimeOutState+0x28>)
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	605a      	str	r2, [r3, #4]
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	20000cbc 	.word	0x20000cbc
 8005c94:	20000ca8 	.word	0x20000ca8

08005c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d109      	bne.n	8005cbc <xTaskCheckForTimeOut+0x24>
 8005ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cac:	f383 8811 	msr	BASEPRI, r3
 8005cb0:	f3bf 8f6f 	isb	sy
 8005cb4:	f3bf 8f4f 	dsb	sy
 8005cb8:	613b      	str	r3, [r7, #16]
 8005cba:	e7fe      	b.n	8005cba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d109      	bne.n	8005cd6 <xTaskCheckForTimeOut+0x3e>
 8005cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	60fb      	str	r3, [r7, #12]
 8005cd4:	e7fe      	b.n	8005cd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005cd6:	f000 fe69 	bl	80069ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005cda:	4b1d      	ldr	r3, [pc, #116]	; (8005d50 <xTaskCheckForTimeOut+0xb8>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	69ba      	ldr	r2, [r7, #24]
 8005ce6:	1ad3      	subs	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf2:	d102      	bne.n	8005cfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	61fb      	str	r3, [r7, #28]
 8005cf8:	e023      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <xTaskCheckForTimeOut+0xbc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	429a      	cmp	r2, r3
 8005d04:	d007      	beq.n	8005d16 <xTaskCheckForTimeOut+0x7e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	69ba      	ldr	r2, [r7, #24]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d302      	bcc.n	8005d16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005d10:	2301      	movs	r3, #1
 8005d12:	61fb      	str	r3, [r7, #28]
 8005d14:	e015      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	697a      	ldr	r2, [r7, #20]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d20b      	bcs.n	8005d38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f7ff ff9d 	bl	8005c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	61fb      	str	r3, [r7, #28]
 8005d36:	e004      	b.n	8005d42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005d42:	f000 fe61 	bl	8006a08 <vPortExitCritical>

	return xReturn;
 8005d46:	69fb      	ldr	r3, [r7, #28]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3720      	adds	r7, #32
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000ca8 	.word	0x20000ca8
 8005d54:	20000cbc 	.word	0x20000cbc

08005d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005d58:	b480      	push	{r7}
 8005d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005d5c:	4b03      	ldr	r3, [pc, #12]	; (8005d6c <vTaskMissedYield+0x14>)
 8005d5e:	2201      	movs	r2, #1
 8005d60:	601a      	str	r2, [r3, #0]
}
 8005d62:	bf00      	nop
 8005d64:	46bd      	mov	sp, r7
 8005d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6a:	4770      	bx	lr
 8005d6c:	20000cb8 	.word	0x20000cb8

08005d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b082      	sub	sp, #8
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005d78:	f000 f852 	bl	8005e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005d7c:	4b06      	ldr	r3, [pc, #24]	; (8005d98 <prvIdleTask+0x28>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	d9f9      	bls.n	8005d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005d84:	4b05      	ldr	r3, [pc, #20]	; (8005d9c <prvIdleTask+0x2c>)
 8005d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8a:	601a      	str	r2, [r3, #0]
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005d94:	e7f0      	b.n	8005d78 <prvIdleTask+0x8>
 8005d96:	bf00      	nop
 8005d98:	200007d4 	.word	0x200007d4
 8005d9c:	e000ed04 	.word	0xe000ed04

08005da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005da6:	2300      	movs	r3, #0
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	e00c      	b.n	8005dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	4613      	mov	r3, r2
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	4413      	add	r3, r2
 8005db4:	009b      	lsls	r3, r3, #2
 8005db6:	4a12      	ldr	r2, [pc, #72]	; (8005e00 <prvInitialiseTaskLists+0x60>)
 8005db8:	4413      	add	r3, r2
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f7fe fd1a 	bl	80047f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	607b      	str	r3, [r7, #4]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2b37      	cmp	r3, #55	; 0x37
 8005dca:	d9ef      	bls.n	8005dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005dcc:	480d      	ldr	r0, [pc, #52]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dce:	f7fe fd11 	bl	80047f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005dd2:	480d      	ldr	r0, [pc, #52]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005dd4:	f7fe fd0e 	bl	80047f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005dd8:	480c      	ldr	r0, [pc, #48]	; (8005e0c <prvInitialiseTaskLists+0x6c>)
 8005dda:	f7fe fd0b 	bl	80047f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005dde:	480c      	ldr	r0, [pc, #48]	; (8005e10 <prvInitialiseTaskLists+0x70>)
 8005de0:	f7fe fd08 	bl	80047f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005de4:	480b      	ldr	r0, [pc, #44]	; (8005e14 <prvInitialiseTaskLists+0x74>)
 8005de6:	f7fe fd05 	bl	80047f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005dea:	4b0b      	ldr	r3, [pc, #44]	; (8005e18 <prvInitialiseTaskLists+0x78>)
 8005dec:	4a05      	ldr	r2, [pc, #20]	; (8005e04 <prvInitialiseTaskLists+0x64>)
 8005dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005df0:	4b0a      	ldr	r3, [pc, #40]	; (8005e1c <prvInitialiseTaskLists+0x7c>)
 8005df2:	4a05      	ldr	r2, [pc, #20]	; (8005e08 <prvInitialiseTaskLists+0x68>)
 8005df4:	601a      	str	r2, [r3, #0]
}
 8005df6:	bf00      	nop
 8005df8:	3708      	adds	r7, #8
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	200007d4 	.word	0x200007d4
 8005e04:	20000c34 	.word	0x20000c34
 8005e08:	20000c48 	.word	0x20000c48
 8005e0c:	20000c64 	.word	0x20000c64
 8005e10:	20000c78 	.word	0x20000c78
 8005e14:	20000c90 	.word	0x20000c90
 8005e18:	20000c5c 	.word	0x20000c5c
 8005e1c:	20000c60 	.word	0x20000c60

08005e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e26:	e019      	b.n	8005e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005e28:	f000 fdc0 	bl	80069ac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <prvCheckTasksWaitingTermination+0x4c>)
 8005e2e:	68db      	ldr	r3, [r3, #12]
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	3304      	adds	r3, #4
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fe fd65 	bl	8004908 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005e3e:	4b0c      	ldr	r3, [pc, #48]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3b01      	subs	r3, #1
 8005e44:	4a0a      	ldr	r2, [pc, #40]	; (8005e70 <prvCheckTasksWaitingTermination+0x50>)
 8005e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005e48:	4b0a      	ldr	r3, [pc, #40]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	4a09      	ldr	r2, [pc, #36]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005e52:	f000 fdd9 	bl	8006a08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f80e 	bl	8005e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005e5c:	4b05      	ldr	r3, [pc, #20]	; (8005e74 <prvCheckTasksWaitingTermination+0x54>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1e1      	bne.n	8005e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005e64:	bf00      	nop
 8005e66:	3708      	adds	r7, #8
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20000c78 	.word	0x20000c78
 8005e70:	20000ca4 	.word	0x20000ca4
 8005e74:	20000c8c 	.word	0x20000c8c

08005e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b084      	sub	sp, #16
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff68 	bl	8006d64 <vPortFree>
				vPortFree( pxTCB );
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 ff65 	bl	8006d64 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e9a:	e017      	b.n	8005ecc <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d103      	bne.n	8005eae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 ff5c 	bl	8006d64 <vPortFree>
	}
 8005eac:	e00e      	b.n	8005ecc <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d009      	beq.n	8005ecc <prvDeleteTCB+0x54>
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e7fe      	b.n	8005eca <prvDeleteTCB+0x52>
	}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}

08005ed4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005ed4:	b480      	push	{r7}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005eda:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <prvResetNextTaskUnblockTime+0x38>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d104      	bne.n	8005eee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005ee4:	4b0a      	ldr	r3, [pc, #40]	; (8005f10 <prvResetNextTaskUnblockTime+0x3c>)
 8005ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8005eea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005eec:	e008      	b.n	8005f00 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eee:	4b07      	ldr	r3, [pc, #28]	; (8005f0c <prvResetNextTaskUnblockTime+0x38>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	4a04      	ldr	r2, [pc, #16]	; (8005f10 <prvResetNextTaskUnblockTime+0x3c>)
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr
 8005f0c:	20000c5c 	.word	0x20000c5c
 8005f10:	20000cc4 	.word	0x20000cc4

08005f14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005f14:	b480      	push	{r7}
 8005f16:	b083      	sub	sp, #12
 8005f18:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005f1a:	4b0b      	ldr	r3, [pc, #44]	; (8005f48 <xTaskGetSchedulerState+0x34>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d102      	bne.n	8005f28 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005f22:	2301      	movs	r3, #1
 8005f24:	607b      	str	r3, [r7, #4]
 8005f26:	e008      	b.n	8005f3a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f28:	4b08      	ldr	r3, [pc, #32]	; (8005f4c <xTaskGetSchedulerState+0x38>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005f30:	2302      	movs	r3, #2
 8005f32:	607b      	str	r3, [r7, #4]
 8005f34:	e001      	b.n	8005f3a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005f36:	2300      	movs	r3, #0
 8005f38:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005f3a:	687b      	ldr	r3, [r7, #4]
	}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	20000cb0 	.word	0x20000cb0
 8005f4c:	20000ccc 	.word	0x20000ccc

08005f50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d054      	beq.n	8006010 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f66:	4b2d      	ldr	r3, [pc, #180]	; (800601c <xTaskPriorityDisinherit+0xcc>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	693a      	ldr	r2, [r7, #16]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d009      	beq.n	8005f84 <xTaskPriorityDisinherit+0x34>
 8005f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f74:	f383 8811 	msr	BASEPRI, r3
 8005f78:	f3bf 8f6f 	isb	sy
 8005f7c:	f3bf 8f4f 	dsb	sy
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	e7fe      	b.n	8005f82 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <xTaskPriorityDisinherit+0x50>
 8005f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f90:	f383 8811 	msr	BASEPRI, r3
 8005f94:	f3bf 8f6f 	isb	sy
 8005f98:	f3bf 8f4f 	dsb	sy
 8005f9c:	60bb      	str	r3, [r7, #8]
 8005f9e:	e7fe      	b.n	8005f9e <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fa4:	1e5a      	subs	r2, r3, #1
 8005fa6:	693b      	ldr	r3, [r7, #16]
 8005fa8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d02c      	beq.n	8006010 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d128      	bne.n	8006010 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fbe:	693b      	ldr	r3, [r7, #16]
 8005fc0:	3304      	adds	r3, #4
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7fe fca0 	bl	8004908 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005fcc:	693b      	ldr	r3, [r7, #16]
 8005fce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe0:	4b0f      	ldr	r3, [pc, #60]	; (8006020 <xTaskPriorityDisinherit+0xd0>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d903      	bls.n	8005ff0 <xTaskPriorityDisinherit+0xa0>
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fec:	4a0c      	ldr	r2, [pc, #48]	; (8006020 <xTaskPriorityDisinherit+0xd0>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	4613      	mov	r3, r2
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	009b      	lsls	r3, r3, #2
 8005ffc:	4a09      	ldr	r2, [pc, #36]	; (8006024 <xTaskPriorityDisinherit+0xd4>)
 8005ffe:	441a      	add	r2, r3
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	3304      	adds	r3, #4
 8006004:	4619      	mov	r1, r3
 8006006:	4610      	mov	r0, r2
 8006008:	f7fe fc21 	bl	800484e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006010:	697b      	ldr	r3, [r7, #20]
	}
 8006012:	4618      	mov	r0, r3
 8006014:	3718      	adds	r7, #24
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	200007d0 	.word	0x200007d0
 8006020:	20000cac 	.word	0x20000cac
 8006024:	200007d4 	.word	0x200007d4

08006028 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006028:	b580      	push	{r7, lr}
 800602a:	b084      	sub	sp, #16
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
 8006030:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006032:	4b21      	ldr	r3, [pc, #132]	; (80060b8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006038:	4b20      	ldr	r3, [pc, #128]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	3304      	adds	r3, #4
 800603e:	4618      	mov	r0, r3
 8006040:	f7fe fc62 	bl	8004908 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800604a:	d10a      	bne.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d007      	beq.n	8006062 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006052:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3304      	adds	r3, #4
 8006058:	4619      	mov	r1, r3
 800605a:	4819      	ldr	r0, [pc, #100]	; (80060c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800605c:	f7fe fbf7 	bl	800484e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006060:	e026      	b.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006062:	68fa      	ldr	r2, [r7, #12]
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	4413      	add	r3, r2
 8006068:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800606a:	4b14      	ldr	r3, [pc, #80]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68ba      	ldr	r2, [r7, #8]
 8006070:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006072:	68ba      	ldr	r2, [r7, #8]
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	429a      	cmp	r2, r3
 8006078:	d209      	bcs.n	800608e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800607a:	4b12      	ldr	r3, [pc, #72]	; (80060c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	4b0f      	ldr	r3, [pc, #60]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	3304      	adds	r3, #4
 8006084:	4619      	mov	r1, r3
 8006086:	4610      	mov	r0, r2
 8006088:	f7fe fc05 	bl	8004896 <vListInsert>
}
 800608c:	e010      	b.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800608e:	4b0e      	ldr	r3, [pc, #56]	; (80060c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <prvAddCurrentTaskToDelayedList+0x94>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3304      	adds	r3, #4
 8006098:	4619      	mov	r1, r3
 800609a:	4610      	mov	r0, r2
 800609c:	f7fe fbfb 	bl	8004896 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80060a0:	4b0a      	ldr	r3, [pc, #40]	; (80060cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68ba      	ldr	r2, [r7, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d202      	bcs.n	80060b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80060aa:	4a08      	ldr	r2, [pc, #32]	; (80060cc <prvAddCurrentTaskToDelayedList+0xa4>)
 80060ac:	68bb      	ldr	r3, [r7, #8]
 80060ae:	6013      	str	r3, [r2, #0]
}
 80060b0:	bf00      	nop
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}
 80060b8:	20000ca8 	.word	0x20000ca8
 80060bc:	200007d0 	.word	0x200007d0
 80060c0:	20000c90 	.word	0x20000c90
 80060c4:	20000c60 	.word	0x20000c60
 80060c8:	20000c5c 	.word	0x20000c5c
 80060cc:	20000cc4 	.word	0x20000cc4

080060d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b08a      	sub	sp, #40	; 0x28
 80060d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80060d6:	2300      	movs	r3, #0
 80060d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80060da:	f000 faff 	bl	80066dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80060de:	4b1c      	ldr	r3, [pc, #112]	; (8006150 <xTimerCreateTimerTask+0x80>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d021      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060ea:	2300      	movs	r3, #0
 80060ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060ee:	1d3a      	adds	r2, r7, #4
 80060f0:	f107 0108 	add.w	r1, r7, #8
 80060f4:	f107 030c 	add.w	r3, r7, #12
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7fe fb61 	bl	80047c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060fe:	6879      	ldr	r1, [r7, #4]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	68fa      	ldr	r2, [r7, #12]
 8006104:	9202      	str	r2, [sp, #8]
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	2302      	movs	r3, #2
 800610a:	9300      	str	r3, [sp, #0]
 800610c:	2300      	movs	r3, #0
 800610e:	460a      	mov	r2, r1
 8006110:	4910      	ldr	r1, [pc, #64]	; (8006154 <xTimerCreateTimerTask+0x84>)
 8006112:	4811      	ldr	r0, [pc, #68]	; (8006158 <xTimerCreateTimerTask+0x88>)
 8006114:	f7ff f8f6 	bl	8005304 <xTaskCreateStatic>
 8006118:	4602      	mov	r2, r0
 800611a:	4b10      	ldr	r3, [pc, #64]	; (800615c <xTimerCreateTimerTask+0x8c>)
 800611c:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800611e:	4b0f      	ldr	r3, [pc, #60]	; (800615c <xTimerCreateTimerTask+0x8c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006126:	2301      	movs	r3, #1
 8006128:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <xTimerCreateTimerTask+0x74>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	613b      	str	r3, [r7, #16]
 8006142:	e7fe      	b.n	8006142 <xTimerCreateTimerTask+0x72>
	return xReturn;
 8006144:	697b      	ldr	r3, [r7, #20]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3718      	adds	r7, #24
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20000d00 	.word	0x20000d00
 8006154:	08007858 	.word	0x08007858
 8006158:	08006291 	.word	0x08006291
 800615c:	20000d04 	.word	0x20000d04

08006160 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006160:	b580      	push	{r7, lr}
 8006162:	b08a      	sub	sp, #40	; 0x28
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800616e:	2300      	movs	r3, #0
 8006170:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2b00      	cmp	r3, #0
 8006176:	d109      	bne.n	800618c <xTimerGenericCommand+0x2c>
 8006178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800617c:	f383 8811 	msr	BASEPRI, r3
 8006180:	f3bf 8f6f 	isb	sy
 8006184:	f3bf 8f4f 	dsb	sy
 8006188:	623b      	str	r3, [r7, #32]
 800618a:	e7fe      	b.n	800618a <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800618c:	4b19      	ldr	r3, [pc, #100]	; (80061f4 <xTimerGenericCommand+0x94>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d02a      	beq.n	80061ea <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	dc18      	bgt.n	80061d8 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80061a6:	f7ff feb5 	bl	8005f14 <xTaskGetSchedulerState>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d109      	bne.n	80061c4 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80061b0:	4b10      	ldr	r3, [pc, #64]	; (80061f4 <xTimerGenericCommand+0x94>)
 80061b2:	6818      	ldr	r0, [r3, #0]
 80061b4:	f107 0110 	add.w	r1, r7, #16
 80061b8:	2300      	movs	r3, #0
 80061ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80061bc:	f7fe fccc 	bl	8004b58 <xQueueGenericSend>
 80061c0:	6278      	str	r0, [r7, #36]	; 0x24
 80061c2:	e012      	b.n	80061ea <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80061c4:	4b0b      	ldr	r3, [pc, #44]	; (80061f4 <xTimerGenericCommand+0x94>)
 80061c6:	6818      	ldr	r0, [r3, #0]
 80061c8:	f107 0110 	add.w	r1, r7, #16
 80061cc:	2300      	movs	r3, #0
 80061ce:	2200      	movs	r2, #0
 80061d0:	f7fe fcc2 	bl	8004b58 <xQueueGenericSend>
 80061d4:	6278      	str	r0, [r7, #36]	; 0x24
 80061d6:	e008      	b.n	80061ea <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80061d8:	4b06      	ldr	r3, [pc, #24]	; (80061f4 <xTimerGenericCommand+0x94>)
 80061da:	6818      	ldr	r0, [r3, #0]
 80061dc:	f107 0110 	add.w	r1, r7, #16
 80061e0:	2300      	movs	r3, #0
 80061e2:	683a      	ldr	r2, [r7, #0]
 80061e4:	f7fe fdb2 	bl	8004d4c <xQueueGenericSendFromISR>
 80061e8:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061ec:	4618      	mov	r0, r3
 80061ee:	3728      	adds	r7, #40	; 0x28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	bd80      	pop	{r7, pc}
 80061f4:	20000d00 	.word	0x20000d00

080061f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b088      	sub	sp, #32
 80061fc:	af02      	add	r7, sp, #8
 80061fe:	6078      	str	r0, [r7, #4]
 8006200:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <prvProcessExpiredTimer+0x94>)
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	68db      	ldr	r3, [r3, #12]
 8006208:	68db      	ldr	r3, [r3, #12]
 800620a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	3304      	adds	r3, #4
 8006210:	4618      	mov	r0, r3
 8006212:	f7fe fb79 	bl	8004908 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800621c:	f003 0304 	and.w	r3, r3, #4
 8006220:	2b00      	cmp	r3, #0
 8006222:	d021      	beq.n	8006268 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	699a      	ldr	r2, [r3, #24]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	18d1      	adds	r1, r2, r3
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	6978      	ldr	r0, [r7, #20]
 8006232:	f000 f8d1 	bl	80063d8 <prvInsertTimerInActiveList>
 8006236:	4603      	mov	r3, r0
 8006238:	2b00      	cmp	r3, #0
 800623a:	d01e      	beq.n	800627a <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800623c:	2300      	movs	r3, #0
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	2300      	movs	r3, #0
 8006242:	687a      	ldr	r2, [r7, #4]
 8006244:	2100      	movs	r1, #0
 8006246:	6978      	ldr	r0, [r7, #20]
 8006248:	f7ff ff8a 	bl	8006160 <xTimerGenericCommand>
 800624c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d112      	bne.n	800627a <prvProcessExpiredTimer+0x82>
 8006254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006258:	f383 8811 	msr	BASEPRI, r3
 800625c:	f3bf 8f6f 	isb	sy
 8006260:	f3bf 8f4f 	dsb	sy
 8006264:	60fb      	str	r3, [r7, #12]
 8006266:	e7fe      	b.n	8006266 <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800626e:	f023 0301 	bic.w	r3, r3, #1
 8006272:	b2da      	uxtb	r2, r3
 8006274:	697b      	ldr	r3, [r7, #20]
 8006276:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	6978      	ldr	r0, [r7, #20]
 8006280:	4798      	blx	r3
}
 8006282:	bf00      	nop
 8006284:	3718      	adds	r7, #24
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000cf8 	.word	0x20000cf8

08006290 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006298:	f107 0308 	add.w	r3, r7, #8
 800629c:	4618      	mov	r0, r3
 800629e:	f000 f857 	bl	8006350 <prvGetNextExpireTime>
 80062a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	4619      	mov	r1, r3
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 f803 	bl	80062b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80062ae:	f000 f8d5 	bl	800645c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80062b2:	e7f1      	b.n	8006298 <prvTimerTask+0x8>

080062b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80062be:	f7ff fa57 	bl	8005770 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80062c2:	f107 0308 	add.w	r3, r7, #8
 80062c6:	4618      	mov	r0, r3
 80062c8:	f000 f866 	bl	8006398 <prvSampleTimeNow>
 80062cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d130      	bne.n	8006336 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d10a      	bne.n	80062f0 <prvProcessTimerOrBlockTask+0x3c>
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d806      	bhi.n	80062f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062e2:	f7ff fa53 	bl	800578c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062e6:	68f9      	ldr	r1, [r7, #12]
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7ff ff85 	bl	80061f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ee:	e024      	b.n	800633a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d008      	beq.n	8006308 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062f6:	4b13      	ldr	r3, [pc, #76]	; (8006344 <prvProcessTimerOrBlockTask+0x90>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d101      	bne.n	8006304 <prvProcessTimerOrBlockTask+0x50>
 8006300:	2301      	movs	r3, #1
 8006302:	e000      	b.n	8006306 <prvProcessTimerOrBlockTask+0x52>
 8006304:	2300      	movs	r3, #0
 8006306:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006308:	4b0f      	ldr	r3, [pc, #60]	; (8006348 <prvProcessTimerOrBlockTask+0x94>)
 800630a:	6818      	ldr	r0, [r3, #0]
 800630c:	687a      	ldr	r2, [r7, #4]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4619      	mov	r1, r3
 8006316:	f7fe ffc1 	bl	800529c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800631a:	f7ff fa37 	bl	800578c <xTaskResumeAll>
 800631e:	4603      	mov	r3, r0
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006324:	4b09      	ldr	r3, [pc, #36]	; (800634c <prvProcessTimerOrBlockTask+0x98>)
 8006326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	f3bf 8f4f 	dsb	sy
 8006330:	f3bf 8f6f 	isb	sy
}
 8006334:	e001      	b.n	800633a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006336:	f7ff fa29 	bl	800578c <xTaskResumeAll>
}
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000cfc 	.word	0x20000cfc
 8006348:	20000d00 	.word	0x20000d00
 800634c:	e000ed04 	.word	0xe000ed04

08006350 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006350:	b480      	push	{r7}
 8006352:	b085      	sub	sp, #20
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006358:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <prvGetNextExpireTime+0x44>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <prvGetNextExpireTime+0x16>
 8006362:	2201      	movs	r2, #1
 8006364:	e000      	b.n	8006368 <prvGetNextExpireTime+0x18>
 8006366:	2200      	movs	r2, #0
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d105      	bne.n	8006380 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006374:	4b07      	ldr	r3, [pc, #28]	; (8006394 <prvGetNextExpireTime+0x44>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	60fb      	str	r3, [r7, #12]
 800637e:	e001      	b.n	8006384 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006384:	68fb      	ldr	r3, [r7, #12]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20000cf8 	.word	0x20000cf8

08006398 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80063a0:	f7ff fa90 	bl	80058c4 <xTaskGetTickCount>
 80063a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80063a6:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <prvSampleTimeNow+0x3c>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d205      	bcs.n	80063bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80063b0:	f000 f930 	bl	8006614 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
 80063ba:	e002      	b.n	80063c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80063c2:	4a04      	ldr	r2, [pc, #16]	; (80063d4 <prvSampleTimeNow+0x3c>)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80063c8:	68fb      	ldr	r3, [r7, #12]
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3710      	adds	r7, #16
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	bf00      	nop
 80063d4:	20000d08 	.word	0x20000d08

080063d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b086      	sub	sp, #24
 80063dc:	af00      	add	r7, sp, #0
 80063de:	60f8      	str	r0, [r7, #12]
 80063e0:	60b9      	str	r1, [r7, #8]
 80063e2:	607a      	str	r2, [r7, #4]
 80063e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063e6:	2300      	movs	r3, #0
 80063e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	68fa      	ldr	r2, [r7, #12]
 80063f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d812      	bhi.n	8006424 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	1ad2      	subs	r2, r2, r3
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	429a      	cmp	r2, r3
 800640a:	d302      	bcc.n	8006412 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800640c:	2301      	movs	r3, #1
 800640e:	617b      	str	r3, [r7, #20]
 8006410:	e01b      	b.n	800644a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006412:	4b10      	ldr	r3, [pc, #64]	; (8006454 <prvInsertTimerInActiveList+0x7c>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	3304      	adds	r3, #4
 800641a:	4619      	mov	r1, r3
 800641c:	4610      	mov	r0, r2
 800641e:	f7fe fa3a 	bl	8004896 <vListInsert>
 8006422:	e012      	b.n	800644a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006424:	687a      	ldr	r2, [r7, #4]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	429a      	cmp	r2, r3
 800642a:	d206      	bcs.n	800643a <prvInsertTimerInActiveList+0x62>
 800642c:	68ba      	ldr	r2, [r7, #8]
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	429a      	cmp	r2, r3
 8006432:	d302      	bcc.n	800643a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006434:	2301      	movs	r3, #1
 8006436:	617b      	str	r3, [r7, #20]
 8006438:	e007      	b.n	800644a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <prvInsertTimerInActiveList+0x80>)
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	3304      	adds	r3, #4
 8006442:	4619      	mov	r1, r3
 8006444:	4610      	mov	r0, r2
 8006446:	f7fe fa26 	bl	8004896 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800644a:	697b      	ldr	r3, [r7, #20]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	20000cfc 	.word	0x20000cfc
 8006458:	20000cf8 	.word	0x20000cf8

0800645c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b08e      	sub	sp, #56	; 0x38
 8006460:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006462:	e0c6      	b.n	80065f2 <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b00      	cmp	r3, #0
 8006468:	da17      	bge.n	800649a <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800646a:	1d3b      	adds	r3, r7, #4
 800646c:	3304      	adds	r3, #4
 800646e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <prvProcessReceivedCommands+0x2e>
 8006476:	f04f 0350 	mov.w	r3, #80	; 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	61fb      	str	r3, [r7, #28]
 8006488:	e7fe      	b.n	8006488 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800648a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006490:	6850      	ldr	r0, [r2, #4]
 8006492:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006494:	6892      	ldr	r2, [r2, #8]
 8006496:	4611      	mov	r1, r2
 8006498:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2b00      	cmp	r3, #0
 800649e:	f2c0 80a7 	blt.w	80065f0 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80064a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064a8:	695b      	ldr	r3, [r3, #20]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d004      	beq.n	80064b8 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80064ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b0:	3304      	adds	r3, #4
 80064b2:	4618      	mov	r0, r3
 80064b4:	f7fe fa28 	bl	8004908 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80064b8:	463b      	mov	r3, r7
 80064ba:	4618      	mov	r0, r3
 80064bc:	f7ff ff6c 	bl	8006398 <prvSampleTimeNow>
 80064c0:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b09      	cmp	r3, #9
 80064c6:	f200 8094 	bhi.w	80065f2 <prvProcessReceivedCommands+0x196>
 80064ca:	a201      	add	r2, pc, #4	; (adr r2, 80064d0 <prvProcessReceivedCommands+0x74>)
 80064cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064d0:	080064f9 	.word	0x080064f9
 80064d4:	080064f9 	.word	0x080064f9
 80064d8:	080064f9 	.word	0x080064f9
 80064dc:	0800656b 	.word	0x0800656b
 80064e0:	0800657f 	.word	0x0800657f
 80064e4:	080065c7 	.word	0x080065c7
 80064e8:	080064f9 	.word	0x080064f9
 80064ec:	080064f9 	.word	0x080064f9
 80064f0:	0800656b 	.word	0x0800656b
 80064f4:	0800657f 	.word	0x0800657f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064fa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064fe:	f043 0301 	orr.w	r3, r3, #1
 8006502:	b2da      	uxtb	r2, r3
 8006504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800650a:	68ba      	ldr	r2, [r7, #8]
 800650c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	18d1      	adds	r1, r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006518:	f7ff ff5e 	bl	80063d8 <prvInsertTimerInActiveList>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d067      	beq.n	80065f2 <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006522:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006524:	6a1b      	ldr	r3, [r3, #32]
 8006526:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006528:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006530:	f003 0304 	and.w	r3, r3, #4
 8006534:	2b00      	cmp	r3, #0
 8006536:	d05c      	beq.n	80065f2 <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653c:	699b      	ldr	r3, [r3, #24]
 800653e:	441a      	add	r2, r3
 8006540:	2300      	movs	r3, #0
 8006542:	9300      	str	r3, [sp, #0]
 8006544:	2300      	movs	r3, #0
 8006546:	2100      	movs	r1, #0
 8006548:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800654a:	f7ff fe09 	bl	8006160 <xTimerGenericCommand>
 800654e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006550:	6a3b      	ldr	r3, [r7, #32]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d14d      	bne.n	80065f2 <prvProcessReceivedCommands+0x196>
 8006556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655a:	f383 8811 	msr	BASEPRI, r3
 800655e:	f3bf 8f6f 	isb	sy
 8006562:	f3bf 8f4f 	dsb	sy
 8006566:	61bb      	str	r3, [r7, #24]
 8006568:	e7fe      	b.n	8006568 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800656a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800656c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006570:	f023 0301 	bic.w	r3, r3, #1
 8006574:	b2da      	uxtb	r2, r3
 8006576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800657c:	e039      	b.n	80065f2 <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006584:	f043 0301 	orr.w	r3, r3, #1
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006598:	699b      	ldr	r3, [r3, #24]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d109      	bne.n	80065b2 <prvProcessReceivedCommands+0x156>
 800659e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	617b      	str	r3, [r7, #20]
 80065b0:	e7fe      	b.n	80065b0 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80065b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b4:	699a      	ldr	r2, [r3, #24]
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	18d1      	adds	r1, r2, r3
 80065ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065c0:	f7ff ff0a 	bl	80063d8 <prvInsertTimerInActiveList>
					break;
 80065c4:	e015      	b.n	80065f2 <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80065c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065cc:	f003 0302 	and.w	r3, r3, #2
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d103      	bne.n	80065dc <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 80065d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d6:	f000 fbc5 	bl	8006d64 <vPortFree>
 80065da:	e00a      	b.n	80065f2 <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065e2:	f023 0301 	bic.w	r3, r3, #1
 80065e6:	b2da      	uxtb	r2, r3
 80065e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065ee:	e000      	b.n	80065f2 <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065f0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065f2:	4b07      	ldr	r3, [pc, #28]	; (8006610 <prvProcessReceivedCommands+0x1b4>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	1d39      	adds	r1, r7, #4
 80065f8:	2200      	movs	r2, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fc3a 	bl	8004e74 <xQueueReceive>
 8006600:	4603      	mov	r3, r0
 8006602:	2b00      	cmp	r3, #0
 8006604:	f47f af2e 	bne.w	8006464 <prvProcessReceivedCommands+0x8>
	}
}
 8006608:	bf00      	nop
 800660a:	3730      	adds	r7, #48	; 0x30
 800660c:	46bd      	mov	sp, r7
 800660e:	bd80      	pop	{r7, pc}
 8006610:	20000d00 	.word	0x20000d00

08006614 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800661a:	e047      	b.n	80066ac <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800661c:	4b2d      	ldr	r3, [pc, #180]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006626:	4b2b      	ldr	r3, [pc, #172]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	3304      	adds	r3, #4
 8006634:	4618      	mov	r0, r3
 8006636:	f7fe f967 	bl	8004908 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006648:	f003 0304 	and.w	r3, r3, #4
 800664c:	2b00      	cmp	r3, #0
 800664e:	d02d      	beq.n	80066ac <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	699b      	ldr	r3, [r3, #24]
 8006654:	693a      	ldr	r2, [r7, #16]
 8006656:	4413      	add	r3, r2
 8006658:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800665a:	68ba      	ldr	r2, [r7, #8]
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	429a      	cmp	r2, r3
 8006660:	d90e      	bls.n	8006680 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800666e:	4b19      	ldr	r3, [pc, #100]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	3304      	adds	r3, #4
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7fe f90c 	bl	8004896 <vListInsert>
 800667e:	e015      	b.n	80066ac <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006680:	2300      	movs	r3, #0
 8006682:	9300      	str	r3, [sp, #0]
 8006684:	2300      	movs	r3, #0
 8006686:	693a      	ldr	r2, [r7, #16]
 8006688:	2100      	movs	r1, #0
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7ff fd68 	bl	8006160 <xTimerGenericCommand>
 8006690:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d109      	bne.n	80066ac <prvSwitchTimerLists+0x98>
 8006698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800669c:	f383 8811 	msr	BASEPRI, r3
 80066a0:	f3bf 8f6f 	isb	sy
 80066a4:	f3bf 8f4f 	dsb	sy
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	e7fe      	b.n	80066aa <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80066ac:	4b09      	ldr	r3, [pc, #36]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1b2      	bne.n	800661c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80066b6:	4b07      	ldr	r3, [pc, #28]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80066bc:	4b06      	ldr	r3, [pc, #24]	; (80066d8 <prvSwitchTimerLists+0xc4>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a04      	ldr	r2, [pc, #16]	; (80066d4 <prvSwitchTimerLists+0xc0>)
 80066c2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80066c4:	4a04      	ldr	r2, [pc, #16]	; (80066d8 <prvSwitchTimerLists+0xc4>)
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	6013      	str	r3, [r2, #0]
}
 80066ca:	bf00      	nop
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	20000cf8 	.word	0x20000cf8
 80066d8:	20000cfc 	.word	0x20000cfc

080066dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b082      	sub	sp, #8
 80066e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066e2:	f000 f963 	bl	80069ac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066e6:	4b15      	ldr	r3, [pc, #84]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d120      	bne.n	8006730 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ee:	4814      	ldr	r0, [pc, #80]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066f0:	f7fe f880 	bl	80047f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066f4:	4813      	ldr	r0, [pc, #76]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 80066f6:	f7fe f87d 	bl	80047f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066fa:	4b13      	ldr	r3, [pc, #76]	; (8006748 <prvCheckForValidListAndQueue+0x6c>)
 80066fc:	4a10      	ldr	r2, [pc, #64]	; (8006740 <prvCheckForValidListAndQueue+0x64>)
 80066fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006700:	4b12      	ldr	r3, [pc, #72]	; (800674c <prvCheckForValidListAndQueue+0x70>)
 8006702:	4a10      	ldr	r2, [pc, #64]	; (8006744 <prvCheckForValidListAndQueue+0x68>)
 8006704:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006706:	2300      	movs	r3, #0
 8006708:	9300      	str	r3, [sp, #0]
 800670a:	4b11      	ldr	r3, [pc, #68]	; (8006750 <prvCheckForValidListAndQueue+0x74>)
 800670c:	4a11      	ldr	r2, [pc, #68]	; (8006754 <prvCheckForValidListAndQueue+0x78>)
 800670e:	2110      	movs	r1, #16
 8006710:	200a      	movs	r0, #10
 8006712:	f7fe f98b 	bl	8004a2c <xQueueGenericCreateStatic>
 8006716:	4602      	mov	r2, r0
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671a:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800671c:	4b07      	ldr	r3, [pc, #28]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d005      	beq.n	8006730 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006724:	4b05      	ldr	r3, [pc, #20]	; (800673c <prvCheckForValidListAndQueue+0x60>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	490b      	ldr	r1, [pc, #44]	; (8006758 <prvCheckForValidListAndQueue+0x7c>)
 800672a:	4618      	mov	r0, r3
 800672c:	f7fe fd8e 	bl	800524c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006730:	f000 f96a 	bl	8006a08 <vPortExitCritical>
}
 8006734:	bf00      	nop
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	20000d00 	.word	0x20000d00
 8006740:	20000cd0 	.word	0x20000cd0
 8006744:	20000ce4 	.word	0x20000ce4
 8006748:	20000cf8 	.word	0x20000cf8
 800674c:	20000cfc 	.word	0x20000cfc
 8006750:	20000dac 	.word	0x20000dac
 8006754:	20000d0c 	.word	0x20000d0c
 8006758:	08007860 	.word	0x08007860

0800675c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800675c:	b480      	push	{r7}
 800675e:	b085      	sub	sp, #20
 8006760:	af00      	add	r7, sp, #0
 8006762:	60f8      	str	r0, [r7, #12]
 8006764:	60b9      	str	r1, [r7, #8]
 8006766:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	3b04      	subs	r3, #4
 800676c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006774:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	3b04      	subs	r3, #4
 800677a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	f023 0201 	bic.w	r2, r3, #1
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	3b04      	subs	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800678c:	4a0c      	ldr	r2, [pc, #48]	; (80067c0 <pxPortInitialiseStack+0x64>)
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	3b14      	subs	r3, #20
 8006796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006798:	687a      	ldr	r2, [r7, #4]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	3b04      	subs	r3, #4
 80067a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f06f 0202 	mvn.w	r2, #2
 80067aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3b20      	subs	r3, #32
 80067b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80067b2:	68fb      	ldr	r3, [r7, #12]
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr
 80067c0:	080067c5 	.word	0x080067c5

080067c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80067ca:	2300      	movs	r3, #0
 80067cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80067ce:	4b11      	ldr	r3, [pc, #68]	; (8006814 <prvTaskExitError+0x50>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d6:	d009      	beq.n	80067ec <prvTaskExitError+0x28>
 80067d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067dc:	f383 8811 	msr	BASEPRI, r3
 80067e0:	f3bf 8f6f 	isb	sy
 80067e4:	f3bf 8f4f 	dsb	sy
 80067e8:	60fb      	str	r3, [r7, #12]
 80067ea:	e7fe      	b.n	80067ea <prvTaskExitError+0x26>
 80067ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f0:	f383 8811 	msr	BASEPRI, r3
 80067f4:	f3bf 8f6f 	isb	sy
 80067f8:	f3bf 8f4f 	dsb	sy
 80067fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067fe:	bf00      	nop
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0fc      	beq.n	8006800 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006806:	bf00      	nop
 8006808:	3714      	adds	r7, #20
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20000010 	.word	0x20000010
	...

08006820 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006820:	4b07      	ldr	r3, [pc, #28]	; (8006840 <pxCurrentTCBConst2>)
 8006822:	6819      	ldr	r1, [r3, #0]
 8006824:	6808      	ldr	r0, [r1, #0]
 8006826:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800682a:	f380 8809 	msr	PSP, r0
 800682e:	f3bf 8f6f 	isb	sy
 8006832:	f04f 0000 	mov.w	r0, #0
 8006836:	f380 8811 	msr	BASEPRI, r0
 800683a:	4770      	bx	lr
 800683c:	f3af 8000 	nop.w

08006840 <pxCurrentTCBConst2>:
 8006840:	200007d0 	.word	0x200007d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006844:	bf00      	nop
 8006846:	bf00      	nop

08006848 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006848:	4808      	ldr	r0, [pc, #32]	; (800686c <prvPortStartFirstTask+0x24>)
 800684a:	6800      	ldr	r0, [r0, #0]
 800684c:	6800      	ldr	r0, [r0, #0]
 800684e:	f380 8808 	msr	MSP, r0
 8006852:	f04f 0000 	mov.w	r0, #0
 8006856:	f380 8814 	msr	CONTROL, r0
 800685a:	b662      	cpsie	i
 800685c:	b661      	cpsie	f
 800685e:	f3bf 8f4f 	dsb	sy
 8006862:	f3bf 8f6f 	isb	sy
 8006866:	df00      	svc	0
 8006868:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800686a:	bf00      	nop
 800686c:	e000ed08 	.word	0xe000ed08

08006870 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006876:	4b44      	ldr	r3, [pc, #272]	; (8006988 <xPortStartScheduler+0x118>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a44      	ldr	r2, [pc, #272]	; (800698c <xPortStartScheduler+0x11c>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d109      	bne.n	8006894 <xPortStartScheduler+0x24>
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
 8006892:	e7fe      	b.n	8006892 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006894:	4b3c      	ldr	r3, [pc, #240]	; (8006988 <xPortStartScheduler+0x118>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a3d      	ldr	r2, [pc, #244]	; (8006990 <xPortStartScheduler+0x120>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d109      	bne.n	80068b2 <xPortStartScheduler+0x42>
 800689e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a2:	f383 8811 	msr	BASEPRI, r3
 80068a6:	f3bf 8f6f 	isb	sy
 80068aa:	f3bf 8f4f 	dsb	sy
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	e7fe      	b.n	80068b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80068b2:	4b38      	ldr	r3, [pc, #224]	; (8006994 <xPortStartScheduler+0x124>)
 80068b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80068c4:	697b      	ldr	r3, [r7, #20]
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068cc:	78fb      	ldrb	r3, [r7, #3]
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068d4:	b2da      	uxtb	r2, r3
 80068d6:	4b30      	ldr	r3, [pc, #192]	; (8006998 <xPortStartScheduler+0x128>)
 80068d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068da:	4b30      	ldr	r3, [pc, #192]	; (800699c <xPortStartScheduler+0x12c>)
 80068dc:	2207      	movs	r2, #7
 80068de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068e0:	e009      	b.n	80068f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80068e2:	4b2e      	ldr	r3, [pc, #184]	; (800699c <xPortStartScheduler+0x12c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	3b01      	subs	r3, #1
 80068e8:	4a2c      	ldr	r2, [pc, #176]	; (800699c <xPortStartScheduler+0x12c>)
 80068ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068ec:	78fb      	ldrb	r3, [r7, #3]
 80068ee:	b2db      	uxtb	r3, r3
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068f6:	78fb      	ldrb	r3, [r7, #3]
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	2b80      	cmp	r3, #128	; 0x80
 8006900:	d0ef      	beq.n	80068e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006902:	4b26      	ldr	r3, [pc, #152]	; (800699c <xPortStartScheduler+0x12c>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f1c3 0307 	rsb	r3, r3, #7
 800690a:	2b04      	cmp	r3, #4
 800690c:	d009      	beq.n	8006922 <xPortStartScheduler+0xb2>
 800690e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006912:	f383 8811 	msr	BASEPRI, r3
 8006916:	f3bf 8f6f 	isb	sy
 800691a:	f3bf 8f4f 	dsb	sy
 800691e:	60bb      	str	r3, [r7, #8]
 8006920:	e7fe      	b.n	8006920 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006922:	4b1e      	ldr	r3, [pc, #120]	; (800699c <xPortStartScheduler+0x12c>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	021b      	lsls	r3, r3, #8
 8006928:	4a1c      	ldr	r2, [pc, #112]	; (800699c <xPortStartScheduler+0x12c>)
 800692a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800692c:	4b1b      	ldr	r3, [pc, #108]	; (800699c <xPortStartScheduler+0x12c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006934:	4a19      	ldr	r2, [pc, #100]	; (800699c <xPortStartScheduler+0x12c>)
 8006936:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	b2da      	uxtb	r2, r3
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006940:	4b17      	ldr	r3, [pc, #92]	; (80069a0 <xPortStartScheduler+0x130>)
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a16      	ldr	r2, [pc, #88]	; (80069a0 <xPortStartScheduler+0x130>)
 8006946:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800694a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800694c:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <xPortStartScheduler+0x130>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a13      	ldr	r2, [pc, #76]	; (80069a0 <xPortStartScheduler+0x130>)
 8006952:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006956:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006958:	f000 f8d6 	bl	8006b08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800695c:	4b11      	ldr	r3, [pc, #68]	; (80069a4 <xPortStartScheduler+0x134>)
 800695e:	2200      	movs	r2, #0
 8006960:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006962:	f000 f8f5 	bl	8006b50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <xPortStartScheduler+0x138>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a0f      	ldr	r2, [pc, #60]	; (80069a8 <xPortStartScheduler+0x138>)
 800696c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006970:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006972:	f7ff ff69 	bl	8006848 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006976:	f7ff f86d 	bl	8005a54 <vTaskSwitchContext>
	prvTaskExitError();
 800697a:	f7ff ff23 	bl	80067c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	e000ed00 	.word	0xe000ed00
 800698c:	410fc271 	.word	0x410fc271
 8006990:	410fc270 	.word	0x410fc270
 8006994:	e000e400 	.word	0xe000e400
 8006998:	20000dfc 	.word	0x20000dfc
 800699c:	20000e00 	.word	0x20000e00
 80069a0:	e000ed20 	.word	0xe000ed20
 80069a4:	20000010 	.word	0x20000010
 80069a8:	e000ef34 	.word	0xe000ef34

080069ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80069ac:	b480      	push	{r7}
 80069ae:	b083      	sub	sp, #12
 80069b0:	af00      	add	r7, sp, #0
 80069b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <vPortEnterCritical+0x54>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3301      	adds	r3, #1
 80069ca:	4a0d      	ldr	r2, [pc, #52]	; (8006a00 <vPortEnterCritical+0x54>)
 80069cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069ce:	4b0c      	ldr	r3, [pc, #48]	; (8006a00 <vPortEnterCritical+0x54>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d10e      	bne.n	80069f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069d6:	4b0b      	ldr	r3, [pc, #44]	; (8006a04 <vPortEnterCritical+0x58>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	b2db      	uxtb	r3, r3
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d009      	beq.n	80069f4 <vPortEnterCritical+0x48>
 80069e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e4:	f383 8811 	msr	BASEPRI, r3
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	f3bf 8f4f 	dsb	sy
 80069f0:	603b      	str	r3, [r7, #0]
 80069f2:	e7fe      	b.n	80069f2 <vPortEnterCritical+0x46>
	}
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	20000010 	.word	0x20000010
 8006a04:	e000ed04 	.word	0xe000ed04

08006a08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006a0e:	4b11      	ldr	r3, [pc, #68]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d109      	bne.n	8006a2a <vPortExitCritical+0x22>
 8006a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a1a:	f383 8811 	msr	BASEPRI, r3
 8006a1e:	f3bf 8f6f 	isb	sy
 8006a22:	f3bf 8f4f 	dsb	sy
 8006a26:	607b      	str	r3, [r7, #4]
 8006a28:	e7fe      	b.n	8006a28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8006a2a:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a34:	4b07      	ldr	r3, [pc, #28]	; (8006a54 <vPortExitCritical+0x4c>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d104      	bne.n	8006a46 <vPortExitCritical+0x3e>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a46:	bf00      	nop
 8006a48:	370c      	adds	r7, #12
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	20000010 	.word	0x20000010
	...

08006a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a60:	f3ef 8009 	mrs	r0, PSP
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	4b15      	ldr	r3, [pc, #84]	; (8006ac0 <pxCurrentTCBConst>)
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	f01e 0f10 	tst.w	lr, #16
 8006a70:	bf08      	it	eq
 8006a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a7a:	6010      	str	r0, [r2, #0]
 8006a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a84:	f380 8811 	msr	BASEPRI, r0
 8006a88:	f3bf 8f4f 	dsb	sy
 8006a8c:	f3bf 8f6f 	isb	sy
 8006a90:	f7fe ffe0 	bl	8005a54 <vTaskSwitchContext>
 8006a94:	f04f 0000 	mov.w	r0, #0
 8006a98:	f380 8811 	msr	BASEPRI, r0
 8006a9c:	bc09      	pop	{r0, r3}
 8006a9e:	6819      	ldr	r1, [r3, #0]
 8006aa0:	6808      	ldr	r0, [r1, #0]
 8006aa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa6:	f01e 0f10 	tst.w	lr, #16
 8006aaa:	bf08      	it	eq
 8006aac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006ab0:	f380 8809 	msr	PSP, r0
 8006ab4:	f3bf 8f6f 	isb	sy
 8006ab8:	4770      	bx	lr
 8006aba:	bf00      	nop
 8006abc:	f3af 8000 	nop.w

08006ac0 <pxCurrentTCBConst>:
 8006ac0:	200007d0 	.word	0x200007d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006ac4:	bf00      	nop
 8006ac6:	bf00      	nop

08006ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
	__asm volatile
 8006ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad2:	f383 8811 	msr	BASEPRI, r3
 8006ad6:	f3bf 8f6f 	isb	sy
 8006ada:	f3bf 8f4f 	dsb	sy
 8006ade:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ae0:	f7fe ff00 	bl	80058e4 <xTaskIncrementTick>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aea:	4b06      	ldr	r3, [pc, #24]	; (8006b04 <SysTick_Handler+0x3c>)
 8006aec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006af0:	601a      	str	r2, [r3, #0]
 8006af2:	2300      	movs	r3, #0
 8006af4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8006afc:	bf00      	nop
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	e000ed04 	.word	0xe000ed04

08006b08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006b08:	b480      	push	{r7}
 8006b0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006b0c:	4b0b      	ldr	r3, [pc, #44]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006b12:	4b0b      	ldr	r3, [pc, #44]	; (8006b40 <vPortSetupTimerInterrupt+0x38>)
 8006b14:	2200      	movs	r2, #0
 8006b16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006b18:	4b0a      	ldr	r3, [pc, #40]	; (8006b44 <vPortSetupTimerInterrupt+0x3c>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a0a      	ldr	r2, [pc, #40]	; (8006b48 <vPortSetupTimerInterrupt+0x40>)
 8006b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8006b22:	099b      	lsrs	r3, r3, #6
 8006b24:	4a09      	ldr	r2, [pc, #36]	; (8006b4c <vPortSetupTimerInterrupt+0x44>)
 8006b26:	3b01      	subs	r3, #1
 8006b28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b2a:	4b04      	ldr	r3, [pc, #16]	; (8006b3c <vPortSetupTimerInterrupt+0x34>)
 8006b2c:	2207      	movs	r2, #7
 8006b2e:	601a      	str	r2, [r3, #0]
}
 8006b30:	bf00      	nop
 8006b32:	46bd      	mov	sp, r7
 8006b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b38:	4770      	bx	lr
 8006b3a:	bf00      	nop
 8006b3c:	e000e010 	.word	0xe000e010
 8006b40:	e000e018 	.word	0xe000e018
 8006b44:	20000004 	.word	0x20000004
 8006b48:	10624dd3 	.word	0x10624dd3
 8006b4c:	e000e014 	.word	0xe000e014

08006b50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b60 <vPortEnableVFP+0x10>
 8006b54:	6801      	ldr	r1, [r0, #0]
 8006b56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b5a:	6001      	str	r1, [r0, #0]
 8006b5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b5e:	bf00      	nop
 8006b60:	e000ed88 	.word	0xe000ed88

08006b64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b6a:	f3ef 8305 	mrs	r3, IPSR
 8006b6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2b0f      	cmp	r3, #15
 8006b74:	d913      	bls.n	8006b9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b76:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <vPortValidateInterruptPriority+0x6c>)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	4413      	add	r3, r2
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b80:	4b14      	ldr	r3, [pc, #80]	; (8006bd4 <vPortValidateInterruptPriority+0x70>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	7afa      	ldrb	r2, [r7, #11]
 8006b86:	429a      	cmp	r2, r3
 8006b88:	d209      	bcs.n	8006b9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8006b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b8e:	f383 8811 	msr	BASEPRI, r3
 8006b92:	f3bf 8f6f 	isb	sy
 8006b96:	f3bf 8f4f 	dsb	sy
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	e7fe      	b.n	8006b9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b9e:	4b0e      	ldr	r3, [pc, #56]	; (8006bd8 <vPortValidateInterruptPriority+0x74>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006ba6:	4b0d      	ldr	r3, [pc, #52]	; (8006bdc <vPortValidateInterruptPriority+0x78>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d909      	bls.n	8006bc2 <vPortValidateInterruptPriority+0x5e>
 8006bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb2:	f383 8811 	msr	BASEPRI, r3
 8006bb6:	f3bf 8f6f 	isb	sy
 8006bba:	f3bf 8f4f 	dsb	sy
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	e7fe      	b.n	8006bc0 <vPortValidateInterruptPriority+0x5c>
	}
 8006bc2:	bf00      	nop
 8006bc4:	3714      	adds	r7, #20
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	e000e3f0 	.word	0xe000e3f0
 8006bd4:	20000dfc 	.word	0x20000dfc
 8006bd8:	e000ed0c 	.word	0xe000ed0c
 8006bdc:	20000e00 	.word	0x20000e00

08006be0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b08a      	sub	sp, #40	; 0x28
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006be8:	2300      	movs	r3, #0
 8006bea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bec:	f7fe fdc0 	bl	8005770 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bf0:	4b57      	ldr	r3, [pc, #348]	; (8006d50 <pvPortMalloc+0x170>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d101      	bne.n	8006bfc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bf8:	f000 f90c 	bl	8006e14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bfc:	4b55      	ldr	r3, [pc, #340]	; (8006d54 <pvPortMalloc+0x174>)
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	4013      	ands	r3, r2
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	f040 808c 	bne.w	8006d22 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d01c      	beq.n	8006c4a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006c10:	2208      	movs	r2, #8
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0307 	and.w	r3, r3, #7
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d013      	beq.n	8006c4a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f023 0307 	bic.w	r3, r3, #7
 8006c28:	3308      	adds	r3, #8
 8006c2a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	f003 0307 	and.w	r3, r3, #7
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d009      	beq.n	8006c4a <pvPortMalloc+0x6a>
 8006c36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c3a:	f383 8811 	msr	BASEPRI, r3
 8006c3e:	f3bf 8f6f 	isb	sy
 8006c42:	f3bf 8f4f 	dsb	sy
 8006c46:	617b      	str	r3, [r7, #20]
 8006c48:	e7fe      	b.n	8006c48 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d068      	beq.n	8006d22 <pvPortMalloc+0x142>
 8006c50:	4b41      	ldr	r3, [pc, #260]	; (8006d58 <pvPortMalloc+0x178>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	687a      	ldr	r2, [r7, #4]
 8006c56:	429a      	cmp	r2, r3
 8006c58:	d863      	bhi.n	8006d22 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c5a:	4b40      	ldr	r3, [pc, #256]	; (8006d5c <pvPortMalloc+0x17c>)
 8006c5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c5e:	4b3f      	ldr	r3, [pc, #252]	; (8006d5c <pvPortMalloc+0x17c>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c64:	e004      	b.n	8006c70 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	687a      	ldr	r2, [r7, #4]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d903      	bls.n	8006c82 <pvPortMalloc+0xa2>
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d1f1      	bne.n	8006c66 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c82:	4b33      	ldr	r3, [pc, #204]	; (8006d50 <pvPortMalloc+0x170>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d04a      	beq.n	8006d22 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c8c:	6a3b      	ldr	r3, [r7, #32]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	2208      	movs	r2, #8
 8006c92:	4413      	add	r3, r2
 8006c94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	6a3b      	ldr	r3, [r7, #32]
 8006c9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	1ad2      	subs	r2, r2, r3
 8006ca6:	2308      	movs	r3, #8
 8006ca8:	005b      	lsls	r3, r3, #1
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d91e      	bls.n	8006cec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006cae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f003 0307 	and.w	r3, r3, #7
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d009      	beq.n	8006cd4 <pvPortMalloc+0xf4>
 8006cc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc4:	f383 8811 	msr	BASEPRI, r3
 8006cc8:	f3bf 8f6f 	isb	sy
 8006ccc:	f3bf 8f4f 	dsb	sy
 8006cd0:	613b      	str	r3, [r7, #16]
 8006cd2:	e7fe      	b.n	8006cd2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cd6:	685a      	ldr	r2, [r3, #4]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	1ad2      	subs	r2, r2, r3
 8006cdc:	69bb      	ldr	r3, [r7, #24]
 8006cde:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce2:	687a      	ldr	r2, [r7, #4]
 8006ce4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006ce6:	69b8      	ldr	r0, [r7, #24]
 8006ce8:	f000 f8f6 	bl	8006ed8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cec:	4b1a      	ldr	r3, [pc, #104]	; (8006d58 <pvPortMalloc+0x178>)
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <pvPortMalloc+0x178>)
 8006cf8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cfa:	4b17      	ldr	r3, [pc, #92]	; (8006d58 <pvPortMalloc+0x178>)
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	4b18      	ldr	r3, [pc, #96]	; (8006d60 <pvPortMalloc+0x180>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	429a      	cmp	r2, r3
 8006d04:	d203      	bcs.n	8006d0e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006d06:	4b14      	ldr	r3, [pc, #80]	; (8006d58 <pvPortMalloc+0x178>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a15      	ldr	r2, [pc, #84]	; (8006d60 <pvPortMalloc+0x180>)
 8006d0c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d10:	685a      	ldr	r2, [r3, #4]
 8006d12:	4b10      	ldr	r3, [pc, #64]	; (8006d54 <pvPortMalloc+0x174>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	431a      	orrs	r2, r3
 8006d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d1e:	2200      	movs	r2, #0
 8006d20:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d22:	f7fe fd33 	bl	800578c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	f003 0307 	and.w	r3, r3, #7
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d009      	beq.n	8006d44 <pvPortMalloc+0x164>
 8006d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d34:	f383 8811 	msr	BASEPRI, r3
 8006d38:	f3bf 8f6f 	isb	sy
 8006d3c:	f3bf 8f4f 	dsb	sy
 8006d40:	60fb      	str	r3, [r7, #12]
 8006d42:	e7fe      	b.n	8006d42 <pvPortMalloc+0x162>
	return pvReturn;
 8006d44:	69fb      	ldr	r3, [r7, #28]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3728      	adds	r7, #40	; 0x28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20004a0c 	.word	0x20004a0c
 8006d54:	20004a18 	.word	0x20004a18
 8006d58:	20004a10 	.word	0x20004a10
 8006d5c:	20004a04 	.word	0x20004a04
 8006d60:	20004a14 	.word	0x20004a14

08006d64 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d046      	beq.n	8006e04 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d76:	2308      	movs	r3, #8
 8006d78:	425b      	negs	r3, r3
 8006d7a:	697a      	ldr	r2, [r7, #20]
 8006d7c:	4413      	add	r3, r2
 8006d7e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	4b20      	ldr	r3, [pc, #128]	; (8006e0c <vPortFree+0xa8>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4013      	ands	r3, r2
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <vPortFree+0x42>
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	60fb      	str	r3, [r7, #12]
 8006da4:	e7fe      	b.n	8006da4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d009      	beq.n	8006dc2 <vPortFree+0x5e>
 8006dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db2:	f383 8811 	msr	BASEPRI, r3
 8006db6:	f3bf 8f6f 	isb	sy
 8006dba:	f3bf 8f4f 	dsb	sy
 8006dbe:	60bb      	str	r3, [r7, #8]
 8006dc0:	e7fe      	b.n	8006dc0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <vPortFree+0xa8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d019      	beq.n	8006e04 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d115      	bne.n	8006e04 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0b      	ldr	r3, [pc, #44]	; (8006e0c <vPortFree+0xa8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006de8:	f7fe fcc2 	bl	8005770 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b07      	ldr	r3, [pc, #28]	; (8006e10 <vPortFree+0xac>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a06      	ldr	r2, [pc, #24]	; (8006e10 <vPortFree+0xac>)
 8006df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 f86c 	bl	8006ed8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006e00:	f7fe fcc4 	bl	800578c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e04:	bf00      	nop
 8006e06:	3718      	adds	r7, #24
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}
 8006e0c:	20004a18 	.word	0x20004a18
 8006e10:	20004a10 	.word	0x20004a10

08006e14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b085      	sub	sp, #20
 8006e18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e1a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8006e1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e20:	4b27      	ldr	r3, [pc, #156]	; (8006ec0 <prvHeapInit+0xac>)
 8006e22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f003 0307 	and.w	r3, r3, #7
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00c      	beq.n	8006e48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	3307      	adds	r3, #7
 8006e32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f023 0307 	bic.w	r3, r3, #7
 8006e3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e3c:	68ba      	ldr	r2, [r7, #8]
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	4a1f      	ldr	r2, [pc, #124]	; (8006ec0 <prvHeapInit+0xac>)
 8006e44:	4413      	add	r3, r2
 8006e46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e4c:	4a1d      	ldr	r2, [pc, #116]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e52:	4b1c      	ldr	r3, [pc, #112]	; (8006ec4 <prvHeapInit+0xb0>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68ba      	ldr	r2, [r7, #8]
 8006e5c:	4413      	add	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e60:	2208      	movs	r2, #8
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	1a9b      	subs	r3, r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	f023 0307 	bic.w	r3, r3, #7
 8006e6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4a15      	ldr	r2, [pc, #84]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e76:	4b14      	ldr	r3, [pc, #80]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e7e:	4b12      	ldr	r3, [pc, #72]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e8a:	683b      	ldr	r3, [r7, #0]
 8006e8c:	68fa      	ldr	r2, [r7, #12]
 8006e8e:	1ad2      	subs	r2, r2, r3
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e94:	4b0c      	ldr	r3, [pc, #48]	; (8006ec8 <prvHeapInit+0xb4>)
 8006e96:	681a      	ldr	r2, [r3, #0]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	4a0a      	ldr	r2, [pc, #40]	; (8006ecc <prvHeapInit+0xb8>)
 8006ea2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	685b      	ldr	r3, [r3, #4]
 8006ea8:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <prvHeapInit+0xbc>)
 8006eaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006eac:	4b09      	ldr	r3, [pc, #36]	; (8006ed4 <prvHeapInit+0xc0>)
 8006eae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006eb2:	601a      	str	r2, [r3, #0]
}
 8006eb4:	bf00      	nop
 8006eb6:	3714      	adds	r7, #20
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr
 8006ec0:	20000e04 	.word	0x20000e04
 8006ec4:	20004a04 	.word	0x20004a04
 8006ec8:	20004a0c 	.word	0x20004a0c
 8006ecc:	20004a14 	.word	0x20004a14
 8006ed0:	20004a10 	.word	0x20004a10
 8006ed4:	20004a18 	.word	0x20004a18

08006ed8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ee0:	4b28      	ldr	r3, [pc, #160]	; (8006f84 <prvInsertBlockIntoFreeList+0xac>)
 8006ee2:	60fb      	str	r3, [r7, #12]
 8006ee4:	e002      	b.n	8006eec <prvInsertBlockIntoFreeList+0x14>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	429a      	cmp	r2, r3
 8006ef4:	d8f7      	bhi.n	8006ee6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	685b      	ldr	r3, [r3, #4]
 8006efe:	68ba      	ldr	r2, [r7, #8]
 8006f00:	4413      	add	r3, r2
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	429a      	cmp	r2, r3
 8006f06:	d108      	bne.n	8006f1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	685a      	ldr	r2, [r3, #4]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	441a      	add	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	685b      	ldr	r3, [r3, #4]
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	441a      	add	r2, r3
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d118      	bne.n	8006f60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	4b15      	ldr	r3, [pc, #84]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	429a      	cmp	r2, r3
 8006f38:	d00d      	beq.n	8006f56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685b      	ldr	r3, [r3, #4]
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	681a      	ldr	r2, [r3, #0]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]
 8006f54:	e008      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f56:	4b0c      	ldr	r3, [pc, #48]	; (8006f88 <prvInsertBlockIntoFreeList+0xb0>)
 8006f58:	681a      	ldr	r2, [r3, #0]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	601a      	str	r2, [r3, #0]
 8006f5e:	e003      	b.n	8006f68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681a      	ldr	r2, [r3, #0]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d002      	beq.n	8006f76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	687a      	ldr	r2, [r7, #4]
 8006f74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f76:	bf00      	nop
 8006f78:	3714      	adds	r7, #20
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20004a04 	.word	0x20004a04
 8006f88:	20004a0c 	.word	0x20004a0c

08006f8c <__errno>:
 8006f8c:	4b01      	ldr	r3, [pc, #4]	; (8006f94 <__errno+0x8>)
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	20000014 	.word	0x20000014

08006f98 <__libc_init_array>:
 8006f98:	b570      	push	{r4, r5, r6, lr}
 8006f9a:	4e0d      	ldr	r6, [pc, #52]	; (8006fd0 <__libc_init_array+0x38>)
 8006f9c:	4c0d      	ldr	r4, [pc, #52]	; (8006fd4 <__libc_init_array+0x3c>)
 8006f9e:	1ba4      	subs	r4, r4, r6
 8006fa0:	10a4      	asrs	r4, r4, #2
 8006fa2:	2500      	movs	r5, #0
 8006fa4:	42a5      	cmp	r5, r4
 8006fa6:	d109      	bne.n	8006fbc <__libc_init_array+0x24>
 8006fa8:	4e0b      	ldr	r6, [pc, #44]	; (8006fd8 <__libc_init_array+0x40>)
 8006faa:	4c0c      	ldr	r4, [pc, #48]	; (8006fdc <__libc_init_array+0x44>)
 8006fac:	f000 fc28 	bl	8007800 <_init>
 8006fb0:	1ba4      	subs	r4, r4, r6
 8006fb2:	10a4      	asrs	r4, r4, #2
 8006fb4:	2500      	movs	r5, #0
 8006fb6:	42a5      	cmp	r5, r4
 8006fb8:	d105      	bne.n	8006fc6 <__libc_init_array+0x2e>
 8006fba:	bd70      	pop	{r4, r5, r6, pc}
 8006fbc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fc0:	4798      	blx	r3
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	e7ee      	b.n	8006fa4 <__libc_init_array+0xc>
 8006fc6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fca:	4798      	blx	r3
 8006fcc:	3501      	adds	r5, #1
 8006fce:	e7f2      	b.n	8006fb6 <__libc_init_array+0x1e>
 8006fd0:	0800a118 	.word	0x0800a118
 8006fd4:	0800a118 	.word	0x0800a118
 8006fd8:	0800a118 	.word	0x0800a118
 8006fdc:	0800a128 	.word	0x0800a128

08006fe0 <memcpy>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	1e43      	subs	r3, r0, #1
 8006fe4:	440a      	add	r2, r1
 8006fe6:	4291      	cmp	r1, r2
 8006fe8:	d100      	bne.n	8006fec <memcpy+0xc>
 8006fea:	bd10      	pop	{r4, pc}
 8006fec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ff0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ff4:	e7f7      	b.n	8006fe6 <memcpy+0x6>

08006ff6 <memset>:
 8006ff6:	4402      	add	r2, r0
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	4293      	cmp	r3, r2
 8006ffc:	d100      	bne.n	8007000 <memset+0xa>
 8006ffe:	4770      	bx	lr
 8007000:	f803 1b01 	strb.w	r1, [r3], #1
 8007004:	e7f9      	b.n	8006ffa <memset+0x4>
	...

08007008 <siprintf>:
 8007008:	b40e      	push	{r1, r2, r3}
 800700a:	b500      	push	{lr}
 800700c:	b09c      	sub	sp, #112	; 0x70
 800700e:	ab1d      	add	r3, sp, #116	; 0x74
 8007010:	9002      	str	r0, [sp, #8]
 8007012:	9006      	str	r0, [sp, #24]
 8007014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007018:	4809      	ldr	r0, [pc, #36]	; (8007040 <siprintf+0x38>)
 800701a:	9107      	str	r1, [sp, #28]
 800701c:	9104      	str	r1, [sp, #16]
 800701e:	4909      	ldr	r1, [pc, #36]	; (8007044 <siprintf+0x3c>)
 8007020:	f853 2b04 	ldr.w	r2, [r3], #4
 8007024:	9105      	str	r1, [sp, #20]
 8007026:	6800      	ldr	r0, [r0, #0]
 8007028:	9301      	str	r3, [sp, #4]
 800702a:	a902      	add	r1, sp, #8
 800702c:	f000 f866 	bl	80070fc <_svfiprintf_r>
 8007030:	9b02      	ldr	r3, [sp, #8]
 8007032:	2200      	movs	r2, #0
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	b01c      	add	sp, #112	; 0x70
 8007038:	f85d eb04 	ldr.w	lr, [sp], #4
 800703c:	b003      	add	sp, #12
 800703e:	4770      	bx	lr
 8007040:	20000014 	.word	0x20000014
 8007044:	ffff0208 	.word	0xffff0208

08007048 <__ssputs_r>:
 8007048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800704c:	688e      	ldr	r6, [r1, #8]
 800704e:	429e      	cmp	r6, r3
 8007050:	4682      	mov	sl, r0
 8007052:	460c      	mov	r4, r1
 8007054:	4690      	mov	r8, r2
 8007056:	4699      	mov	r9, r3
 8007058:	d837      	bhi.n	80070ca <__ssputs_r+0x82>
 800705a:	898a      	ldrh	r2, [r1, #12]
 800705c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007060:	d031      	beq.n	80070c6 <__ssputs_r+0x7e>
 8007062:	6825      	ldr	r5, [r4, #0]
 8007064:	6909      	ldr	r1, [r1, #16]
 8007066:	1a6f      	subs	r7, r5, r1
 8007068:	6965      	ldr	r5, [r4, #20]
 800706a:	2302      	movs	r3, #2
 800706c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007070:	fb95 f5f3 	sdiv	r5, r5, r3
 8007074:	f109 0301 	add.w	r3, r9, #1
 8007078:	443b      	add	r3, r7
 800707a:	429d      	cmp	r5, r3
 800707c:	bf38      	it	cc
 800707e:	461d      	movcc	r5, r3
 8007080:	0553      	lsls	r3, r2, #21
 8007082:	d530      	bpl.n	80070e6 <__ssputs_r+0x9e>
 8007084:	4629      	mov	r1, r5
 8007086:	f000 fb21 	bl	80076cc <_malloc_r>
 800708a:	4606      	mov	r6, r0
 800708c:	b950      	cbnz	r0, 80070a4 <__ssputs_r+0x5c>
 800708e:	230c      	movs	r3, #12
 8007090:	f8ca 3000 	str.w	r3, [sl]
 8007094:	89a3      	ldrh	r3, [r4, #12]
 8007096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a4:	463a      	mov	r2, r7
 80070a6:	6921      	ldr	r1, [r4, #16]
 80070a8:	f7ff ff9a 	bl	8006fe0 <memcpy>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070b6:	81a3      	strh	r3, [r4, #12]
 80070b8:	6126      	str	r6, [r4, #16]
 80070ba:	6165      	str	r5, [r4, #20]
 80070bc:	443e      	add	r6, r7
 80070be:	1bed      	subs	r5, r5, r7
 80070c0:	6026      	str	r6, [r4, #0]
 80070c2:	60a5      	str	r5, [r4, #8]
 80070c4:	464e      	mov	r6, r9
 80070c6:	454e      	cmp	r6, r9
 80070c8:	d900      	bls.n	80070cc <__ssputs_r+0x84>
 80070ca:	464e      	mov	r6, r9
 80070cc:	4632      	mov	r2, r6
 80070ce:	4641      	mov	r1, r8
 80070d0:	6820      	ldr	r0, [r4, #0]
 80070d2:	f000 fa93 	bl	80075fc <memmove>
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	1b9b      	subs	r3, r3, r6
 80070da:	60a3      	str	r3, [r4, #8]
 80070dc:	6823      	ldr	r3, [r4, #0]
 80070de:	441e      	add	r6, r3
 80070e0:	6026      	str	r6, [r4, #0]
 80070e2:	2000      	movs	r0, #0
 80070e4:	e7dc      	b.n	80070a0 <__ssputs_r+0x58>
 80070e6:	462a      	mov	r2, r5
 80070e8:	f000 fb4a 	bl	8007780 <_realloc_r>
 80070ec:	4606      	mov	r6, r0
 80070ee:	2800      	cmp	r0, #0
 80070f0:	d1e2      	bne.n	80070b8 <__ssputs_r+0x70>
 80070f2:	6921      	ldr	r1, [r4, #16]
 80070f4:	4650      	mov	r0, sl
 80070f6:	f000 fa9b 	bl	8007630 <_free_r>
 80070fa:	e7c8      	b.n	800708e <__ssputs_r+0x46>

080070fc <_svfiprintf_r>:
 80070fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007100:	461d      	mov	r5, r3
 8007102:	898b      	ldrh	r3, [r1, #12]
 8007104:	061f      	lsls	r7, r3, #24
 8007106:	b09d      	sub	sp, #116	; 0x74
 8007108:	4680      	mov	r8, r0
 800710a:	460c      	mov	r4, r1
 800710c:	4616      	mov	r6, r2
 800710e:	d50f      	bpl.n	8007130 <_svfiprintf_r+0x34>
 8007110:	690b      	ldr	r3, [r1, #16]
 8007112:	b96b      	cbnz	r3, 8007130 <_svfiprintf_r+0x34>
 8007114:	2140      	movs	r1, #64	; 0x40
 8007116:	f000 fad9 	bl	80076cc <_malloc_r>
 800711a:	6020      	str	r0, [r4, #0]
 800711c:	6120      	str	r0, [r4, #16]
 800711e:	b928      	cbnz	r0, 800712c <_svfiprintf_r+0x30>
 8007120:	230c      	movs	r3, #12
 8007122:	f8c8 3000 	str.w	r3, [r8]
 8007126:	f04f 30ff 	mov.w	r0, #4294967295
 800712a:	e0c8      	b.n	80072be <_svfiprintf_r+0x1c2>
 800712c:	2340      	movs	r3, #64	; 0x40
 800712e:	6163      	str	r3, [r4, #20]
 8007130:	2300      	movs	r3, #0
 8007132:	9309      	str	r3, [sp, #36]	; 0x24
 8007134:	2320      	movs	r3, #32
 8007136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800713a:	2330      	movs	r3, #48	; 0x30
 800713c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007140:	9503      	str	r5, [sp, #12]
 8007142:	f04f 0b01 	mov.w	fp, #1
 8007146:	4637      	mov	r7, r6
 8007148:	463d      	mov	r5, r7
 800714a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800714e:	b10b      	cbz	r3, 8007154 <_svfiprintf_r+0x58>
 8007150:	2b25      	cmp	r3, #37	; 0x25
 8007152:	d13e      	bne.n	80071d2 <_svfiprintf_r+0xd6>
 8007154:	ebb7 0a06 	subs.w	sl, r7, r6
 8007158:	d00b      	beq.n	8007172 <_svfiprintf_r+0x76>
 800715a:	4653      	mov	r3, sl
 800715c:	4632      	mov	r2, r6
 800715e:	4621      	mov	r1, r4
 8007160:	4640      	mov	r0, r8
 8007162:	f7ff ff71 	bl	8007048 <__ssputs_r>
 8007166:	3001      	adds	r0, #1
 8007168:	f000 80a4 	beq.w	80072b4 <_svfiprintf_r+0x1b8>
 800716c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716e:	4453      	add	r3, sl
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	783b      	ldrb	r3, [r7, #0]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 809d 	beq.w	80072b4 <_svfiprintf_r+0x1b8>
 800717a:	2300      	movs	r3, #0
 800717c:	f04f 32ff 	mov.w	r2, #4294967295
 8007180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007184:	9304      	str	r3, [sp, #16]
 8007186:	9307      	str	r3, [sp, #28]
 8007188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800718c:	931a      	str	r3, [sp, #104]	; 0x68
 800718e:	462f      	mov	r7, r5
 8007190:	2205      	movs	r2, #5
 8007192:	f817 1b01 	ldrb.w	r1, [r7], #1
 8007196:	4850      	ldr	r0, [pc, #320]	; (80072d8 <_svfiprintf_r+0x1dc>)
 8007198:	f7f9 f822 	bl	80001e0 <memchr>
 800719c:	9b04      	ldr	r3, [sp, #16]
 800719e:	b9d0      	cbnz	r0, 80071d6 <_svfiprintf_r+0xda>
 80071a0:	06d9      	lsls	r1, r3, #27
 80071a2:	bf44      	itt	mi
 80071a4:	2220      	movmi	r2, #32
 80071a6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071aa:	071a      	lsls	r2, r3, #28
 80071ac:	bf44      	itt	mi
 80071ae:	222b      	movmi	r2, #43	; 0x2b
 80071b0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80071b4:	782a      	ldrb	r2, [r5, #0]
 80071b6:	2a2a      	cmp	r2, #42	; 0x2a
 80071b8:	d015      	beq.n	80071e6 <_svfiprintf_r+0xea>
 80071ba:	9a07      	ldr	r2, [sp, #28]
 80071bc:	462f      	mov	r7, r5
 80071be:	2000      	movs	r0, #0
 80071c0:	250a      	movs	r5, #10
 80071c2:	4639      	mov	r1, r7
 80071c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071c8:	3b30      	subs	r3, #48	; 0x30
 80071ca:	2b09      	cmp	r3, #9
 80071cc:	d94d      	bls.n	800726a <_svfiprintf_r+0x16e>
 80071ce:	b1b8      	cbz	r0, 8007200 <_svfiprintf_r+0x104>
 80071d0:	e00f      	b.n	80071f2 <_svfiprintf_r+0xf6>
 80071d2:	462f      	mov	r7, r5
 80071d4:	e7b8      	b.n	8007148 <_svfiprintf_r+0x4c>
 80071d6:	4a40      	ldr	r2, [pc, #256]	; (80072d8 <_svfiprintf_r+0x1dc>)
 80071d8:	1a80      	subs	r0, r0, r2
 80071da:	fa0b f000 	lsl.w	r0, fp, r0
 80071de:	4318      	orrs	r0, r3
 80071e0:	9004      	str	r0, [sp, #16]
 80071e2:	463d      	mov	r5, r7
 80071e4:	e7d3      	b.n	800718e <_svfiprintf_r+0x92>
 80071e6:	9a03      	ldr	r2, [sp, #12]
 80071e8:	1d11      	adds	r1, r2, #4
 80071ea:	6812      	ldr	r2, [r2, #0]
 80071ec:	9103      	str	r1, [sp, #12]
 80071ee:	2a00      	cmp	r2, #0
 80071f0:	db01      	blt.n	80071f6 <_svfiprintf_r+0xfa>
 80071f2:	9207      	str	r2, [sp, #28]
 80071f4:	e004      	b.n	8007200 <_svfiprintf_r+0x104>
 80071f6:	4252      	negs	r2, r2
 80071f8:	f043 0302 	orr.w	r3, r3, #2
 80071fc:	9207      	str	r2, [sp, #28]
 80071fe:	9304      	str	r3, [sp, #16]
 8007200:	783b      	ldrb	r3, [r7, #0]
 8007202:	2b2e      	cmp	r3, #46	; 0x2e
 8007204:	d10c      	bne.n	8007220 <_svfiprintf_r+0x124>
 8007206:	787b      	ldrb	r3, [r7, #1]
 8007208:	2b2a      	cmp	r3, #42	; 0x2a
 800720a:	d133      	bne.n	8007274 <_svfiprintf_r+0x178>
 800720c:	9b03      	ldr	r3, [sp, #12]
 800720e:	1d1a      	adds	r2, r3, #4
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	9203      	str	r2, [sp, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	bfb8      	it	lt
 8007218:	f04f 33ff 	movlt.w	r3, #4294967295
 800721c:	3702      	adds	r7, #2
 800721e:	9305      	str	r3, [sp, #20]
 8007220:	4d2e      	ldr	r5, [pc, #184]	; (80072dc <_svfiprintf_r+0x1e0>)
 8007222:	7839      	ldrb	r1, [r7, #0]
 8007224:	2203      	movs	r2, #3
 8007226:	4628      	mov	r0, r5
 8007228:	f7f8 ffda 	bl	80001e0 <memchr>
 800722c:	b138      	cbz	r0, 800723e <_svfiprintf_r+0x142>
 800722e:	2340      	movs	r3, #64	; 0x40
 8007230:	1b40      	subs	r0, r0, r5
 8007232:	fa03 f000 	lsl.w	r0, r3, r0
 8007236:	9b04      	ldr	r3, [sp, #16]
 8007238:	4303      	orrs	r3, r0
 800723a:	3701      	adds	r7, #1
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	7839      	ldrb	r1, [r7, #0]
 8007240:	4827      	ldr	r0, [pc, #156]	; (80072e0 <_svfiprintf_r+0x1e4>)
 8007242:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007246:	2206      	movs	r2, #6
 8007248:	1c7e      	adds	r6, r7, #1
 800724a:	f7f8 ffc9 	bl	80001e0 <memchr>
 800724e:	2800      	cmp	r0, #0
 8007250:	d038      	beq.n	80072c4 <_svfiprintf_r+0x1c8>
 8007252:	4b24      	ldr	r3, [pc, #144]	; (80072e4 <_svfiprintf_r+0x1e8>)
 8007254:	bb13      	cbnz	r3, 800729c <_svfiprintf_r+0x1a0>
 8007256:	9b03      	ldr	r3, [sp, #12]
 8007258:	3307      	adds	r3, #7
 800725a:	f023 0307 	bic.w	r3, r3, #7
 800725e:	3308      	adds	r3, #8
 8007260:	9303      	str	r3, [sp, #12]
 8007262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007264:	444b      	add	r3, r9
 8007266:	9309      	str	r3, [sp, #36]	; 0x24
 8007268:	e76d      	b.n	8007146 <_svfiprintf_r+0x4a>
 800726a:	fb05 3202 	mla	r2, r5, r2, r3
 800726e:	2001      	movs	r0, #1
 8007270:	460f      	mov	r7, r1
 8007272:	e7a6      	b.n	80071c2 <_svfiprintf_r+0xc6>
 8007274:	2300      	movs	r3, #0
 8007276:	3701      	adds	r7, #1
 8007278:	9305      	str	r3, [sp, #20]
 800727a:	4619      	mov	r1, r3
 800727c:	250a      	movs	r5, #10
 800727e:	4638      	mov	r0, r7
 8007280:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007284:	3a30      	subs	r2, #48	; 0x30
 8007286:	2a09      	cmp	r2, #9
 8007288:	d903      	bls.n	8007292 <_svfiprintf_r+0x196>
 800728a:	2b00      	cmp	r3, #0
 800728c:	d0c8      	beq.n	8007220 <_svfiprintf_r+0x124>
 800728e:	9105      	str	r1, [sp, #20]
 8007290:	e7c6      	b.n	8007220 <_svfiprintf_r+0x124>
 8007292:	fb05 2101 	mla	r1, r5, r1, r2
 8007296:	2301      	movs	r3, #1
 8007298:	4607      	mov	r7, r0
 800729a:	e7f0      	b.n	800727e <_svfiprintf_r+0x182>
 800729c:	ab03      	add	r3, sp, #12
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4622      	mov	r2, r4
 80072a2:	4b11      	ldr	r3, [pc, #68]	; (80072e8 <_svfiprintf_r+0x1ec>)
 80072a4:	a904      	add	r1, sp, #16
 80072a6:	4640      	mov	r0, r8
 80072a8:	f3af 8000 	nop.w
 80072ac:	f1b0 3fff 	cmp.w	r0, #4294967295
 80072b0:	4681      	mov	r9, r0
 80072b2:	d1d6      	bne.n	8007262 <_svfiprintf_r+0x166>
 80072b4:	89a3      	ldrh	r3, [r4, #12]
 80072b6:	065b      	lsls	r3, r3, #25
 80072b8:	f53f af35 	bmi.w	8007126 <_svfiprintf_r+0x2a>
 80072bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072be:	b01d      	add	sp, #116	; 0x74
 80072c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c4:	ab03      	add	r3, sp, #12
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	4622      	mov	r2, r4
 80072ca:	4b07      	ldr	r3, [pc, #28]	; (80072e8 <_svfiprintf_r+0x1ec>)
 80072cc:	a904      	add	r1, sp, #16
 80072ce:	4640      	mov	r0, r8
 80072d0:	f000 f882 	bl	80073d8 <_printf_i>
 80072d4:	e7ea      	b.n	80072ac <_svfiprintf_r+0x1b0>
 80072d6:	bf00      	nop
 80072d8:	0800a0dc 	.word	0x0800a0dc
 80072dc:	0800a0e2 	.word	0x0800a0e2
 80072e0:	0800a0e6 	.word	0x0800a0e6
 80072e4:	00000000 	.word	0x00000000
 80072e8:	08007049 	.word	0x08007049

080072ec <_printf_common>:
 80072ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072f0:	4691      	mov	r9, r2
 80072f2:	461f      	mov	r7, r3
 80072f4:	688a      	ldr	r2, [r1, #8]
 80072f6:	690b      	ldr	r3, [r1, #16]
 80072f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072fc:	4293      	cmp	r3, r2
 80072fe:	bfb8      	it	lt
 8007300:	4613      	movlt	r3, r2
 8007302:	f8c9 3000 	str.w	r3, [r9]
 8007306:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800730a:	4606      	mov	r6, r0
 800730c:	460c      	mov	r4, r1
 800730e:	b112      	cbz	r2, 8007316 <_printf_common+0x2a>
 8007310:	3301      	adds	r3, #1
 8007312:	f8c9 3000 	str.w	r3, [r9]
 8007316:	6823      	ldr	r3, [r4, #0]
 8007318:	0699      	lsls	r1, r3, #26
 800731a:	bf42      	ittt	mi
 800731c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007320:	3302      	addmi	r3, #2
 8007322:	f8c9 3000 	strmi.w	r3, [r9]
 8007326:	6825      	ldr	r5, [r4, #0]
 8007328:	f015 0506 	ands.w	r5, r5, #6
 800732c:	d107      	bne.n	800733e <_printf_common+0x52>
 800732e:	f104 0a19 	add.w	sl, r4, #25
 8007332:	68e3      	ldr	r3, [r4, #12]
 8007334:	f8d9 2000 	ldr.w	r2, [r9]
 8007338:	1a9b      	subs	r3, r3, r2
 800733a:	42ab      	cmp	r3, r5
 800733c:	dc28      	bgt.n	8007390 <_printf_common+0xa4>
 800733e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	3300      	adds	r3, #0
 8007346:	bf18      	it	ne
 8007348:	2301      	movne	r3, #1
 800734a:	0692      	lsls	r2, r2, #26
 800734c:	d42d      	bmi.n	80073aa <_printf_common+0xbe>
 800734e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007352:	4639      	mov	r1, r7
 8007354:	4630      	mov	r0, r6
 8007356:	47c0      	blx	r8
 8007358:	3001      	adds	r0, #1
 800735a:	d020      	beq.n	800739e <_printf_common+0xb2>
 800735c:	6823      	ldr	r3, [r4, #0]
 800735e:	68e5      	ldr	r5, [r4, #12]
 8007360:	f8d9 2000 	ldr.w	r2, [r9]
 8007364:	f003 0306 	and.w	r3, r3, #6
 8007368:	2b04      	cmp	r3, #4
 800736a:	bf08      	it	eq
 800736c:	1aad      	subeq	r5, r5, r2
 800736e:	68a3      	ldr	r3, [r4, #8]
 8007370:	6922      	ldr	r2, [r4, #16]
 8007372:	bf0c      	ite	eq
 8007374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007378:	2500      	movne	r5, #0
 800737a:	4293      	cmp	r3, r2
 800737c:	bfc4      	itt	gt
 800737e:	1a9b      	subgt	r3, r3, r2
 8007380:	18ed      	addgt	r5, r5, r3
 8007382:	f04f 0900 	mov.w	r9, #0
 8007386:	341a      	adds	r4, #26
 8007388:	454d      	cmp	r5, r9
 800738a:	d11a      	bne.n	80073c2 <_printf_common+0xd6>
 800738c:	2000      	movs	r0, #0
 800738e:	e008      	b.n	80073a2 <_printf_common+0xb6>
 8007390:	2301      	movs	r3, #1
 8007392:	4652      	mov	r2, sl
 8007394:	4639      	mov	r1, r7
 8007396:	4630      	mov	r0, r6
 8007398:	47c0      	blx	r8
 800739a:	3001      	adds	r0, #1
 800739c:	d103      	bne.n	80073a6 <_printf_common+0xba>
 800739e:	f04f 30ff 	mov.w	r0, #4294967295
 80073a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073a6:	3501      	adds	r5, #1
 80073a8:	e7c3      	b.n	8007332 <_printf_common+0x46>
 80073aa:	18e1      	adds	r1, r4, r3
 80073ac:	1c5a      	adds	r2, r3, #1
 80073ae:	2030      	movs	r0, #48	; 0x30
 80073b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073b4:	4422      	add	r2, r4
 80073b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073ba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073be:	3302      	adds	r3, #2
 80073c0:	e7c5      	b.n	800734e <_printf_common+0x62>
 80073c2:	2301      	movs	r3, #1
 80073c4:	4622      	mov	r2, r4
 80073c6:	4639      	mov	r1, r7
 80073c8:	4630      	mov	r0, r6
 80073ca:	47c0      	blx	r8
 80073cc:	3001      	adds	r0, #1
 80073ce:	d0e6      	beq.n	800739e <_printf_common+0xb2>
 80073d0:	f109 0901 	add.w	r9, r9, #1
 80073d4:	e7d8      	b.n	8007388 <_printf_common+0x9c>
	...

080073d8 <_printf_i>:
 80073d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80073dc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80073e0:	460c      	mov	r4, r1
 80073e2:	7e09      	ldrb	r1, [r1, #24]
 80073e4:	b085      	sub	sp, #20
 80073e6:	296e      	cmp	r1, #110	; 0x6e
 80073e8:	4617      	mov	r7, r2
 80073ea:	4606      	mov	r6, r0
 80073ec:	4698      	mov	r8, r3
 80073ee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073f0:	f000 80b3 	beq.w	800755a <_printf_i+0x182>
 80073f4:	d822      	bhi.n	800743c <_printf_i+0x64>
 80073f6:	2963      	cmp	r1, #99	; 0x63
 80073f8:	d036      	beq.n	8007468 <_printf_i+0x90>
 80073fa:	d80a      	bhi.n	8007412 <_printf_i+0x3a>
 80073fc:	2900      	cmp	r1, #0
 80073fe:	f000 80b9 	beq.w	8007574 <_printf_i+0x19c>
 8007402:	2958      	cmp	r1, #88	; 0x58
 8007404:	f000 8083 	beq.w	800750e <_printf_i+0x136>
 8007408:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800740c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007410:	e032      	b.n	8007478 <_printf_i+0xa0>
 8007412:	2964      	cmp	r1, #100	; 0x64
 8007414:	d001      	beq.n	800741a <_printf_i+0x42>
 8007416:	2969      	cmp	r1, #105	; 0x69
 8007418:	d1f6      	bne.n	8007408 <_printf_i+0x30>
 800741a:	6820      	ldr	r0, [r4, #0]
 800741c:	6813      	ldr	r3, [r2, #0]
 800741e:	0605      	lsls	r5, r0, #24
 8007420:	f103 0104 	add.w	r1, r3, #4
 8007424:	d52a      	bpl.n	800747c <_printf_i+0xa4>
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6011      	str	r1, [r2, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da03      	bge.n	8007436 <_printf_i+0x5e>
 800742e:	222d      	movs	r2, #45	; 0x2d
 8007430:	425b      	negs	r3, r3
 8007432:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007436:	486f      	ldr	r0, [pc, #444]	; (80075f4 <_printf_i+0x21c>)
 8007438:	220a      	movs	r2, #10
 800743a:	e039      	b.n	80074b0 <_printf_i+0xd8>
 800743c:	2973      	cmp	r1, #115	; 0x73
 800743e:	f000 809d 	beq.w	800757c <_printf_i+0x1a4>
 8007442:	d808      	bhi.n	8007456 <_printf_i+0x7e>
 8007444:	296f      	cmp	r1, #111	; 0x6f
 8007446:	d020      	beq.n	800748a <_printf_i+0xb2>
 8007448:	2970      	cmp	r1, #112	; 0x70
 800744a:	d1dd      	bne.n	8007408 <_printf_i+0x30>
 800744c:	6823      	ldr	r3, [r4, #0]
 800744e:	f043 0320 	orr.w	r3, r3, #32
 8007452:	6023      	str	r3, [r4, #0]
 8007454:	e003      	b.n	800745e <_printf_i+0x86>
 8007456:	2975      	cmp	r1, #117	; 0x75
 8007458:	d017      	beq.n	800748a <_printf_i+0xb2>
 800745a:	2978      	cmp	r1, #120	; 0x78
 800745c:	d1d4      	bne.n	8007408 <_printf_i+0x30>
 800745e:	2378      	movs	r3, #120	; 0x78
 8007460:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007464:	4864      	ldr	r0, [pc, #400]	; (80075f8 <_printf_i+0x220>)
 8007466:	e055      	b.n	8007514 <_printf_i+0x13c>
 8007468:	6813      	ldr	r3, [r2, #0]
 800746a:	1d19      	adds	r1, r3, #4
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6011      	str	r1, [r2, #0]
 8007470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007478:	2301      	movs	r3, #1
 800747a:	e08c      	b.n	8007596 <_printf_i+0x1be>
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	6011      	str	r1, [r2, #0]
 8007480:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007484:	bf18      	it	ne
 8007486:	b21b      	sxthne	r3, r3
 8007488:	e7cf      	b.n	800742a <_printf_i+0x52>
 800748a:	6813      	ldr	r3, [r2, #0]
 800748c:	6825      	ldr	r5, [r4, #0]
 800748e:	1d18      	adds	r0, r3, #4
 8007490:	6010      	str	r0, [r2, #0]
 8007492:	0628      	lsls	r0, r5, #24
 8007494:	d501      	bpl.n	800749a <_printf_i+0xc2>
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	e002      	b.n	80074a0 <_printf_i+0xc8>
 800749a:	0668      	lsls	r0, r5, #25
 800749c:	d5fb      	bpl.n	8007496 <_printf_i+0xbe>
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	4854      	ldr	r0, [pc, #336]	; (80075f4 <_printf_i+0x21c>)
 80074a2:	296f      	cmp	r1, #111	; 0x6f
 80074a4:	bf14      	ite	ne
 80074a6:	220a      	movne	r2, #10
 80074a8:	2208      	moveq	r2, #8
 80074aa:	2100      	movs	r1, #0
 80074ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074b0:	6865      	ldr	r5, [r4, #4]
 80074b2:	60a5      	str	r5, [r4, #8]
 80074b4:	2d00      	cmp	r5, #0
 80074b6:	f2c0 8095 	blt.w	80075e4 <_printf_i+0x20c>
 80074ba:	6821      	ldr	r1, [r4, #0]
 80074bc:	f021 0104 	bic.w	r1, r1, #4
 80074c0:	6021      	str	r1, [r4, #0]
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d13d      	bne.n	8007542 <_printf_i+0x16a>
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	f040 808e 	bne.w	80075e8 <_printf_i+0x210>
 80074cc:	4665      	mov	r5, ip
 80074ce:	2a08      	cmp	r2, #8
 80074d0:	d10b      	bne.n	80074ea <_printf_i+0x112>
 80074d2:	6823      	ldr	r3, [r4, #0]
 80074d4:	07db      	lsls	r3, r3, #31
 80074d6:	d508      	bpl.n	80074ea <_printf_i+0x112>
 80074d8:	6923      	ldr	r3, [r4, #16]
 80074da:	6862      	ldr	r2, [r4, #4]
 80074dc:	429a      	cmp	r2, r3
 80074de:	bfde      	ittt	le
 80074e0:	2330      	movle	r3, #48	; 0x30
 80074e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80074e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80074ea:	ebac 0305 	sub.w	r3, ip, r5
 80074ee:	6123      	str	r3, [r4, #16]
 80074f0:	f8cd 8000 	str.w	r8, [sp]
 80074f4:	463b      	mov	r3, r7
 80074f6:	aa03      	add	r2, sp, #12
 80074f8:	4621      	mov	r1, r4
 80074fa:	4630      	mov	r0, r6
 80074fc:	f7ff fef6 	bl	80072ec <_printf_common>
 8007500:	3001      	adds	r0, #1
 8007502:	d14d      	bne.n	80075a0 <_printf_i+0x1c8>
 8007504:	f04f 30ff 	mov.w	r0, #4294967295
 8007508:	b005      	add	sp, #20
 800750a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800750e:	4839      	ldr	r0, [pc, #228]	; (80075f4 <_printf_i+0x21c>)
 8007510:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007514:	6813      	ldr	r3, [r2, #0]
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	1d1d      	adds	r5, r3, #4
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6015      	str	r5, [r2, #0]
 800751e:	060a      	lsls	r2, r1, #24
 8007520:	d50b      	bpl.n	800753a <_printf_i+0x162>
 8007522:	07ca      	lsls	r2, r1, #31
 8007524:	bf44      	itt	mi
 8007526:	f041 0120 	orrmi.w	r1, r1, #32
 800752a:	6021      	strmi	r1, [r4, #0]
 800752c:	b91b      	cbnz	r3, 8007536 <_printf_i+0x15e>
 800752e:	6822      	ldr	r2, [r4, #0]
 8007530:	f022 0220 	bic.w	r2, r2, #32
 8007534:	6022      	str	r2, [r4, #0]
 8007536:	2210      	movs	r2, #16
 8007538:	e7b7      	b.n	80074aa <_printf_i+0xd2>
 800753a:	064d      	lsls	r5, r1, #25
 800753c:	bf48      	it	mi
 800753e:	b29b      	uxthmi	r3, r3
 8007540:	e7ef      	b.n	8007522 <_printf_i+0x14a>
 8007542:	4665      	mov	r5, ip
 8007544:	fbb3 f1f2 	udiv	r1, r3, r2
 8007548:	fb02 3311 	mls	r3, r2, r1, r3
 800754c:	5cc3      	ldrb	r3, [r0, r3]
 800754e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007552:	460b      	mov	r3, r1
 8007554:	2900      	cmp	r1, #0
 8007556:	d1f5      	bne.n	8007544 <_printf_i+0x16c>
 8007558:	e7b9      	b.n	80074ce <_printf_i+0xf6>
 800755a:	6813      	ldr	r3, [r2, #0]
 800755c:	6825      	ldr	r5, [r4, #0]
 800755e:	6961      	ldr	r1, [r4, #20]
 8007560:	1d18      	adds	r0, r3, #4
 8007562:	6010      	str	r0, [r2, #0]
 8007564:	0628      	lsls	r0, r5, #24
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	d501      	bpl.n	800756e <_printf_i+0x196>
 800756a:	6019      	str	r1, [r3, #0]
 800756c:	e002      	b.n	8007574 <_printf_i+0x19c>
 800756e:	066a      	lsls	r2, r5, #25
 8007570:	d5fb      	bpl.n	800756a <_printf_i+0x192>
 8007572:	8019      	strh	r1, [r3, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	6123      	str	r3, [r4, #16]
 8007578:	4665      	mov	r5, ip
 800757a:	e7b9      	b.n	80074f0 <_printf_i+0x118>
 800757c:	6813      	ldr	r3, [r2, #0]
 800757e:	1d19      	adds	r1, r3, #4
 8007580:	6011      	str	r1, [r2, #0]
 8007582:	681d      	ldr	r5, [r3, #0]
 8007584:	6862      	ldr	r2, [r4, #4]
 8007586:	2100      	movs	r1, #0
 8007588:	4628      	mov	r0, r5
 800758a:	f7f8 fe29 	bl	80001e0 <memchr>
 800758e:	b108      	cbz	r0, 8007594 <_printf_i+0x1bc>
 8007590:	1b40      	subs	r0, r0, r5
 8007592:	6060      	str	r0, [r4, #4]
 8007594:	6863      	ldr	r3, [r4, #4]
 8007596:	6123      	str	r3, [r4, #16]
 8007598:	2300      	movs	r3, #0
 800759a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800759e:	e7a7      	b.n	80074f0 <_printf_i+0x118>
 80075a0:	6923      	ldr	r3, [r4, #16]
 80075a2:	462a      	mov	r2, r5
 80075a4:	4639      	mov	r1, r7
 80075a6:	4630      	mov	r0, r6
 80075a8:	47c0      	blx	r8
 80075aa:	3001      	adds	r0, #1
 80075ac:	d0aa      	beq.n	8007504 <_printf_i+0x12c>
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	079b      	lsls	r3, r3, #30
 80075b2:	d413      	bmi.n	80075dc <_printf_i+0x204>
 80075b4:	68e0      	ldr	r0, [r4, #12]
 80075b6:	9b03      	ldr	r3, [sp, #12]
 80075b8:	4298      	cmp	r0, r3
 80075ba:	bfb8      	it	lt
 80075bc:	4618      	movlt	r0, r3
 80075be:	e7a3      	b.n	8007508 <_printf_i+0x130>
 80075c0:	2301      	movs	r3, #1
 80075c2:	464a      	mov	r2, r9
 80075c4:	4639      	mov	r1, r7
 80075c6:	4630      	mov	r0, r6
 80075c8:	47c0      	blx	r8
 80075ca:	3001      	adds	r0, #1
 80075cc:	d09a      	beq.n	8007504 <_printf_i+0x12c>
 80075ce:	3501      	adds	r5, #1
 80075d0:	68e3      	ldr	r3, [r4, #12]
 80075d2:	9a03      	ldr	r2, [sp, #12]
 80075d4:	1a9b      	subs	r3, r3, r2
 80075d6:	42ab      	cmp	r3, r5
 80075d8:	dcf2      	bgt.n	80075c0 <_printf_i+0x1e8>
 80075da:	e7eb      	b.n	80075b4 <_printf_i+0x1dc>
 80075dc:	2500      	movs	r5, #0
 80075de:	f104 0919 	add.w	r9, r4, #25
 80075e2:	e7f5      	b.n	80075d0 <_printf_i+0x1f8>
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d1ac      	bne.n	8007542 <_printf_i+0x16a>
 80075e8:	7803      	ldrb	r3, [r0, #0]
 80075ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f2:	e76c      	b.n	80074ce <_printf_i+0xf6>
 80075f4:	0800a0ed 	.word	0x0800a0ed
 80075f8:	0800a0fe 	.word	0x0800a0fe

080075fc <memmove>:
 80075fc:	4288      	cmp	r0, r1
 80075fe:	b510      	push	{r4, lr}
 8007600:	eb01 0302 	add.w	r3, r1, r2
 8007604:	d807      	bhi.n	8007616 <memmove+0x1a>
 8007606:	1e42      	subs	r2, r0, #1
 8007608:	4299      	cmp	r1, r3
 800760a:	d00a      	beq.n	8007622 <memmove+0x26>
 800760c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007610:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007614:	e7f8      	b.n	8007608 <memmove+0xc>
 8007616:	4283      	cmp	r3, r0
 8007618:	d9f5      	bls.n	8007606 <memmove+0xa>
 800761a:	1881      	adds	r1, r0, r2
 800761c:	1ad2      	subs	r2, r2, r3
 800761e:	42d3      	cmn	r3, r2
 8007620:	d100      	bne.n	8007624 <memmove+0x28>
 8007622:	bd10      	pop	{r4, pc}
 8007624:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007628:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800762c:	e7f7      	b.n	800761e <memmove+0x22>
	...

08007630 <_free_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4605      	mov	r5, r0
 8007634:	2900      	cmp	r1, #0
 8007636:	d045      	beq.n	80076c4 <_free_r+0x94>
 8007638:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800763c:	1f0c      	subs	r4, r1, #4
 800763e:	2b00      	cmp	r3, #0
 8007640:	bfb8      	it	lt
 8007642:	18e4      	addlt	r4, r4, r3
 8007644:	f000 f8d2 	bl	80077ec <__malloc_lock>
 8007648:	4a1f      	ldr	r2, [pc, #124]	; (80076c8 <_free_r+0x98>)
 800764a:	6813      	ldr	r3, [r2, #0]
 800764c:	4610      	mov	r0, r2
 800764e:	b933      	cbnz	r3, 800765e <_free_r+0x2e>
 8007650:	6063      	str	r3, [r4, #4]
 8007652:	6014      	str	r4, [r2, #0]
 8007654:	4628      	mov	r0, r5
 8007656:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800765a:	f000 b8c8 	b.w	80077ee <__malloc_unlock>
 800765e:	42a3      	cmp	r3, r4
 8007660:	d90c      	bls.n	800767c <_free_r+0x4c>
 8007662:	6821      	ldr	r1, [r4, #0]
 8007664:	1862      	adds	r2, r4, r1
 8007666:	4293      	cmp	r3, r2
 8007668:	bf04      	itt	eq
 800766a:	681a      	ldreq	r2, [r3, #0]
 800766c:	685b      	ldreq	r3, [r3, #4]
 800766e:	6063      	str	r3, [r4, #4]
 8007670:	bf04      	itt	eq
 8007672:	1852      	addeq	r2, r2, r1
 8007674:	6022      	streq	r2, [r4, #0]
 8007676:	6004      	str	r4, [r0, #0]
 8007678:	e7ec      	b.n	8007654 <_free_r+0x24>
 800767a:	4613      	mov	r3, r2
 800767c:	685a      	ldr	r2, [r3, #4]
 800767e:	b10a      	cbz	r2, 8007684 <_free_r+0x54>
 8007680:	42a2      	cmp	r2, r4
 8007682:	d9fa      	bls.n	800767a <_free_r+0x4a>
 8007684:	6819      	ldr	r1, [r3, #0]
 8007686:	1858      	adds	r0, r3, r1
 8007688:	42a0      	cmp	r0, r4
 800768a:	d10b      	bne.n	80076a4 <_free_r+0x74>
 800768c:	6820      	ldr	r0, [r4, #0]
 800768e:	4401      	add	r1, r0
 8007690:	1858      	adds	r0, r3, r1
 8007692:	4282      	cmp	r2, r0
 8007694:	6019      	str	r1, [r3, #0]
 8007696:	d1dd      	bne.n	8007654 <_free_r+0x24>
 8007698:	6810      	ldr	r0, [r2, #0]
 800769a:	6852      	ldr	r2, [r2, #4]
 800769c:	605a      	str	r2, [r3, #4]
 800769e:	4401      	add	r1, r0
 80076a0:	6019      	str	r1, [r3, #0]
 80076a2:	e7d7      	b.n	8007654 <_free_r+0x24>
 80076a4:	d902      	bls.n	80076ac <_free_r+0x7c>
 80076a6:	230c      	movs	r3, #12
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	e7d3      	b.n	8007654 <_free_r+0x24>
 80076ac:	6820      	ldr	r0, [r4, #0]
 80076ae:	1821      	adds	r1, r4, r0
 80076b0:	428a      	cmp	r2, r1
 80076b2:	bf04      	itt	eq
 80076b4:	6811      	ldreq	r1, [r2, #0]
 80076b6:	6852      	ldreq	r2, [r2, #4]
 80076b8:	6062      	str	r2, [r4, #4]
 80076ba:	bf04      	itt	eq
 80076bc:	1809      	addeq	r1, r1, r0
 80076be:	6021      	streq	r1, [r4, #0]
 80076c0:	605c      	str	r4, [r3, #4]
 80076c2:	e7c7      	b.n	8007654 <_free_r+0x24>
 80076c4:	bd38      	pop	{r3, r4, r5, pc}
 80076c6:	bf00      	nop
 80076c8:	20004a1c 	.word	0x20004a1c

080076cc <_malloc_r>:
 80076cc:	b570      	push	{r4, r5, r6, lr}
 80076ce:	1ccd      	adds	r5, r1, #3
 80076d0:	f025 0503 	bic.w	r5, r5, #3
 80076d4:	3508      	adds	r5, #8
 80076d6:	2d0c      	cmp	r5, #12
 80076d8:	bf38      	it	cc
 80076da:	250c      	movcc	r5, #12
 80076dc:	2d00      	cmp	r5, #0
 80076de:	4606      	mov	r6, r0
 80076e0:	db01      	blt.n	80076e6 <_malloc_r+0x1a>
 80076e2:	42a9      	cmp	r1, r5
 80076e4:	d903      	bls.n	80076ee <_malloc_r+0x22>
 80076e6:	230c      	movs	r3, #12
 80076e8:	6033      	str	r3, [r6, #0]
 80076ea:	2000      	movs	r0, #0
 80076ec:	bd70      	pop	{r4, r5, r6, pc}
 80076ee:	f000 f87d 	bl	80077ec <__malloc_lock>
 80076f2:	4a21      	ldr	r2, [pc, #132]	; (8007778 <_malloc_r+0xac>)
 80076f4:	6814      	ldr	r4, [r2, #0]
 80076f6:	4621      	mov	r1, r4
 80076f8:	b991      	cbnz	r1, 8007720 <_malloc_r+0x54>
 80076fa:	4c20      	ldr	r4, [pc, #128]	; (800777c <_malloc_r+0xb0>)
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	b91b      	cbnz	r3, 8007708 <_malloc_r+0x3c>
 8007700:	4630      	mov	r0, r6
 8007702:	f000 f863 	bl	80077cc <_sbrk_r>
 8007706:	6020      	str	r0, [r4, #0]
 8007708:	4629      	mov	r1, r5
 800770a:	4630      	mov	r0, r6
 800770c:	f000 f85e 	bl	80077cc <_sbrk_r>
 8007710:	1c43      	adds	r3, r0, #1
 8007712:	d124      	bne.n	800775e <_malloc_r+0x92>
 8007714:	230c      	movs	r3, #12
 8007716:	6033      	str	r3, [r6, #0]
 8007718:	4630      	mov	r0, r6
 800771a:	f000 f868 	bl	80077ee <__malloc_unlock>
 800771e:	e7e4      	b.n	80076ea <_malloc_r+0x1e>
 8007720:	680b      	ldr	r3, [r1, #0]
 8007722:	1b5b      	subs	r3, r3, r5
 8007724:	d418      	bmi.n	8007758 <_malloc_r+0x8c>
 8007726:	2b0b      	cmp	r3, #11
 8007728:	d90f      	bls.n	800774a <_malloc_r+0x7e>
 800772a:	600b      	str	r3, [r1, #0]
 800772c:	50cd      	str	r5, [r1, r3]
 800772e:	18cc      	adds	r4, r1, r3
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f85c 	bl	80077ee <__malloc_unlock>
 8007736:	f104 000b 	add.w	r0, r4, #11
 800773a:	1d23      	adds	r3, r4, #4
 800773c:	f020 0007 	bic.w	r0, r0, #7
 8007740:	1ac3      	subs	r3, r0, r3
 8007742:	d0d3      	beq.n	80076ec <_malloc_r+0x20>
 8007744:	425a      	negs	r2, r3
 8007746:	50e2      	str	r2, [r4, r3]
 8007748:	e7d0      	b.n	80076ec <_malloc_r+0x20>
 800774a:	428c      	cmp	r4, r1
 800774c:	684b      	ldr	r3, [r1, #4]
 800774e:	bf16      	itet	ne
 8007750:	6063      	strne	r3, [r4, #4]
 8007752:	6013      	streq	r3, [r2, #0]
 8007754:	460c      	movne	r4, r1
 8007756:	e7eb      	b.n	8007730 <_malloc_r+0x64>
 8007758:	460c      	mov	r4, r1
 800775a:	6849      	ldr	r1, [r1, #4]
 800775c:	e7cc      	b.n	80076f8 <_malloc_r+0x2c>
 800775e:	1cc4      	adds	r4, r0, #3
 8007760:	f024 0403 	bic.w	r4, r4, #3
 8007764:	42a0      	cmp	r0, r4
 8007766:	d005      	beq.n	8007774 <_malloc_r+0xa8>
 8007768:	1a21      	subs	r1, r4, r0
 800776a:	4630      	mov	r0, r6
 800776c:	f000 f82e 	bl	80077cc <_sbrk_r>
 8007770:	3001      	adds	r0, #1
 8007772:	d0cf      	beq.n	8007714 <_malloc_r+0x48>
 8007774:	6025      	str	r5, [r4, #0]
 8007776:	e7db      	b.n	8007730 <_malloc_r+0x64>
 8007778:	20004a1c 	.word	0x20004a1c
 800777c:	20004a20 	.word	0x20004a20

08007780 <_realloc_r>:
 8007780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007782:	4607      	mov	r7, r0
 8007784:	4614      	mov	r4, r2
 8007786:	460e      	mov	r6, r1
 8007788:	b921      	cbnz	r1, 8007794 <_realloc_r+0x14>
 800778a:	4611      	mov	r1, r2
 800778c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007790:	f7ff bf9c 	b.w	80076cc <_malloc_r>
 8007794:	b922      	cbnz	r2, 80077a0 <_realloc_r+0x20>
 8007796:	f7ff ff4b 	bl	8007630 <_free_r>
 800779a:	4625      	mov	r5, r4
 800779c:	4628      	mov	r0, r5
 800779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077a0:	f000 f826 	bl	80077f0 <_malloc_usable_size_r>
 80077a4:	42a0      	cmp	r0, r4
 80077a6:	d20f      	bcs.n	80077c8 <_realloc_r+0x48>
 80077a8:	4621      	mov	r1, r4
 80077aa:	4638      	mov	r0, r7
 80077ac:	f7ff ff8e 	bl	80076cc <_malloc_r>
 80077b0:	4605      	mov	r5, r0
 80077b2:	2800      	cmp	r0, #0
 80077b4:	d0f2      	beq.n	800779c <_realloc_r+0x1c>
 80077b6:	4631      	mov	r1, r6
 80077b8:	4622      	mov	r2, r4
 80077ba:	f7ff fc11 	bl	8006fe0 <memcpy>
 80077be:	4631      	mov	r1, r6
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff ff35 	bl	8007630 <_free_r>
 80077c6:	e7e9      	b.n	800779c <_realloc_r+0x1c>
 80077c8:	4635      	mov	r5, r6
 80077ca:	e7e7      	b.n	800779c <_realloc_r+0x1c>

080077cc <_sbrk_r>:
 80077cc:	b538      	push	{r3, r4, r5, lr}
 80077ce:	4c06      	ldr	r4, [pc, #24]	; (80077e8 <_sbrk_r+0x1c>)
 80077d0:	2300      	movs	r3, #0
 80077d2:	4605      	mov	r5, r0
 80077d4:	4608      	mov	r0, r1
 80077d6:	6023      	str	r3, [r4, #0]
 80077d8:	f7fa fc1a 	bl	8002010 <_sbrk>
 80077dc:	1c43      	adds	r3, r0, #1
 80077de:	d102      	bne.n	80077e6 <_sbrk_r+0x1a>
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	b103      	cbz	r3, 80077e6 <_sbrk_r+0x1a>
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	bd38      	pop	{r3, r4, r5, pc}
 80077e8:	20004bb8 	.word	0x20004bb8

080077ec <__malloc_lock>:
 80077ec:	4770      	bx	lr

080077ee <__malloc_unlock>:
 80077ee:	4770      	bx	lr

080077f0 <_malloc_usable_size_r>:
 80077f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f4:	1f18      	subs	r0, r3, #4
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	bfbc      	itt	lt
 80077fa:	580b      	ldrlt	r3, [r1, r0]
 80077fc:	18c0      	addlt	r0, r0, r3
 80077fe:	4770      	bx	lr

08007800 <_init>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr

0800780c <_fini>:
 800780c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780e:	bf00      	nop
 8007810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007812:	bc08      	pop	{r3}
 8007814:	469e      	mov	lr, r3
 8007816:	4770      	bx	lr
